var accMandate = [];
//var trnsNtAllwdDts = [];
//var trnsNtAllwdDys = [];

function newCustomerOpenATab(slctr, linkArgs) {
    openATab(slctr, linkArgs + "&custID=" + $("#custID").val());
}

function validateCustomerForm(title, firstName, surName, gender, maritalStatus, dob, nationality, mobileNo, telNo, residentialAddress,
        relation, startDate, lnkdFirmName, lnkdFirmLoc) {

    if (title === "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#title").css('border-color', 'red');
        $("#title").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a <b>Title</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (firstName.trim() == "" || firstName == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#firstName").css('border-color', 'red');
        $("#firstName").css('border-width', '2px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter <b>First Name</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (surName.trim() == "" || surName == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#surName").css('border-color', 'red');
        $("#surName").css('border-width', '2px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter <b>Surname</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (gender === "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#gender").css('border-color', 'red');
        $("#gender").css('border-width', '2px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select <b>Gender</b>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (maritalStatus == "" || maritalStatus == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#maritalStatus").css('border-color', 'red');
        $("#maritalStatus").css('border-width', '2px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select <b>Marital Status</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (dob == "" || dob == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#dob").css('border-color', 'red');
        $("#dob").css('border-width', '2px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please choose <b>Date of Birth</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (nationality == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#nationality").css('border-color', 'red');
        $("#nationality").css('border-width', '2px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select <b>Nationality</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if ((mobileNo.trim() == "" || mobileNo == "undefined") && (telNo.trim() == "" || telNo == "undefined")) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#mobileNo").css('border-color', 'red');
        $("#mobileNo").css('border-width', '2px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter at lease one <b>Contact Number</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (residentialAddress.trim() == "" || residentialAddress == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#residentialAddress").css('border-color', 'red');
        $("#residentialAddress").css('border-width', '2px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide a <b>Residential address</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (relation == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#relation").css('border-color', 'red');
        $("#relation").css('border-width', '2px');
        $("#residentialAddress").css('border-color', '#ccc');
        $("#residentialAddress").css('border-width', '1px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a <b>Person Type</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (startDate == "" || startDate == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#startDate").css('border-color', 'red');
        $("#startDate").css('border-width', '2px');
        $("#relation").css('border-color', '#ccc');
        $("#relation").css('border-width', '1px');
        $("#residentialAddress").css('border-color', '#ccc');
        $("#residentialAddress").css('border-width', '1px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select the <b>Effective Start Date</b> of this Customer setup!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (lnkdFirmName.trim() == "" || lnkdFirmName == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#lnkdFirmName").css('border-color', 'red');
        $("#lnkdFirmName").css('border-width', '2px');
        $("#startDate").css('border-color', '#ccc');
        $("#startDate").css('border-width', '1px');
        $("#relation").css('border-color', '#ccc');
        $("#relation").css('border-width', '1px');
        $("#residentialAddress").css('border-color', '#ccc');
        $("#residentialAddress").css('border-width', '1px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide the <b>Workplace</b> of this Customer!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (lnkdFirmLoc.trim() == "" || lnkdFirmLoc == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#lnkdFirmLoc").css('border-color', 'red');
        $("#lnkdFirmLoc").css('border-width', '2px');
        $("#lnkdFirmName").css('border-color', '#ccc');
        $("#lnkdFirmName").css('border-width', '1px');
        $("#startDate").css('border-color', '#ccc');
        $("#startDate").css('border-width', '1px');
        $("#relation").css('border-color', '#ccc');
        $("#relation").css('border-width', '1px');
        $("#residentialAddress").css('border-color', '#ccc');
        $("#residentialAddress").css('border-width', '1px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide the <b>Site/Branch</b> of tje Workplace!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        $("#lnkdFirmLoc").css('border-color', '#ccc');
        $("#lnkdFirmLoc").css('border-width', '1px');
        $("#lnkdFirmName").css('border-color', '#ccc');
        $("#lnkdFirmName").css('border-width', '1px');
        $("#startDate").css('border-color', '#ccc');
        $("#startDate").css('border-width', '1px');
        $("#relation").css('border-color', '#ccc');
        $("#relation").css('border-width', '1px');
        $("#residentialAddress").css('border-color', '#ccc');
        $("#residentialAddress").css('border-width', '1px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        return true;
    }
}

function saveBasicData(pgNo, subPgNo, vtyp, shdSbmt)
{
    var box;
    var box2;
    var svOrsbmt = "Saving";
    if (shdSbmt > 0) {
        svOrsbmt = "Submitting for AUTHORIZATION";
    }
    
    var pActiveTab = $('.nav-tabs .active').text();

    var myFormPage = 1;
    //var $this = $("#cageTrnstab");
    //$this.tab('show');        

    //if(pActiveTab == "All Apps/Modules  13Additional Data"){
    if(pActiveTab.indexOf('Additional Data') >= 0) {
        myFormPage = 2;
    }    

    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        //$body.addClass("mdlloadingDiag");

        var obj;
        var profileID = typeof $("#profileID").val() === 'undefined' ? -1 : $("#profileID").val();
        var custID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
        var idNo = typeof $("#idNo").val() === 'undefined' ? '' : $("#idNo").val();
        var title = typeof $("#title").val() === 'undefined' ? '' : $("#title").val();
        var firstName = typeof $("#firstName").val() === 'undefined' ? '' : $("#firstName").val();
        var surName = typeof $("#surName").val() === 'undefined' ? '' : $("#surName").val();
        var otherNames = typeof $("#otherNames").val() === 'undefined' ? '' : $("#otherNames").val();
        var gender = typeof $("#gender").val() === 'undefined' ? '' : $("#gender").val();
        var maritalStatus = typeof $("#maritalStatus").val() === 'undefined' ? '' : $("#maritalStatus").val();
        var dob = typeof $("#dob").val() === 'undefined' ? '' : $("#dob").val();
        var pob = typeof $("#pob").val() === 'undefined' ? '' : $("#pob").val();
        var nationality = typeof $("#nationality").val() === 'undefined' ? '' : $("#nationality").val();
        var homeTown = typeof $("#homeTown").val() === 'undefined' ? '' : $("#homeTown").val();
        var religion = typeof $("#religion").val() === 'undefined' ? '' : $("#religion").val();
        var lnkdFirmName = typeof $("#lnkdFirmName").val() === 'undefined' ? '' : $("#lnkdFirmName").val();
        var lnkdFirmLoc = typeof $("#lnkdFirmLoc").val() === 'undefined' ? '' : $("#lnkdFirmLoc").val();
        var email = typeof $("#email").val() === 'undefined' ? '' : $("#email").val();
        var telNo = typeof $("#telNo").val() === 'undefined' ? '' : $("#telNo").val();
        var mobileNo = typeof $("#mobileNo").val() === 'undefined' ? '' : $("#mobileNo").val();
        var faxNo = typeof $("#faxNo").val() === 'undefined' ? '' : $("#faxNo").val();
        var postalAddress = typeof $("#postalAddress").val() === 'undefined' ? '' : $("#postalAddress").val();
        var residentialAddress = typeof $("#residentialAddress").val() === 'undefined' ? '' : $("#residentialAddress").val();
        var relation = typeof $("#relation").val() === 'undefined' ? '' : $("#relation").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? '' : $("#bnkBranchID").val();
        var startDate = typeof $("#startDate").val() === 'undefined' ? '' : $("#startDate").val();
        var endDate = typeof $("#endDate").val() === 'undefined' ? '' : $("#endDate").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        //VALIDATIONS
        var rslt = validateCustomerForm(title, firstName, surName, gender, maritalStatus, dob,
                nationality, mobileNo, telNo, residentialAddress, relation, startDate, lnkdFirmName, lnkdFirmLoc);
        if (!rslt) {
            return false;
        }

        if (shdSbmt > 0 && $('#nationalIDTblEDT > tbody > tr').length <= 0) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "<span style='color:red; font-weight:bold !important;'><i>Please provide at least One(1) National ID for Customer</i></span>",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }

        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">' + svOrsbmt + '. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var srcType = "Personal Customer";
        var addtnlCstmrDataCol1 = typeof $("#addtnlCstmrDataCol1").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol1").val();
        var addtnlCstmrDataCol2 = typeof $("#addtnlCstmrDataCol2").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol2").val();
        var addtnlCstmrDataCol3 = typeof $("#addtnlCstmrDataCol3").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol3").val();
        var addtnlCstmrDataCol4 = typeof $("#addtnlCstmrDataCol4").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol4").val();
        var addtnlCstmrDataCol5 = typeof $("#addtnlCstmrDataCol5").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol5").val();
        var addtnlCstmrDataCol6 = typeof $("#addtnlCstmrDataCol6").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol6").val();
        var addtnlCstmrDataCol7 = typeof $("#addtnlCstmrDataCol7").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol7").val();
        var addtnlCstmrDataCol8 = typeof $("#addtnlCstmrDataCol8").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol8").val();
        var addtnlCstmrDataCol9 = typeof $("#addtnlCstmrDataCol9").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol9").val();
        var addtnlCstmrDataCol10 = typeof $("#addtnlCstmrDataCol10").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol10").val();
        var addtnlCstmrDataCol11 = typeof $("#addtnlCstmrDataCol11").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol11").val();
        var addtnlCstmrDataCol12 = typeof $("#addtnlCstmrDataCol12").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol12").val();
        var addtnlCstmrDataCol13 = typeof $("#addtnlCstmrDataCol13").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol13").val();
        var addtnlCstmrDataCol14 = typeof $("#addtnlCstmrDataCol14").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol14").val();
        var addtnlCstmrDataCol15 = typeof $("#addtnlCstmrDataCol15").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol15").val();
        var addtnlCstmrDataCol16 = typeof $("#addtnlCstmrDataCol16").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol16").val();
        var addtnlCstmrDataCol17 = typeof $("#addtnlCstmrDataCol17").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol17").val();
        var addtnlCstmrDataCol18 = typeof $("#addtnlCstmrDataCol18").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol18").val();
        var addtnlCstmrDataCol19 = typeof $("#addtnlCstmrDataCol19").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol19").val();
        var addtnlCstmrDataCol20 = typeof $("#addtnlCstmrDataCol20").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol20").val();
        var addtnlCstmrDataCol21 = typeof $("#addtnlCstmrDataCol21").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol21").val();
        var addtnlCstmrDataCol22 = typeof $("#addtnlCstmrDataCol22").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol22").val();
        var addtnlCstmrDataCol23 = typeof $("#addtnlCstmrDataCol23").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol23").val();
        var addtnlCstmrDataCol24 = typeof $("#addtnlCstmrDataCol24").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol24").val();
        var addtnlCstmrDataCol25 = typeof $("#addtnlCstmrDataCol25").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol25").val();
        var addtnlCstmrDataCol26 = typeof $("#addtnlCstmrDataCol26").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol26").val();
        var addtnlCstmrDataCol27 = typeof $("#addtnlCstmrDataCol27").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol27").val();
        var addtnlCstmrDataCol28 = typeof $("#addtnlCstmrDataCol28").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol28").val();
        var addtnlCstmrDataCol29 = typeof $("#addtnlCstmrDataCol29").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol29").val();
        var addtnlCstmrDataCol30 = typeof $("#addtnlCstmrDataCol30").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol30").val();
        var addtnlCstmrDataCol31 = typeof $("#addtnlCstmrDataCol31").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol31").val();
        var addtnlCstmrDataCol32 = typeof $("#addtnlCstmrDataCol32").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol32").val();
        var addtnlCstmrDataCol33 = typeof $("#addtnlCstmrDataCol33").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol33").val();
        var addtnlCstmrDataCol34 = typeof $("#addtnlCstmrDataCol34").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol34").val();
        var addtnlCstmrDataCol35 = typeof $("#addtnlCstmrDataCol35").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol35").val();
        var addtnlCstmrDataCol36 = typeof $("#addtnlCstmrDataCol36").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol36").val();
        var addtnlCstmrDataCol37 = typeof $("#addtnlCstmrDataCol37").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol37").val();
        var addtnlCstmrDataCol38 = typeof $("#addtnlCstmrDataCol38").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol38").val();
        var addtnlCstmrDataCol39 = typeof $("#addtnlCstmrDataCol39").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol39").val();
        var addtnlCstmrDataCol40 = typeof $("#addtnlCstmrDataCol40").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol40").val();
        var addtnlCstmrDataCol41 = typeof $("#addtnlCstmrDataCol41").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol41").val();
        var addtnlCstmrDataCol42 = typeof $("#addtnlCstmrDataCol42").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol42").val();
        var addtnlCstmrDataCol43 = typeof $("#addtnlCstmrDataCol43").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol43").val();
        var addtnlCstmrDataCol44 = typeof $("#addtnlCstmrDataCol44").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol44").val();
        var addtnlCstmrDataCol45 = typeof $("#addtnlCstmrDataCol45").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol45").val();
        var addtnlCstmrDataCol46 = typeof $("#addtnlCstmrDataCol46").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol46").val();
        var addtnlCstmrDataCol47 = typeof $("#addtnlCstmrDataCol47").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol47").val();
        var addtnlCstmrDataCol48 = typeof $("#addtnlCstmrDataCol48").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol48").val();
        var addtnlCstmrDataCol49 = typeof $("#addtnlCstmrDataCol49").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol49").val();
        var addtnlCstmrDataCol50 = typeof $("#addtnlCstmrDataCol50").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol50").val();
        //var formData = new FormData($(this)[0]);
        var formData = new FormData();
        formData.append('custPicture', $('#custPicture')[0].files[0]);
        formData.append('signPicture', $('#signPicture')[0].files[0]);
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('profileID', profileID);
        formData.append('custID', custID);
        formData.append('idNo', idNo);
        formData.append('title', title);
        formData.append('firstName', firstName);
        formData.append('surName', surName);
        formData.append('otherNames', otherNames);
        formData.append('gender', gender);
        formData.append('maritalStatus', maritalStatus);
        formData.append('dob', dob);
        formData.append('pob', pob);
        formData.append('nationality', nationality);
        formData.append('homeTown', homeTown);
        formData.append('religion', religion);
        formData.append('lnkdFirmName', lnkdFirmName);
        formData.append('lnkdFirmLoc', lnkdFirmLoc);
        formData.append('email', email);
        formData.append('telNo', telNo);
        formData.append('mobileNo', mobileNo);
        formData.append('faxNo', faxNo);
        formData.append('postalAddress', postalAddress);
        formData.append('residentialAddress', residentialAddress);
        formData.append('relation', relation);
        formData.append('bnkBranchID', bnkBranchID);
        formData.append('startDate', startDate);
        formData.append('endDate', endDate);
        formData.append('srcType', srcType);
        formData.append('shdSbmt', shdSbmt);
        formData.append('rvsnTtl', rvsnTtl);
        formData.append('addtnlCstmrDataCol1', addtnlCstmrDataCol1);
        formData.append('addtnlCstmrDataCol2', addtnlCstmrDataCol2);
        formData.append('addtnlCstmrDataCol3', addtnlCstmrDataCol3);
        formData.append('addtnlCstmrDataCol4', addtnlCstmrDataCol4);
        formData.append('addtnlCstmrDataCol5', addtnlCstmrDataCol5);
        formData.append('addtnlCstmrDataCol6', addtnlCstmrDataCol6);
        formData.append('addtnlCstmrDataCol7', addtnlCstmrDataCol7);
        formData.append('addtnlCstmrDataCol8', addtnlCstmrDataCol8);
        formData.append('addtnlCstmrDataCol9', addtnlCstmrDataCol9);
        formData.append('addtnlCstmrDataCol10', addtnlCstmrDataCol10);
        formData.append('addtnlCstmrDataCol11', addtnlCstmrDataCol11);
        formData.append('addtnlCstmrDataCol12', addtnlCstmrDataCol12);
        formData.append('addtnlCstmrDataCol13', addtnlCstmrDataCol13);
        formData.append('addtnlCstmrDataCol14', addtnlCstmrDataCol14);
        formData.append('addtnlCstmrDataCol15', addtnlCstmrDataCol15);
        formData.append('addtnlCstmrDataCol16', addtnlCstmrDataCol16);
        formData.append('addtnlCstmrDataCol17', addtnlCstmrDataCol17);
        formData.append('addtnlCstmrDataCol18', addtnlCstmrDataCol18);
        formData.append('addtnlCstmrDataCol19', addtnlCstmrDataCol19);
        formData.append('addtnlCstmrDataCol20', addtnlCstmrDataCol20);
        formData.append('addtnlCstmrDataCol21', addtnlCstmrDataCol21);
        formData.append('addtnlCstmrDataCol22', addtnlCstmrDataCol22);
        formData.append('addtnlCstmrDataCol23', addtnlCstmrDataCol23);
        formData.append('addtnlCstmrDataCol24', addtnlCstmrDataCol24);
        formData.append('addtnlCstmrDataCol25', addtnlCstmrDataCol25);
        formData.append('addtnlCstmrDataCol26', addtnlCstmrDataCol26);
        formData.append('addtnlCstmrDataCol27', addtnlCstmrDataCol27);
        formData.append('addtnlCstmrDataCol28', addtnlCstmrDataCol28);
        formData.append('addtnlCstmrDataCol29', addtnlCstmrDataCol29);
        formData.append('addtnlCstmrDataCol30', addtnlCstmrDataCol30);
        formData.append('addtnlCstmrDataCol31', addtnlCstmrDataCol31);
        formData.append('addtnlCstmrDataCol32', addtnlCstmrDataCol32);
        formData.append('addtnlCstmrDataCol33', addtnlCstmrDataCol33);
        formData.append('addtnlCstmrDataCol34', addtnlCstmrDataCol34);
        formData.append('addtnlCstmrDataCol35', addtnlCstmrDataCol35);
        formData.append('addtnlCstmrDataCol36', addtnlCstmrDataCol36);
        formData.append('addtnlCstmrDataCol37', addtnlCstmrDataCol37);
        formData.append('addtnlCstmrDataCol38', addtnlCstmrDataCol38);
        formData.append('addtnlCstmrDataCol39', addtnlCstmrDataCol39);
        formData.append('addtnlCstmrDataCol40', addtnlCstmrDataCol40);
        formData.append('addtnlCstmrDataCol41', addtnlCstmrDataCol41);
        formData.append('addtnlCstmrDataCol42', addtnlCstmrDataCol42);
        formData.append('addtnlCstmrDataCol43', addtnlCstmrDataCol43);
        formData.append('addtnlCstmrDataCol44', addtnlCstmrDataCol44);
        formData.append('addtnlCstmrDataCol45', addtnlCstmrDataCol45);
        formData.append('addtnlCstmrDataCol46', addtnlCstmrDataCol46);
        formData.append('addtnlCstmrDataCol47', addtnlCstmrDataCol47);
        formData.append('addtnlCstmrDataCol48', addtnlCstmrDataCol48);
        formData.append('addtnlCstmrDataCol49', addtnlCstmrDataCol49);
        formData.append('addtnlCstmrDataCol50', addtnlCstmrDataCol50);
        formData.append('myFormPage',myFormPage);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
//                BootstrapDialog.show({
//                    size: BootstrapDialog.SIZE_SMALL,
//                    type: BootstrapDialog.TYPE_DEFAULT,
//                    title: 'Rhomicom Message',
//                    message: data,
//                    animate: true,
//                    onshow: function (dialog) {
//                    },  buttons: [{
//                            label: 'OK',
//                            cssClass: 'btn-primary',
//                            action: function (dialogItself) {
//                                dialogItself.close();
//                            }
//                        }]
//                });
                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PERSON ID AND CUST ID

                    if (shdSbmt <= 0) {
                        $("#custID").val(obj.custID);
                        $("#profileID").val(obj.profileID);
                        $("#idNo").val(obj.localIdNo);
                        msg = "Customer Data Successfully Saved!";
                    } else {
                        msg = "Change Request submitted successfully for AUTHORIZATION";
                    }
                    //alert(obj.custID + " " + subPgNo);

                    if(myFormPage == 2){                       
                        box.modal('hide');
                        openATab('#prfBCOPAddPrsnDataEDT', 'grp=17&typ=1&pg=11&subPgNo=1.6&vtyp=1&vtypActn=EDIT&custID='+obj.custID+'&formType=Personal Customer&rvsnTtlAPD='+rvsnTtl);                         
                        bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                            }
                        });
                    } else {
                        getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Customer Profile', 11, subPgNo, 0, 'EDIT', obj.custID, '', 'indCustTableRow1', -1, function () {

                            box.modal('hide');
                            bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: msg,
                                callback: function () { /* your callback code */
                                }
                            });
                        });
                    }
                } else {

                    msg = data;
                    box.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }


            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function updateIndCustListData() {

    if ($("#addOrEditForm").val() === 'Add') {
        getCustData('', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.1', 'mcfIndCstmr');
    } else {
        var localID = $("#idNo").val();
        var fullName = $("#surName").val() + ", " + $("#firstName").val() + " " + $.trim($("#otherNames").val()) + " (" + $("#title").val() + ")"
        var lnkdFirmName = $("#lnkdFirmName").val();
        var email = $("#email").val();
        //var contactNos = $("#telNo").val() + ", " + $("#mobileNo").val();
        var status = $("#status").val();
        var bnkBranch = $("#bnkBranch").val();
        var rowID = $('#tblRowID').val();
        var cnta = 1;
        $("#" + rowID).find('td').each(function () {

            switch (cnta) {
                case 5:
                    $(this).html(localID);
                    break;
                case 6:
                    $(this).html(fullName);
                    break;
                case 7:
                    $(this).html(lnkdFirmName);
                    break;
                case 8:
                    $(this).html(email);
                    break;
                case 9:
                    $(this).html(bnkBranch);
                    break;
                case 10:
                    $(this).html(status);
                    break;
            }

            cnta = cnta + 1;
        });
    }
}

function getCustData(actionText, slctr, linkArgs, fieldsPrfx)
{
    var srchFor;
    var srchIn;
    var dflt1;
    if (typeof fieldsPrfx === 'undefined' || fieldsPrfx === null)
    {
        fieldsPrfx = 'dataAdmin';
    }
    if ($("#addOrEditForm").val() === 'Add') {
        $("#" + fieldsPrfx + "SrchFor").val($("#idNo").val());
        var srchFor = $("#" + fieldsPrfx + "SrchFor").val();
        $("#" + fieldsPrfx + "SrchIn").val("ID");
        var srchIn = $("#" + fieldsPrfx + "SrchIn").val();
    } else {
        srchFor = typeof $("#" + fieldsPrfx + "SrchFor").val() === 'undefined' ? '%' : $("#" + fieldsPrfx + "SrchFor").val();
        srchIn = typeof $("#" + fieldsPrfx + "SrchIn").val() === 'undefined' ? 'Both' : $("#" + fieldsPrfx + "SrchIn").val();
    }

    var pageNo = typeof $("#" + fieldsPrfx + "PageNo").val() === 'undefined' ? 1 : $("#" + fieldsPrfx + "PageNo").val();
    var limitSze = typeof $("#" + fieldsPrfx + "DsplySze").val() === 'undefined' ? 10 : $("#" + fieldsPrfx + "DsplySze").val();
    var sortBy = typeof $("#" + fieldsPrfx + "SortBy").val() === 'undefined' ? '' : $("#" + fieldsPrfx + "SortBy").val();
    var otherPrsnType = typeof $("#" + fieldsPrfx + "OtherPrsnType").val() === 'undefined' ? 'All' : $("#" + fieldsPrfx + "OtherPrsnType").val();
    var trnsType = typeof $("#trnsType").val() === 'undefined' ? '' : $("#trnsType").val();
    var isEnabled = $('#' + fieldsPrfx + 'IsEnabled:checked').length > 0;
    var branchSrchIn = typeof $('#' + fieldsPrfx + "BranchSrchIn").val() === 'undefined' ? 'All Branches' : $('#' + fieldsPrfx + "BranchSrchIn").val(); 
    var statusSrchIn = typeof $('#' + fieldsPrfx + "StatusSrchIn").val() === 'undefined' ? 'All Statuses' : $('#' + fieldsPrfx + "StatusSrchIn").val();    
    var prdtTypeSrchIn = typeof $('#' + fieldsPrfx + "PrdtTypeSrchIn").val() === 'undefined' ? 'Savings' : $('#' + fieldsPrfx + "PrdtTypeSrchIn").val();
    var crdtTypeSrchIn = typeof $('#' + fieldsPrfx + "CrdtTypeSrchIn").val() === 'undefined' ? 'All Credit Types' : $('#' + fieldsPrfx + "CrdtTypeSrchIn").val();
    var rqstStatusSrchIn = typeof $('#' + fieldsPrfx + "RqstStatusSrchIn").val() === 'undefined' ? 'All Statuses' : $('#' + fieldsPrfx + "RqstStatusSrchIn").val(); 
    var bnkPrdtTypeSrchInID = typeof $('#' + fieldsPrfx + "BnkPrdtTypeSrchInID").val() === 'undefined' ? -1 : $('#' + fieldsPrfx + "BnkPrdtTypeSrchInID").val(); 
    
   
    var qStrtDte = typeof $('#' + fieldsPrfx + "StrtDate").val() === 'undefined' ? '' :  $('#' + fieldsPrfx + "StrtDate").val();
    var qEndDte = typeof $('#' + fieldsPrfx + "EndDate").val() === 'undefined' ? '' :  $('#' + fieldsPrfx + "EndDate").val();

    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy + "&prsnType=" + otherPrsnType + "&trnsType=" + trnsType + 
                "&isEnabled=" + isEnabled + "&branchSrchIn=" + branchSrchIn + "&statusSrchIn=" + statusSrchIn + "&prdtTypeSrchIn=" + prdtTypeSrchIn + "&crdtTypeSrchIn="+crdtTypeSrchIn
        +"&qStrtDte="+qStrtDte + "&qEndDte="+qEndDte + "&rqstStatusSrchIn="+rqstStatusSrchIn + "&bnkPrdtTypeSrchInID="+bnkPrdtTypeSrchInID;
    $body = $('body');
    //$body.addClass("mdlloadingDiag");
    //$body.addClass("mdlloading");
    openATab(slctr, linkArgs);
    //$body.removeClass("mdlloadingDiag");
    //$body.removeClass("mdlloading");
}

function enterKeyFuncCust(e, actionText, slctr, linkArgs, fieldsPrfx)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getCustData(actionText, slctr, linkArgs, fieldsPrfx);
    }
}

function validateCustomerForm(title, firstName, surName, gender, maritalStatus, dob, nationality, mobileNo, telNo, residentialAddress,
        prsnType, startDate) {
    if (title === "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#title").css('border-color', 'red');
        $("#title").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a <b>Title</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (firstName.trim() == "" || firstName == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#firstName").css('border-color', 'red');
        $("#firstName").css('border-width', '2px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter <b>First Name</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (surName.trim() == "" || surName == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#surName").css('border-color', 'red');
        $("#surName").css('border-width', '2px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter <b>Surname</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (gender === "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#gender").css('border-color', 'red');
        $("#gender").css('border-width', '2px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select <b>Gender</b>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (maritalStatus == "" || maritalStatus == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#maritalStatus").css('border-color', 'red');
        $("#maritalStatus").css('border-width', '2px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select <b>Marital Status</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (dob == "" || dob == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#dob").css('border-color', 'red');
        $("#dob").css('border-width', '2px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please choose <b>Date of Birth</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (nationality == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#nationality").css('border-color', 'red');
        $("#nationality").css('border-width', '2px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select <b>Nationality</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if ((mobileNo.trim() == "" || mobileNo == "undefined") && (telNo.trim() == "" || telNo == "undefined")) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#mobileNo").css('border-color', 'red');
        $("#mobileNo").css('border-width', '2px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter at lease one <b>Contact Number</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (residentialAddress.trim() == "" || residentialAddress == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#residentialAddress").css('border-color', 'red');
        $("#residentialAddress").css('border-width', '2px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide a <b>Residential address</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prsnType == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#relation").css('border-color', 'red');
        $("#relation").css('border-width', '2px');
        $("#residentialAddress").css('border-color', '#ccc');
        $("#residentialAddress").css('border-width', '1px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a <b>Person Type</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (startDate == "" || startDate == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#startDate").css('border-color', 'red');
        $("#startDate").css('border-width', '2px');
        $("#relation").css('border-color', '#ccc');
        $("#relation").css('border-width', '1px');
        $("#residentialAddress").css('border-color', '#ccc');
        $("#residentialAddress").css('border-width', '1px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select the <b>Effective Start Date</b> of this Customer setup!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        $("#startDate").css('border-color', '#ccc');
        $("#startDate").css('border-width', '1px');
        $("#prsnType").css('border-color', '#ccc');
        $("#prsnType").css('border-width', '1px');
        $("#residentialAddress").css('border-color', '#ccc');
        $("#residentialAddress").css('border-width', '1px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        return true;
    }
}

function saveBasicDataOP(pgNo, subPgNo, vtyp, shdSbmt)
{
    var box;
    var box2;
    var pActiveTab = $('.nav-tabs .active').text();
    //alert(pActiveTab);
    var myFormPage = 1;

    //if(pActiveTab == "All Apps/Modules  13Additional Data"){
    if(pActiveTab.indexOf('Additional Data') >= 0) {
        myFormPage = 2;
    }       
    
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        //$body.addClass("mdlloadingDiag");
        

        //alert($("ul#opTabs li.active"));
        var $tab = $('#OPtabContent'), $active = $tab.find('.tab-pane.active');
        //$active = $("ul#opTabs li.active");
        //var $this = $("#prflBCOPAddPrsnDataEDTtab");
        //$active.tab('show');

        var obj;
        var bnkCustomerID = typeof $("#bnkCustomerID").val() === 'undefined' ? -1 : $("#bnkCustomerID").val();
        var personID = typeof $("#personID").val() === 'undefined' ? -1 : $("#personID").val();
        var idNo = typeof $("#idNo").val() === 'undefined' ? '' : $("#idNo").val();
        var title = typeof $("#title").val() === 'undefined' ? '' : $("#title").val();
        var firstName = typeof $("#firstName").val() === 'undefined' ? '' : $("#firstName").val();
        var surName = typeof $("#surName").val() === 'undefined' ? '' : $("#surName").val();
        var otherNames = typeof $("#otherNames").val() === 'undefined' ? '' : $("#otherNames").val();
        var gender = typeof $("#gender").val() === 'undefined' ? '' : $("#gender").val();
        var maritalStatus = typeof $("#maritalStatus").val() === 'undefined' ? '' : $("#maritalStatus").val();
        var dob = typeof $("#dob").val() === 'undefined' ? '' : $("#dob").val();
        var pob = typeof $("#pob").val() === 'undefined' ? '' : $("#pob").val();
        var nationality = typeof $("#nationality").val() === 'undefined' ? '' : $("#nationality").val();
        var homeTown = typeof $("#homeTown").val() === 'undefined' ? '' : $("#homeTown").val();
        var religion = typeof $("#religion").val() === 'undefined' ? '' : $("#religion").val();
        var lnkdFirmName = typeof $("#lnkdFirmName").val() === 'undefined' ? '' : $("#lnkdFirmName").val();
        var lnkdFirmLoc = typeof $("#lnkdFirmLoc").val() === 'undefined' ? '' : $("#lnkdFirmLoc").val();
        var email = typeof $("#email").val() === 'undefined' ? '' : $("#email").val();
        var telNo = typeof $("#telNo").val() === 'undefined' ? '' : $("#telNo").val();
        var mobileNo = typeof $("#mobileNo").val() === 'undefined' ? '' : $("#mobileNo").val();
        var faxNo = typeof $("#faxNo").val() === 'undefined' ? '' : $("#faxNo").val();
        var postalAddress = typeof $("#postalAddress").val() === 'undefined' ? '' : $("#postalAddress").val();
        var residentialAddress = typeof $("#residentialAddress").val() === 'undefined' ? '' : $("#residentialAddress").val();
        var isSignatory = typeof $("input[name='isSignatory']:checked").val() === 'undefined' ? '' : $("input[name='isSignatory']:checked").val();
        //var prsnType = typeof $("#relation").val() === 'undefined' ? '' : $("#relation").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
        var startDate = typeof $("#startDate").val() === 'undefined' ? '' : $("#startDate").val();
        var endDate = typeof $("#endDate").val() === 'undefined' ? '' : $("#endDate").val();
        var relationTypArray = $('#relationTyp option:selected').map(function () {
            return $(this).val(); ///text();
        }).get();
        var prsnType = relationTypArray;
        //VALIDATIONS
        var rslt = validateOtherPersonForm(title, firstName, surName, gender, maritalStatus, dob,
                nationality, mobileNo, telNo, residentialAddress, prsnType, startDate);
        if (!rslt) {
            return false;
        }
        
        if (shdSbmt > 0 && $('#nationalIDTblEDT > tbody > tr').length <= 0) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "<span style='color:red; font-weight:bold !important;'><i>Please provide at least One(1) National ID for Person</i></span>",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }        

        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var srcType = "Other Person";
        var addtnlCstmrDataCol1 = typeof $("#addtnlCstmrDataCol1").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol1").val();
        var addtnlCstmrDataCol2 = typeof $("#addtnlCstmrDataCol2").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol2").val();
        var addtnlCstmrDataCol3 = typeof $("#addtnlCstmrDataCol3").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol3").val();
        var addtnlCstmrDataCol4 = typeof $("#addtnlCstmrDataCol4").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol4").val();
        var addtnlCstmrDataCol5 = typeof $("#addtnlCstmrDataCol5").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol5").val();
        var addtnlCstmrDataCol6 = typeof $("#addtnlCstmrDataCol6").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol6").val();
        var addtnlCstmrDataCol7 = typeof $("#addtnlCstmrDataCol7").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol7").val();
        var addtnlCstmrDataCol8 = typeof $("#addtnlCstmrDataCol8").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol8").val();
        var addtnlCstmrDataCol9 = typeof $("#addtnlCstmrDataCol9").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol9").val();
        var addtnlCstmrDataCol10 = typeof $("#addtnlCstmrDataCol10").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol10").val();
        var addtnlCstmrDataCol11 = typeof $("#addtnlCstmrDataCol11").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol11").val();
        var addtnlCstmrDataCol12 = typeof $("#addtnlCstmrDataCol12").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol12").val();
        var addtnlCstmrDataCol13 = typeof $("#addtnlCstmrDataCol13").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol13").val();
        var addtnlCstmrDataCol14 = typeof $("#addtnlCstmrDataCol14").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol14").val();
        var addtnlCstmrDataCol15 = typeof $("#addtnlCstmrDataCol15").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol15").val();
        var addtnlCstmrDataCol16 = typeof $("#addtnlCstmrDataCol16").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol16").val();
        var addtnlCstmrDataCol17 = typeof $("#addtnlCstmrDataCol17").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol17").val();
        var addtnlCstmrDataCol18 = typeof $("#addtnlCstmrDataCol18").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol18").val();
        var addtnlCstmrDataCol19 = typeof $("#addtnlCstmrDataCol19").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol19").val();
        var addtnlCstmrDataCol20 = typeof $("#addtnlCstmrDataCol20").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol20").val();
        var addtnlCstmrDataCol21 = typeof $("#addtnlCstmrDataCol21").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol21").val();
        var addtnlCstmrDataCol22 = typeof $("#addtnlCstmrDataCol22").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol22").val();
        var addtnlCstmrDataCol23 = typeof $("#addtnlCstmrDataCol23").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol23").val();
        var addtnlCstmrDataCol24 = typeof $("#addtnlCstmrDataCol24").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol24").val();
        var addtnlCstmrDataCol25 = typeof $("#addtnlCstmrDataCol25").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol25").val();
        var addtnlCstmrDataCol26 = typeof $("#addtnlCstmrDataCol26").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol26").val();
        var addtnlCstmrDataCol27 = typeof $("#addtnlCstmrDataCol27").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol27").val();
        var addtnlCstmrDataCol28 = typeof $("#addtnlCstmrDataCol28").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol28").val();
        var addtnlCstmrDataCol29 = typeof $("#addtnlCstmrDataCol29").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol29").val();
        var addtnlCstmrDataCol30 = typeof $("#addtnlCstmrDataCol30").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol30").val();
        var addtnlCstmrDataCol31 = typeof $("#addtnlCstmrDataCol31").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol31").val();
        var addtnlCstmrDataCol32 = typeof $("#addtnlCstmrDataCol32").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol32").val();
        var addtnlCstmrDataCol33 = typeof $("#addtnlCstmrDataCol33").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol33").val();
        var addtnlCstmrDataCol34 = typeof $("#addtnlCstmrDataCol34").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol34").val();
        var addtnlCstmrDataCol35 = typeof $("#addtnlCstmrDataCol35").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol35").val();
        var addtnlCstmrDataCol36 = typeof $("#addtnlCstmrDataCol36").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol36").val();
        var addtnlCstmrDataCol37 = typeof $("#addtnlCstmrDataCol37").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol37").val();
        var addtnlCstmrDataCol38 = typeof $("#addtnlCstmrDataCol38").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol38").val();
        var addtnlCstmrDataCol39 = typeof $("#addtnlCstmrDataCol39").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol39").val();
        var addtnlCstmrDataCol40 = typeof $("#addtnlCstmrDataCol40").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol40").val();
        var addtnlCstmrDataCol41 = typeof $("#addtnlCstmrDataCol41").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol41").val();
        var addtnlCstmrDataCol42 = typeof $("#addtnlCstmrDataCol42").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol42").val();
        var addtnlCstmrDataCol43 = typeof $("#addtnlCstmrDataCol43").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol43").val();
        var addtnlCstmrDataCol44 = typeof $("#addtnlCstmrDataCol44").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol44").val();
        var addtnlCstmrDataCol45 = typeof $("#addtnlCstmrDataCol45").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol45").val();
        var addtnlCstmrDataCol46 = typeof $("#addtnlCstmrDataCol46").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol46").val();
        var addtnlCstmrDataCol47 = typeof $("#addtnlCstmrDataCol47").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol47").val();
        var addtnlCstmrDataCol48 = typeof $("#addtnlCstmrDataCol48").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol48").val();
        var addtnlCstmrDataCol49 = typeof $("#addtnlCstmrDataCol49").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol49").val();
        var addtnlCstmrDataCol50 = typeof $("#addtnlCstmrDataCol50").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol50").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        var formData = new FormData();
        formData.append('custPicture', $('#custPicture')[0].files[0]);
        formData.append('signPicture', $('#signPicture')[0].files[0]);
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('bnkCustomerID', bnkCustomerID);
        formData.append('personID', personID);
        formData.append('idNo', idNo);
        formData.append('title', title);
        formData.append('firstName', firstName);
        formData.append('surName', surName);
        formData.append('otherNames', otherNames);
        formData.append('gender', gender);
        formData.append('maritalStatus', maritalStatus);
        formData.append('dob', dob);
        formData.append('pob', pob);
        formData.append('nationality', nationality);
        formData.append('homeTown', homeTown);
        formData.append('religion', religion);
        formData.append('lnkdFirmName', lnkdFirmName);
        formData.append('lnkdFirmLoc', lnkdFirmLoc);
        formData.append('email', email);
        formData.append('telNo', telNo);
        formData.append('mobileNo', mobileNo);
        formData.append('faxNo', faxNo);
        formData.append('postalAddress', postalAddress);
        formData.append('residentialAddress', residentialAddress);
        formData.append('isSignatory', isSignatory);
        formData.append('prsnType', prsnType);
        formData.append('bnkBranchID', bnkBranchID);
        formData.append('startDate', startDate);
        formData.append('endDate', endDate);
        formData.append('srcType', srcType);
        formData.append('shdSbmt', shdSbmt);
        formData.append('addtnlCstmrDataCol1', addtnlCstmrDataCol1);
        formData.append('addtnlCstmrDataCol2', addtnlCstmrDataCol2);
        formData.append('addtnlCstmrDataCol3', addtnlCstmrDataCol3);
        formData.append('addtnlCstmrDataCol4', addtnlCstmrDataCol4);
        formData.append('addtnlCstmrDataCol5', addtnlCstmrDataCol5);
        formData.append('addtnlCstmrDataCol6', addtnlCstmrDataCol6);
        formData.append('addtnlCstmrDataCol7', addtnlCstmrDataCol7);
        formData.append('addtnlCstmrDataCol8', addtnlCstmrDataCol8);
        formData.append('addtnlCstmrDataCol9', addtnlCstmrDataCol9);
        formData.append('addtnlCstmrDataCol10', addtnlCstmrDataCol10);
        formData.append('addtnlCstmrDataCol11', addtnlCstmrDataCol11);
        formData.append('addtnlCstmrDataCol12', addtnlCstmrDataCol12);
        formData.append('addtnlCstmrDataCol13', addtnlCstmrDataCol13);
        formData.append('addtnlCstmrDataCol14', addtnlCstmrDataCol14);
        formData.append('addtnlCstmrDataCol15', addtnlCstmrDataCol15);
        formData.append('addtnlCstmrDataCol16', addtnlCstmrDataCol16);
        formData.append('addtnlCstmrDataCol17', addtnlCstmrDataCol17);
        formData.append('addtnlCstmrDataCol18', addtnlCstmrDataCol18);
        formData.append('addtnlCstmrDataCol19', addtnlCstmrDataCol19);
        formData.append('addtnlCstmrDataCol20', addtnlCstmrDataCol20);
        formData.append('addtnlCstmrDataCol21', addtnlCstmrDataCol21);
        formData.append('addtnlCstmrDataCol22', addtnlCstmrDataCol22);
        formData.append('addtnlCstmrDataCol23', addtnlCstmrDataCol23);
        formData.append('addtnlCstmrDataCol24', addtnlCstmrDataCol24);
        formData.append('addtnlCstmrDataCol25', addtnlCstmrDataCol25);
        formData.append('addtnlCstmrDataCol26', addtnlCstmrDataCol26);
        formData.append('addtnlCstmrDataCol27', addtnlCstmrDataCol27);
        formData.append('addtnlCstmrDataCol28', addtnlCstmrDataCol28);
        formData.append('addtnlCstmrDataCol29', addtnlCstmrDataCol29);
        formData.append('addtnlCstmrDataCol30', addtnlCstmrDataCol30);
        formData.append('addtnlCstmrDataCol31', addtnlCstmrDataCol31);
        formData.append('addtnlCstmrDataCol32', addtnlCstmrDataCol32);
        formData.append('addtnlCstmrDataCol33', addtnlCstmrDataCol33);
        formData.append('addtnlCstmrDataCol34', addtnlCstmrDataCol34);
        formData.append('addtnlCstmrDataCol35', addtnlCstmrDataCol35);
        formData.append('addtnlCstmrDataCol36', addtnlCstmrDataCol36);
        formData.append('addtnlCstmrDataCol37', addtnlCstmrDataCol37);
        formData.append('addtnlCstmrDataCol38', addtnlCstmrDataCol38);
        formData.append('addtnlCstmrDataCol39', addtnlCstmrDataCol39);
        formData.append('addtnlCstmrDataCol40', addtnlCstmrDataCol40);
        formData.append('addtnlCstmrDataCol41', addtnlCstmrDataCol41);
        formData.append('addtnlCstmrDataCol42', addtnlCstmrDataCol42);
        formData.append('addtnlCstmrDataCol43', addtnlCstmrDataCol43);
        formData.append('addtnlCstmrDataCol44', addtnlCstmrDataCol44);
        formData.append('addtnlCstmrDataCol45', addtnlCstmrDataCol45);
        formData.append('addtnlCstmrDataCol46', addtnlCstmrDataCol46);
        formData.append('addtnlCstmrDataCol47', addtnlCstmrDataCol47);
        formData.append('addtnlCstmrDataCol48', addtnlCstmrDataCol48);
        formData.append('addtnlCstmrDataCol49', addtnlCstmrDataCol49);
        formData.append('addtnlCstmrDataCol50', addtnlCstmrDataCol50);
        formData.append('rvsnTtl',rvsnTtl);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PERSON ID

                    $("#idNo").val(obj.localIDNo);
                    $("#personID").val(obj.personID);
                    //SHOW EXTRA TABS
                    //$("#addPrsnData").css("display", "block");
                    //$("#custAttchmnt").css("display", "block");

                    msg = "Person Data Successfully Saved!";
                    
                    if(myFormPage == 2){                       
                        box.modal('hide');
                        openATab('#prfBCOPAddPrsnDataEDT', 'grp=17&typ=1&pg=11&subPgNo=1.6&vtyp=1&vtypActn=EDIT&custID='+obj.personID+'&formType=Other Person&rvsnTtlAPD='+rvsnTtl);                           
                        bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                            }
                        });
                    } else {                    
                        getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Person Profile', 11, subPgNo, 0, 'EDIT', obj.personID, '', 'indCustTableRow1', -1, function () {
                             //$active.tab('show');
                            box.modal('hide');
                            bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: msg,
                                callback: function () { /* your callback code */
                                }
                            });
                        });
                    }
                } else {

                    msg = data;
                    box.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }
            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function validateOtherPersonForm(title, firstName, surName, gender, maritalStatus, dob, nationality, mobileNo, telNo, residentialAddress,
        prsnType, startDate) {
    if (title === "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#title").css('border-color', 'red');
        $("#title").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a <b>Title</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (firstName.trim() == "" || firstName == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#firstName").css('border-color', 'red');
        $("#firstName").css('border-width', '2px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter <b>First Name</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (surName.trim() == "" || surName == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#surName").css('border-color', 'red');
        $("#surName").css('border-width', '2px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter <b>Surname</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (gender === "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#gender").css('border-color', 'red');
        $("#gender").css('border-width', '2px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select <b>Gender</b>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (maritalStatus == "" || maritalStatus == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#maritalStatus").css('border-color', 'red');
        $("#maritalStatus").css('border-width', '2px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select <b>Marital Status</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (dob == "" || dob == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#dob").css('border-color', 'red');
        $("#dob").css('border-width', '2px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please choose <b>Date of Birth</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (nationality == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#nationality").css('border-color', 'red');
        $("#nationality").css('border-width', '2px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select <b>Nationality</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if ((mobileNo.trim() == "" || mobileNo == "undefined") && (telNo.trim() == "" || telNo == "undefined")) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#mobileNo").css('border-color', 'red');
        $("#mobileNo").css('border-width', '2px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter at lease one <b>Contact Number</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (residentialAddress.trim() == "" || residentialAddress == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#residentialAddress").css('border-color', 'red');
        $("#residentialAddress").css('border-width', '2px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide a <b>Residential address</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prsnType == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#relation").css('border-color', 'red');
        $("#relation").css('border-width', '2px');
        $("#residentialAddress").css('border-color', '#ccc');
        $("#residentialAddress").css('border-width', '1px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a <b>Person Type</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (startDate == "" || startDate == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#startDate").css('border-color', 'red');
        $("#startDate").css('border-width', '2px');
        $("#relation").css('border-color', '#ccc');
        $("#relation").css('border-width', '1px');
        $("#residentialAddress").css('border-color', '#ccc');
        $("#residentialAddress").css('border-width', '1px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select the <b>Effective Start Date</b> of this Customer setup!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        $("#startDate").css('border-color', '#ccc');
        $("#startDate").css('border-width', '1px');
        $("#prsnType").css('border-color', '#ccc');
        $("#prsnType").css('border-width', '1px');
        $("#residentialAddress").css('border-color', '#ccc');
        $("#residentialAddress").css('border-width', '1px');
        $("#mobileNo").css('border-color', '#ccc');
        $("#mobileNo").css('border-width', '1px');
        $("#nationality").css('border-color', '#ccc');
        $("#nationality").css('border-width', '1px');
        $("#dob").css('border-color', '#ccc');
        $("#dob").css('border-width', '1px');
        $("#maritalStatus").css('border-color', '#ccc');
        $("#maritalStatus").css('border-width', '1px');
        $("#gender").css('border-color', '#ccc');
        $("#gender").css('border-width', '1px');
        $("#surName").css('border-color', '#ccc');
        $("#surName").css('border-width', '1px');
        $("#firstName").css('border-color', '#ccc');
        $("#firstName").css('border-width', '1px');
        $("#title").css('border-color', '#ccc');
        $("#title").css('border-width', '1px');
        return true;
    }
}

function onClickLinkedCustName() {
    var bnkCustomerID = typeof $("#bnkCustomerID").val() === 'undefined' ? -1 : $("#bnkCustomerID").val();
    var personID = typeof $("#personID").val() === 'undefined' ? -1 : $("#personID").val();
    var status = typeof $("#status").val() === 'undefined' ? -1 : $("#status").val();
    getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'MCF All Individual Customers', 'gnrlOrgID', '', '', 'radio', true, '', 'bnkCustomerID', 'bnkCustomer', 'clear', 1, '', function () {
        saveLinkedCustomer(bnkCustomerID, personID, status);
    });
}

function saveLinkedCustomer(bnkCustomerID, personID, status)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to replace the current person's details with that of the selected linked Person?" +
                "</br>Please not that this action cannot be undone when completed!</br>The form will close when completed.",
        callback: function (result) {
            /* your callback code */
            if (result) {

                if (!(status == "Incomplete" || status == "Rejected" || status == "Withdrawn")) {
                    mnBox.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Sorry! Only Customers with Status <b>Incomplete</b>, <b>Rejected</b> or <b>Withdrawn</b> can be linked.",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Saving. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data + "Please requery the person to see changes!",
                            callback: function () {
                                getCustData('', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.4');
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=11&subPgNo=1.4&q=UPDATE&vtyp=0&PKeyID=" + personID + "&bnkCustomerID=" + bnkCustomerID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function deleteOtherPersonRcrd(acctLienId, acctID, lienStatus)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Lien?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                if (!(lienStatus == "Incomplete" || lienStatus == "Rejected" || lienStatus == "Withdrawn")) {
                    mnBox.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Sorry! Only Liens with Status <b>Incomplete</b>, <b>Rejected</b> or <b>Withdrawn</b> can be deleted.",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        $('table#acctLiensTblAdd tbody tr#acctLiensTblAddRow' + acctLienId).remove();
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=13&subPgNo=2.1&q=DELETE&vtyp=6&PKeyID=" + acctID + "&acctLienId=" + acctLienId);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function getCustomersForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, otherPrsnTyp, rowID, fromBioCapture, callBackFunc, noReload)
{
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }
    if (typeof noReload === 'undefined' || noReload === null)
    {
        noReload = 0;
    }
    var fieldsPrfx = "";
    if (subPgNo == 1.1) {
        fieldsPrfx = "mcfIndCstmr";
    } else if (subPgNo == 1.2) {
        fieldsPrfx = "mcfCorpCstmr";
    } else if (subPgNo == 1.3) {
        fieldsPrfx = "mcfGrpCstmr";
    } else if (subPgNo == 1.4) {
        fieldsPrfx = "mcfOthPCstmr";
    }
//alert(rowID);
    if (typeof fromBioCapture === 'undefined' || fromBioCapture === null) {
        fromBioCapture = -1;
    }
    $("#tblRowID").val(rowID);
    if (1 == 2) {
        if (!$.fn.DataTable.isDataTable('#indCustTable')) {
            var table1 = $('#indCustTable').DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "bFilter": false,
                "scrollX": false
            });
            $('#indCustTable tbody').on('click', 'tr', function () {
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                } else {
                    table1.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
            });
            $('#indCustTable tbody').on('mouseenter', 'tr', function () {
                if ($(this).hasClass('highlight')) {
                    $(this).removeClass('highlight');
                } else {
                    table1.$('tr.highlight').removeClass('highlight');
                    $(this).addClass('highlight');
                }
            });
        }
    }
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
            if (fromBioCapture <= 0) {
//$('#' + titleElementID).html(formTitle);// + "<span style='color:red;font-weight: bold;float:right;width:50%;'>Approved</span>");
            }
            $('#' + titleElementID).html(formTitle);
            $('#' + modalBodyID).html(xmlhttp.responseText);
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                if (noReload <= 0) {
                    getCustData('', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=' + subPgNo, fieldsPrfx);
                }
                $('#' + titleElementID).html('');
                $('#' + modalBodyID).html('');
                $(e.currentTarget).unbind();
            });
            /*$('.modal-content').resizable({
             //alsoResize: ".modal-dialog",
             minHeight: 600,
             minWidth: 300
             });*/
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).off('show.bs.modal');
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            if (fromBioCapture = 1) {
                $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            }
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + formElementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/
                $('#meetingDays').multiselect({
                    includeSelectAllOption: true,
                    enableFiltering: true,
                    buttonWidth: '335px'
                });
                $('#relationTyp').multiselect({
                    includeSelectAllOption: true,
                    enableFiltering: true,
                    buttonWidth: '205px'
                });
                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    if (pgNo == 11) {
        xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&custID=" + pKeyID + "&prsnType=" + otherPrsnTyp);
    } else if (pgNo == 12 || pgNo == 18) {
        xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&prdtID=" + pKeyID);
    } else if (pgNo == 14) {
        xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + pKeyID);
    }
}

function getOtherPersonsList(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo)
{
//alert("Hi");
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
            $('#' + titleElementID).html(formTitle);
            $('#' + modalBodyID).html(xmlhttp.responseText);
            /*$('.modal-content').resizable({
             //alsoResize: ".modal-dialog",
             minHeight: 600,
             minWidth: 300
             });*/
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            ;
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + formElementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/

                prepareCustEDT("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&custID=" + pKeyID,
                        $body, 'prflHomeEDTtab', xmlhttp.responseText);
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo);
}

function getIndCustNtnlIDForm(elementID, modalBodyID, titleElementID, formElementID, tRowElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID)
{
    var custPrsnID = -1;
    var errMsg = "Please Save Customer First";
    if (subPgNo == 1.1) {
        custPrsnID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
    } else if (subPgNo == 1.4) {
        custPrsnID = typeof $("#personID").val() === 'undefined' ? -1 : $("#personID").val();
        errMsg = "Please save Person First";
    }

    if (custPrsnID <= 0) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: errMsg,
            callback: function () {
            }
        });
        return false;
    }

    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
            $('#' + titleElementID).html(formTitle);
            $('#' + modalBodyID).html(xmlhttp.responseText);
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                $('#' + titleElementID).html('');
                $('#' + modalBodyID).html('');
                $(e.currentTarget).unbind();
            });
            /*$('.modal-content').resizable({
             //alsoResize: ".modal-dialog",
             minHeight: 600,
             minWidth: 300
             });*/
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            if (vtyp === 5 && vtypActn === 'EDIT')
            {
                /*Get various field element IDs and populate values*/
                var $tds = $('#' + tRowElementID).find('td');
                $('#ntnlIDCardsCountry').val($.trim($tds.eq(2).text()));
                $('#ntnlIDCardsIDTyp').val($.trim($tds.eq(3).text()));
                $('#ntnlIDCardsIDNo').val($.trim($tds.eq(4).text()));
                $('#ntnlIDCardsDateIssd').val($.trim($tds.eq(5).text()));
                $('#ntnlIDCardsExpDate').val($.trim($tds.eq(6).text()));
                $('#ntnlIDCardsOtherInfo').val($.trim($tds.eq(7).text()));
            }

            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            ;
            $body = $("body");
            $(document).ready(function () {
                $('#' + formElementID).submit(function (e) {
                    e.preventDefault();
                    return false;
                });
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&ntnlIDpKey=" + pKeyID);
}

function saveIndCustNtnlIDForm(elementID, ntnlIDpKey, subPgNo, vwtyp)
{
    var box;
    var box2;
    var custPrsnID = -1;
    var errMsg = "Please Save Customer First";
    var custOrPrsn = "";
    if (subPgNo == 1.1) {
        custOrPrsn = "Customer";
        custPrsnID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
    } else if (subPgNo == 1.4) {
        custOrPrsn = "Person";
        custPrsnID = typeof $("#personID").val() === 'undefined' ? -1 : $("#personID").val();
        errMsg = "Please save Person First";
    }

    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();

    if (custPrsnID <= 0) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: errMsg,
            callback: function () {
            }
        });
        return false;
    }

    var nicCountry = typeof $("#ntnlIDCardsCountry").val() === 'undefined' ? '' : $("#ntnlIDCardsCountry").val();
    var nicIDType = typeof $("#ntnlIDCardsIDTyp").val() === 'undefined' ? '' : $("#ntnlIDCardsIDTyp").val();
    var nicIDNo = typeof $("#ntnlIDCardsIDNo").val() === 'undefined' ? '' : $("#ntnlIDCardsIDNo").val();
    var nicDateIssd = typeof $("#ntnlIDCardsDateIssd").val() === 'undefined' ? '' : $("#ntnlIDCardsDateIssd").val();
    var nicExpDate = typeof $("#ntnlIDCardsExpDate").val() === 'undefined' ? '' : $("#ntnlIDCardsExpDate").val();
    var nicOtherInfo = typeof $("#ntnlIDCardsOtherInfo").val() === 'undefined' ? '' : $("#ntnlIDCardsOtherInfo").val();
    var ErrMsgHdr = "<span style='color:red; font-weigh:bold !important;'>Please provide the following:</br></span>";
    var ErrMsg = "";
    var cnta = 0;
    if (nicCountry == "undefined" || nicCountry == undefined || nicCountry == "Please Select...") {
        ErrMsg = ErrMsg + "Country</br>";
        cnta = cnta + 1;
    }

    if (nicIDType == "undefined" || nicIDType == undefined || nicIDType == "Please Select...") {
        ErrMsg = ErrMsg + "ID Type</br>";
        cnta = cnta + 1;
    }

    if (nicIDNo.trim() == "" || nicIDNo == "undefined") {
        ErrMsg = ErrMsg + "ID No.</br>";
        cnta = cnta + 1;
    }

    if (nicDateIssd == "") {
        ErrMsg = ErrMsg + "Date Issued</br>";
        cnta = cnta + 1;
    }

    if (nicExpDate == "") {
        ErrMsg = ErrMsg + "Expiry Date</br>";
        cnta = cnta + 1;
    }



    if (cnta > 0) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: ErrMsgHdr + ErrMsg,
            callback: function () {
            }
        });
        return false;
    }

    $body = $("body");
    $body.addClass("mdlloadingDiag");
    box = bootbox.dialog({size: "small",
        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
    box.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = w / 2; //(w - b) / 2;
            return h + "px";
        }
    });
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            var data = xmlhttp.responseText;
            var msg = "";
            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                var obj = $.parseJSON(data);
                msg = "National ID Saved Successfylly!";
                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit ' + custOrPrsn + ' Profile', 11, subPgNo, 0, 'EDIT', custPrsnID, '', 'indCustTableRow1', -1, function () {

                    $("#" + elementID).modal("hide");
                    box.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                });
            } else {

                msg = data;
                box.modal('hide');
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: msg,
                    callback: function () { /* your callback code */
                    }
                });
            }

//            $('#nationalIDTblEDT').append('<tr><td></td><td colspan="6">' + xmlhttp.responseText + '</td></tr>');
//            $body.removeClass("mdlloadingDiag");
//            $('#' + elementID).modal('hide');
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=11&q=UPDATE&vtyp=" + vwtyp + "&subPgNo=" + subPgNo + "&actyp=2" +
            "&ntnlIDCardsCountry=" + nicCountry +
            "&ntnlIDCardsIDTyp=" + nicIDType +
            "&ntnlIDCardsIDNo=" + nicIDNo +
            "&ntnlIDCardsDateIssd=" + nicDateIssd +
            "&ntnlIDCardsExpDate=" + nicExpDate +
            "&ntnlIDCardsOtherInfo=" + nicOtherInfo +
            "&ntnlIDpKey=" + ntnlIDpKey +
            "&custPrsnID=" + custPrsnID +
            "&rvsnTtl=" +  rvsnTtl);
}

function advancedAccountSearch() {
//set account title
    getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'MCF All Bank Acccounts(Advanced Search)', '', '', '', 'radio', true, '', 'acctNoFindAccId', 'acctNoFindRawTxt', 'clear', 1, '', function () {
        $('#acctNoFind').val($('#acctNoFindRawTxt').val().split(' [')[0]);
    });
    //getCustomersForm('myFormsModal1', 'myFormsModal1Body', 'myFormsModal1Title', 'Customer Profile', 11, custTypeID, 0, 'EDIT', custID, '', 'indCustTableRow1');
}


//CHEQUE REGISTER
function getChqBookRegisterForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, rowID)
{
//alert(rowID);

    $("#tblRowID").val(rowID);
    if (!$.fn.DataTable.isDataTable('#indCustTable')) {
        var table1 = $('#indCustTable').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#indCustTable tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table1.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
        $('#indCustTable tbody').on('mouseenter', 'tr', function () {
            if ($(this).hasClass('highlight')) {
                $(this).removeClass('highlight');
            } else {
                table1.$('tr.highlight').removeClass('highlight');
                $(this).addClass('highlight');
            }
        });
    }
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {

            $('#' + modalBodyID).html(xmlhttp.responseText);
            var p_statusTitle = "";
            if (vtypActn != "ADD") {
                p_statusTitle = $('#status').val();
            }
            $('#' + titleElementID).html(formTitle);
            //$('#' + titleElementID).html(formTitle + "<span style='color:red;font-weight: bold;float:right;width:50%;' id='statusTitle'>" + p_statusTitle + "</span>");
            /*$('.modal-content').resizable({
             //alsoResize: ".modal-dialog",
             minHeight: 600,
             minWidth: 300
             });*/
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + formElementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/

            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + pKeyID);
    //}
}

function getChqRegisterForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, rowID)
{
//alert(rowID);

    $("#tblRowID").val(rowID);
    if (!$.fn.DataTable.isDataTable('#indCustTable')) {
        var table1 = $('#indCustTable').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#indCustTable tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table1.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
        $('#indCustTable tbody').on('mouseenter', 'tr', function () {
            if ($(this).hasClass('highlight')) {
                $(this).removeClass('highlight');
            } else {
                table1.$('tr.highlight').removeClass('highlight');
                $(this).addClass('highlight');
            }
        });
    }
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
            $('#' + modalBodyID).html(xmlhttp.responseText);
            var p_statusTitle = "";
            if (vtypActn != "ADD") {
                p_statusTitle = $('#status').val();
            }
            $('#' + titleElementID).html(formTitle);
            //$('#' + titleElementID).html(formTitle + "<span style='color:red;font-weight: bold;float:right;width:50%;' id='statusTitle'>" + p_statusTitle + "</span>");
            /*$('.modal-content').resizable({
             //alsoResize: ".modal-dialog",
             minHeight: 600,
             minWidth: 300
             });*/
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + formElementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/

            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + pKeyID);
    //}
}

function autoCalcLastSerialNo() {
    var chqNoFirst = $("#chqNoFirst").val();
    var noOfPages = $("#noOfPages").val();
    if (noOfPages != "" && chqNoFirst != "") {
        $("#chqNoLast").val(Number(chqNoFirst) + Number(noOfPages) - 1);
    }
}

function onChangeOfChqType() {
    var chqTypeSltd = $("#chqType option:selected").val();
    $('#acctID').val(-1);
    $('#acctNo').val('');
    $('#acctTitle').val('');
    if (chqTypeSltd == "Personal Cheque" || chqTypeSltd == "Corporate Cheque" || chqTypeSltd == "Group Cheque"
            || chqTypeSltd == "Passbook" || chqTypeSltd == "Loan Application Form") {
        $('#acctTitleDiv').css('display', 'block');
        $('#acctNoDiv').css('display', 'block');
        $('.chqBkRvnDiv').css('display', 'block');
    } else if (chqTypeSltd == "Counter Cheque" || chqTypeSltd == "Banker's Draft" || chqTypeSltd == "Withdrawal Slip" || chqTypeSltd == "Deposit Slip") {
        $('#acctTitleDiv').css('display', 'none');
        $('#acctNoDiv').css('display', 'none');
        $('.chqBkRvnDiv').css('display', 'none');
    }
}

function onChqBkStatusChng() {
    var statusSltd = $("#status option:selected").val();
    if (statusSltd == "Issued") {
        $('#issueDateDiv').css('display', 'block');
    } else {//if (statusSltd == "Produced") {
        $('#issueDateDiv').css('display', 'none');
        //$('#issueDate').val('');
    }

}

function submitChqBookForm(elementID, rowID, optn)
{
    var chqBookId = typeof $("#chqBookId").val() === 'undefined' ? -1 : $("#chqBookId").val();
    var chqType = typeof $("#chqType").val() === 'undefined' ? '' : $("#chqType").val();
    var acctID = typeof $("#acctID").val() === 'undefined' ? -1 : $("#acctID").val();
    var noOfPages = typeof $("#noOfPages").val() === 'undefined' ? -1 : $("#noOfPages").val();
    var chqNoFirst = typeof $("#chqNoFirst").val() === 'undefined' ? -1 : $("#chqNoFirst").val();
    var chqNoLast = typeof $("#chqNoLast").val() === 'undefined' ? -1 : $("#chqNoLast").val();
    var issueDate = typeof $("#issueDate").val() === 'undefined' ? '' : $("#issueDate").val();
    var status = typeof $("#status").val() === 'undefined' ? '' : $("#status").val();
    var chqBkFee = typeof $("#chqBkFee").val() === 'undefined' ? 0.00 : $("#chqBkFee").val().trim().length === 0 ? 0.00 : $("#chqBkFee").val();        
    var chqBkFeeRvnueAcctID = typeof $("#chqBkFeeRvnueAcctID").val() === 'undefined' ? -1 : $("#chqBkFeeRvnueAcctID").val().trim().length === 0 ? -1 : $("#chqBkFeeRvnueAcctID").val();
    var rslt = validateChqBookForm(chqType, acctID, noOfPages, chqNoFirst, chqNoLast, status, issueDate, chqBkFee, chqBkFeeRvnueAcctID);
    if (!rslt) {
        return false;
    }

    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to process this request?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Processing... Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        var msg = "";
                        box.modal('hide');
                        if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                            obj = $.parseJSON(data);
                            //SET PRODUCT ID
                            $("#chqBookId").val(obj.chqBookId);
                            $("#chqBookNo").val(obj.chqBookNo);
                            $("#approvalStatus").val("Initiated");
                            $("#statusTitle").html("Initiated");
                            msg = "Cheque Book Successfully Processed!";
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: msg,
                                callback: function () {
                                    $("#" + elementID).modal('hide');
                                    getCustData('', '#allmodules', 'grp=17&typ=1&pg=3&subPgNo=3.4.1');
                                }
                            });
                        } else {

                            msg = data;
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: msg,
                                callback: function () {
                                    getCustData('', '#allmodules', 'grp=17&typ=1&pg=3&subPgNo=3.4.1');
                                }
                            });
                        }

                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=19&subPgNo=3.4.1&q=UPDATE&vtyp=0&chqBookId=" + chqBookId +
                        "&chqType=" + chqType +
                        "&acctID=" + acctID +
                        "&noOfPages=" + noOfPages +
                        "&chqNoFirst=" + chqNoFirst +
                        "&chqNoLast=" + chqNoLast +
                        "&issueDate=" + issueDate +
                        "&status=" + status + 
                        "&chqBkFee=" + chqBkFee +
                        "&chqBkFeeRvnueAcctID=" + chqBkFeeRvnueAcctID +
                        "&optn=" + optn);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function submitChqForm(elementID, rowID)
{
    var chqId = typeof $("#chqId").val() === 'undefined' ? -1 : $("#chqId").val();
    var chqNo = typeof $("#chqNo").val() === 'undefined' ? -1 : $("#chqNo").val();
    var comments = typeof $("#comments").val() === 'undefined' ? '' : $("#comments").val();
    var status = typeof $("#status").val() === 'undefined' ? '' : $("#status").val();
    var rslt = validateChqForm(status, comments);
    if (!rslt) {
        return false;
    }

    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to save and submit this change request form for approval?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Saving and Submitting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        var msg = "";
                        box.modal('hide');
                        if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                            obj = $.parseJSON(data);
                            //SET PRODUCT ID
                            $("#chqId").val(obj.chqId);
                            $("#approvalStatus").val("Initiated");
                            $("#statusTitle").html("Initiated");
                            msg = "Cheque Successfully saved and submitted for Approval!";
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: msg,
                                callback: function () {
                                    $("#" + elementID).modal('hide');
                                    getCustData('', '#allmodules', 'grp=17&typ=1&pg=3&subPgNo=3.4.2');
                                }
                            });
                        } else {

                            msg = data;
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: msg,
                                callback: function () {
                                    getCustData('', '#allmodules', 'grp=17&typ=1&pg=3&subPgNo=3.4.2');
                                }
                            });
                        }

                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=19&subPgNo=3.4.2&q=UPDATE&vtyp=0&chqId=" + chqId +
                        "&chqNo=" + chqNo +
                        "&comments=" + comments +
                        "&status=" + status);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function validateChqBookForm(chqType, acctID, noOfPages, chqNoFirst, chqNoLast, status, issueDate, chqBkFee, chqBkFeeRvnueAcctID) {
    if (chqType === "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#chqType").css('border-color', 'red');
        $("#chqType").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select the <b>Cheque Type</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if ((chqType == "Personal Cheque" || chqType == "Corporate Cheque" || chqType == "Group Cheque" || 
            chqType == "Passbook" || chqType == "Loan Application Form") && (acctID == "" || acctID == -1)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#acctNo").css('border-color', 'red');
        $("#acctNo").css('border-width', '2px');
        $("#chqType").css('border-color', '#ccc');
        $("#chqType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select the <b>Linked Account</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (noOfPages == "" || Number(noOfPages) <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#noOfPages").css('border-color', 'red');
        $("#noOfPages").css('border-width', '2px');
        $("#acctNo").css('border-color', '#ccc');
        $("#acctNo").css('border-width', '1px');
        $("#chqType").css('border-color', '#ccc');
        $("#chqType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter a positive <b>Number of Pages</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (chqNoFirst === "" || Number(chqNoFirst) <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#chqNoFirst").css('border-color', 'red');
        $("#chqNoFirst").css('border-width', '2px');
        $("#noOfPages").css('border-color', '#ccc');
        $("#noOfPages").css('border-width', '1px');
        $("#acctNo").css('border-color', '#ccc');
        $("#acctNo").css('border-width', '1px');
        $("#chqType").css('border-color', '#ccc');
        $("#chqType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter the <b>Serial No</b> of the first cheque in the book",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (chqNoLast === "" || Number(chqNoLast) <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#chqNoLast").css('border-color', 'red');
        $("#chqNoLast").css('border-width', '2px');
        $("#chqNoFirst").css('border-color', '#ccc');
        $("#chqNoFirst").css('border-width', '1px');
        $("#noOfPages").css('border-color', '#ccc');
        $("#noOfPages").css('border-width', '1px');
        $("#acctNo").css('border-color', '#ccc');
        $("#acctNo").css('border-width', '1px');
        $("#chqType").css('border-color', '#ccc');
        $("#chqType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter the <b>Serial No</b> of the last cheque in the book",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (Number(chqNoFirst) > Number(chqNoLast)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#chqNoLast").css('border-color', 'red');
        $("#chqNoLast").css('border-width', '2px');
        $("#chqNoFirst").css('border-color', '#ccc');
        $("#chqNoFirst").css('border-width', '1px');
        $("#noOfPages").css('border-color', '#ccc');
        $("#noOfPages").css('border-width', '1px');
        $("#acctNo").css('border-color', '#ccc');
        $("#acctNo").css('border-width', '1px');
        $("#chqType").css('border-color', '#ccc');
        $("#chqType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<b>Serial No</b> of the last cheque must be greater than the first",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (status == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#status").css('border-color', 'red');
        $("#status").css('border-width', '2px');
        $("#chqNoLast").css('border-color', '#ccc');
        $("#chqNoLast").css('border-width', '1px');
        $("#chqNoFirst").css('border-color', '#ccc');
        $("#chqNoFirst").css('border-width', '1px');
        $("#noOfPages").css('border-color', '#ccc');
        $("#noOfPages").css('border-width', '1px');
        $("#acctNo").css('border-color', '#ccc');
        $("#acctNo").css('border-width', '1px');
        $("#chqType").css('border-color', '#ccc');
        $("#chqType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a <b>Cheque Book Status</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (status == "Issued" && (issueDate == "" || issueDate == "undefined")) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#issueDate").css('border-color', 'red');
        $("#issueDate").css('border-width', '2px');
        $("#status").css('border-color', '#ccc');
        $("#status").css('border-width', '1px');
        $("#chqNoLast").css('border-color', '#ccc');
        $("#chqNoLast").css('border-width', '1px');
        $("#chqNoFirst").css('border-color', '#ccc');
        $("#chqNoFirst").css('border-width', '1px');
        $("#noOfPages").css('border-color', '#ccc');
        $("#noOfPages").css('border-width', '1px');
        $("#acctNo").css('border-color', '#ccc');
        $("#acctNo").css('border-width', '1px');
        $("#chqType").css('border-color', '#ccc');
        $("#chqType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter the <b>Date</b> the cheque book was issued to customer!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if ((chqType == "Personal Cheque" || chqType == "Corporate Cheque" || chqType == "Group Cheque" || 
            chqType == "Passbook" || chqType == "Loan Application Form") && (chqBkFeeRvnueAcctID == "" || chqBkFeeRvnueAcctID == -1)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#chqBkFeeRvnueAcct").css('border-color', 'red');
        $("#chqBkFeeRvnueAcct").css('border-width', '2px');
        $("#issueDate").css('border-color', '#ccc');
        $("#issueDate").css('border-width', '1px');
        $("#status").css('border-color', '#ccc');
        $("#status").css('border-width', '1px');
        $("#chqNoLast").css('border-color', '#ccc');
        $("#chqNoLast").css('border-width', '1px');
        $("#chqNoFirst").css('border-color', '#ccc');
        $("#chqNoFirst").css('border-width', '1px');
        $("#noOfPages").css('border-color', '#ccc');
        $("#noOfPages").css('border-width', '1px');
        $("#acctNo").css('border-color', '#ccc');
        $("#acctNo").css('border-width', '1px');
        $("#chqType").css('border-color', '#ccc');
        $("#chqType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select <b>Revenue Account</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#chqBkFeeRvnueAcct").css('border-color', '#ccc');
        $("#chqBkFeeRvnueAcct").css('border-width', '1px');
        $("#issueDate").css('border-color', '#ccc');
        $("#issueDate").css('border-width', '1px');
        $("#status").css('border-color', '#ccc');
        $("#status").css('border-width', '1px');
        $("#chqNoLast").css('border-color', '#ccc');
        $("#chqNoLast").css('border-width', '1px');
        $("#chqNoFirst").css('border-color', '#ccc');
        $("#chqNoFirst").css('border-width', '1px');
        $("#noOfPages").css('border-color', '#ccc');
        $("#noOfPages").css('border-width', '1px');
        $("#acctNo").css('border-color', '#ccc');
        $("#acctNo").css('border-width', '1px');
        $("#chqType").css('border-color', '#ccc');
        $("#chqType").css('border-width', '1px');
        return true;
    }
}

function validateChqForm(status, comments) {
    if (status == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#status").css('border-color', 'red');
        $("#status").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select the <b>Cheque Status</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (comments == "" || comments.trim() == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#comments").css('border-color', 'red');
        $("#comments").css('border-width', '2px');
        $("#status").css('border-color', '#ccc');
        $("#status").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter a reason <b>(Comments)</b> for the new status of the cheque!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#comments").css('border-color', '#ccc');
        $("#comments").css('border-width', '1px');
        $("#status").css('border-color', '#ccc');
        $("#status").css('border-width', '1px');
        return true;
    }
}

function deleteChqBook(chqBookId)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Cheque Book?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        getCustData('', '#allmodules', 'grp=17&typ=1&pg=3&subPgNo=3.4.1');
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=19&subPgNo=3.4.1&q=DELETE&chqBookId=" + chqBookId);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

//PRODUCTS
function newSvngsPrdtOpenATab(slctr, linkArgs) {
    //$("#myFormPage").val("2");
    //newSvngsPrdtOpenATab('#prfBPStndEvntsAcctEDT', 'grp=17&typ=1&pg=<?php echo $pgNo; ?>&subPgNo=<?php echo $subPgNo; ?>&vtyp=1&vtypActn=<?php echo $vwtypActn; ?>&prdtID=<?php echo $prdtID; ?>&rvsnTtlAPD=<?php echo $row[41]; ?>&prdtTypeSEA=<?php echo $row[5]; ?>');    
    openATab(slctr, linkArgs + "&prdtID=" + $("#prdtID").val() + "&prdtTypeSEA=" + $("#prdtType").val());
}

function saveProductMainData(pgNo, subPgNo, vtyp, shdSbmt)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var pActiveTab = $('.nav-tabs .active').text();
        var pActiveTabID = $(".nav-tabs .active").attr("id");
        //alert("pActiveTab= "+pActiveTab);
        var myFormPage = 1;
        //var $this = $("#cageTrnstab");
        //$this.tab('show');        
        
        //if(pActiveTab == "All Apps/Modules��14Standard Events Accounting"){
        if(pActiveTab.indexOf('Standard Events Accounting') >= 0) {
            myFormPage = 2;
        }
        var obj;
        var prdtID = typeof $("#prdtID").val() === 'undefined' ? -1 : $("#prdtID").val().trim().length === 0 ? -1 : $("#prdtID").val();
        var pdtCode = typeof $("#pdtCode").val() === 'undefined' ? '' : $("#pdtCode").val();
        var prdtName = typeof $("#prdtName").val() === 'undefined' ? '' : $("#prdtName").val();
        var prdtDesc = typeof $("#prdtDesc").val() === 'undefined' ? '' : $("#prdtDesc").val();
        var prdtCrncy = typeof $("#prdtCrncy").val() === 'undefined' ? '' : $("#prdtCrncy").val();
        var prdtType = typeof $("#prdtType").val() === 'undefined' ? '' : $("#prdtType").val();
        var chrgInterest = typeof $("input[name='chrgInterest']:checked").val() === 'undefined' ? '' : $("input[name='chrgInterest']:checked").val();
        var intRate = typeof $("#intRate").val() === 'undefined' ? 0.00 : $("#intRate").val().trim().length === 0 ? 0.00 : $("#intRate").val();
        var accrualFrqncy = typeof $("#accrualFrqncy").val() === 'object' ? '' : $("#accrualFrqncy").val();
        var pstnFrqncy = typeof $("#pstnFrqncy").val() === 'object' ? '' : $("#pstnFrqncy").val();
        var calcMethod = typeof $("#calcMethod").val() === 'object' ? '' : $("#calcMethod").val();
        var calcType = typeof $("#calcType").val() === 'object' ? '' : $("#calcType").val();
        var crdtnFrqncy = typeof $("#crdtnFrqncy").val() === 'object' ? '' : $("#crdtnFrqncy").val();
        var crdtnType = typeof $("#crdtnType").val() === 'object' ? '' : $("#crdtnType").val();
        
        var invstmntType = typeof $("#invstmntType").val() === 'object' ? '' : $("#invstmntType").val();
        var drtnNo = typeof $("#drtnNo").val() === 'undefined' ? 0 : $("#drtnNo").val().trim().length === 0 ? 0 : $("#drtnNo").val();
        var drtnType = typeof $("#drtnType").val() === 'object' ? '' : $("#drtnType").val();
        var intRate1 = typeof $("#intRate1").val() === 'undefined' ? 0.00 : $("#intRate1").val().trim().length === 0 ? 0.00 : $("#intRate1").val();
        var dscntRate = typeof $("#dscntRate").val() === 'undefined' ? 0.00 : $("#dscntRate").val().trim().length === 0 ? 0.00 : $("#dscntRate").val();
        var minAmount = typeof $("#minAmount").val() === 'undefined' ? 0.00 : $("#minAmount").val().trim().length === 0 ? 0.00 : $("#minAmount").val();
        var maxAmount = typeof $("#maxAmount").val() === 'undefined' ? 0.00 : $("#maxAmount").val().trim().length === 0 ? 0.00 : $("#maxAmount").val();
        
        var invstmntFeeFlat = typeof $("#invstmntFeeFlat").val() === 'undefined' ? 0.00 : $("#invstmntFeeFlat").val().trim().length === 0 ? 0.00 : $("#invstmntFeeFlat").val();
        var invstmntFeePrcnt = typeof $("#invstmntFeePrcnt").val() === 'undefined' ? 0.00 : $("#invstmntFeePrcnt").val().trim().length === 0 ? 0.00 : $("#invstmntFeePrcnt").val();
        var feeApplctnType = typeof $("#feeApplctnType").val() === 'object' ? '' : $("#feeApplctnType").val();
        
        var indCust = typeof $("input[name='indCust']:checked").val() === 'undefined' ? 'NO' : 'YES';
        var corpCust = typeof $("input[name='corpCust']:checked").val() === 'undefined' ? 'NO' : 'YES';
        var custGrp = typeof $("input[name='custGrp']:checked").val() === 'undefined' ? 'NO' : 'YES';
        var wtdwlLimitType = typeof $("input[name='wtdwlLimitType']:checked").val() === 'undefined' ? '' : $("input[name='wtdwlLimitType']:checked").val();
        var wtdwlLimitNo = typeof $("#wtdwlLimitNo").val() === 'undefined' ? 0 : $("#wtdwlLimitNo").val().trim().length === 0 ? 0 : $("#wtdwlLimitNo").val();
        var wtdwlLimitAmt = typeof $("#wtdwlLimitAmt").val() === 'undefined' ? 0 : $("#wtdwlLimitAmt").val().trim().length === 0 ? 0 : $("#wtdwlLimitAmt").val();
        var wtdwlPnltyFlat = typeof $("#wtdwlPnltyFlat").val() === 'undefined' ? 0.00 : $("#wtdwlPnltyFlat").val().trim().length === 0 ? 0.00 : $("#wtdwlPnltyFlat").val();
        var wtdwlPnltyPercent = typeof $("#wtdwlPnltyPercent").val() === 'undefined' ? 0 : $("#wtdwlPnltyPercent").val().trim().length === 0 ? 0 : $("#wtdwlPnltyPercent").val();
        var chrgCOT = typeof $("input[name='chrgCOT']:checked").val() === 'undefined' ? '' : $("input[name='chrgCOT']:checked").val();
        var cotFreeWtdwlNo = typeof $("#cotFreeWtdwlNo").val() === 'undefined' ? 0 : $("#cotFreeWtdwlNo").val().trim().length === 0 ? 0 : $("#cotFreeWtdwlNo").val();
        var depstOpnBal = typeof $("#depstOpnBal").val() === 'undefined' ? 0.00 : $("#depstOpnBal").val().trim().length === 0 ? 0.00 : $("#depstOpnBal").val();
        var accBalMin = typeof $("#accBalMin").val() === 'undefined' ? 0.00 : $("#accBalMin").val().trim().length === 0 ? 0.00 : $("#accBalMin").val();
        var ovdrftAllowed = typeof $("input[name='ovdrftAllowed']:checked").val() === 'undefined' ? '' : $("input[name='ovdrftAllowed']:checked").val();
        var useAsColtrl = typeof $("input[name='useAsColtrl']:checked").val() === 'undefined' ? '' : $("input[name='useAsColtrl']:checked").val();
        var entryFees = typeof $("#entryFees").val() === 'undefined' ? 0.00 : $("#entryFees").val().trim().length === 0 ? 0.00 : $("#entryFees").val();
        var closeFees = typeof $("#closeFees").val() === 'undefined' ? 0.00 : $("#closeFees").val().trim().length === 0 ? 0.00 : $("#closeFees").val();
        var reOpenFees = typeof $("#reOpenFees").val() === 'undefined' ? 0.00 : $("#reOpenFees").val().trim().length === 0 ? 0.00 : $("#reOpenFees").val();
        var minBalForInterest = typeof $("#minBalForInterest").val() === 'undefined' ? 0.00 : $("#minBalForInterest").val().trim().length === 0 ? 0.00 : $("#minBalForInterest").val();

        var svngsAccntnEvntId = typeof $("#svngsAccntnEvntId").val() === 'undefined' ? -1 : $("#svngsAccntnEvntId").val().trim().length === 0 ? -1 : $("#svngsAccntnEvntId").val();
        var cashDepositDbtAccID = typeof $("#cashDepositDbtAccID").val() === 'undefined' ? -1 : $("#cashDepositDbtAccID").val().trim().length === 0 ? -1 : $("#cashDepositDbtAccID").val();
        var cashDepositCrdtAccID = typeof $("#cashDepositCrdtAccID").val() === 'undefined' ? -1 : $("#cashDepositCrdtAccID").val().trim().length === 0 ? -1 : $("#cashDepositCrdtAccID").val();
        var chqDepositDbtAccID = typeof $("#chqDepositDbtAccID").val() === 'undefined' ? -1 : $("#chqDepositDbtAccID").val().trim().length === 0 ? -1 : $("#chqDepositDbtAccID").val();
        var chqDepositCrdtAccID = typeof $("#chqDepositCrdtAccID").val() === 'undefined' ? -1 : $("#chqDepositCrdtAccID").val().trim().length === 0 ? -1 : $("#chqDepositCrdtAccID").val();
        var cashWtdwlDbtAccID = typeof $("#cashWtdwlDbtAccID").val() === 'undefined' ? -1 : $("#cashWtdwlDbtAccID").val().trim().length === 0 ? -1 : $("#cashWtdwlDbtAccID").val();
        var cashWtdwlCrdtAccID = typeof $("#cashWtdwlCrdtAccID").val() === 'undefined' ? -1 : $("#cashWtdwlCrdtAccID").val().trim().length === 0 ? -1 : $("#cashWtdwlCrdtAccID").val();
        var entryFeesDbtAccID = typeof $("#entryFeesDbtAccID").val() === 'undefined' ? -1 : $("#entryFeesDbtAccID").val().trim().length === 0 ? -1 : $("#entryFeesDbtAccID").val();
        var entryFeesCrdtAccID = typeof $("#entryFeesCrdtAccID").val() === 'undefined' ? -1 : $("#entryFeesCrdtAccID").val().trim().length === 0 ? -1 : $("#entryFeesCrdtAccID").val();
        var closeFeesDbtAccID = typeof $("#closeFeesDbtAccID").val() === 'undefined' ? -1 : $("#closeFeesDbtAccID").val().trim().length === 0 ? -1 : $("#closeFeesDbtAccID").val();
        var closeFeesCrdtAccID = typeof $("#closeFeesCrdtAccID").val() === 'undefined' ? -1 : $("#closeFeesCrdtAccID").val().trim().length === 0 ? -1 : $("#closeFeesCrdtAccID").val();
        var reopenFeesDbtAccID = typeof $("#reopenFeesDbtAccID").val() === 'undefined' ? -1 : $("#reopenFeesDbtAccID").val().trim().length === 0 ? -1 : $("#reopenFeesDbtAccID").val();
        var reopenFeesCrdtAccID = typeof $("#reopenFeesCrdtAccID").val() === 'undefined' ? -1 : $("#reopenFeesCrdtAccID").val().trim().length === 0 ? -1 : $("#reopenFeesCrdtAccID").val();
        var wtdwlPnltyFlatDbtAccID = typeof $("#wtdwlPnltyFlatDbtAccID").val() === 'undefined' ? -1 : $("#wtdwlPnltyFlatDbtAccID").val().trim().length === 0 ? -1 : $("#wtdwlPnltyFlatDbtAccID").val();
        var wtdwlPnltyFlatCrdtAccID = typeof $("#wtdwlPnltyFlatCrdtAccID").val() === 'undefined' ? -1 : $("#wtdwlPnltyFlatCrdtAccID").val().trim().length === 0 ? -1 : $("#wtdwlPnltyFlatCrdtAccID").val();
        var wtdwlPnltyPrcntDbtAccID = typeof $("#wtdwlPnltyPrcntDbtAccID").val() === 'undefined' ? -1 : $("#wtdwlPnltyPrcntDbtAccID").val().trim().length === 0 ? -1 : $("#wtdwlPnltyPrcntDbtAccID").val();
        var wtdwlPnltyPrcntCrdtAccID = typeof $("#wtdwlPnltyPrcntCrdtAccID").val() === 'undefined' ? -1 : $("#wtdwlPnltyPrcntCrdtAccID").val().trim().length === 0 ? -1 : $("#wtdwlPnltyPrcntCrdtAccID").val();
        var cotFeeFlatDbtAccID = typeof $("#cotFeeFlatDbtAccID").val() === 'undefined' ? -1 : $("#cotFeeFlatDbtAccID").val().trim().length === 0 ? -1 : $("#cotFeeFlatDbtAccID").val();
        var cotFeeFlatCrdtAccID = typeof $("#cotFeeFlatCrdtAccID").val() === 'undefined' ? -1 : $("#cotFeeFlatCrdtAccID").val().trim().length === 0 ? -1 : $("#cotFeeFlatCrdtAccID").val();
        var invstmntFeeDbtAccID = typeof $("#invstmntFeeDbtAccID").val() === 'undefined' ? -1 : $("#invstmntFeeDbtAccID").val().trim().length === 0 ? -1 : $("#invstmntFeeDbtAccID").val();
        var invstmntFeeCrdtAccID = typeof $("#invstmntFeeCrdtAccID").val() === 'undefined' ? -1 : $("#invstmntFeeCrdtAccID").val().trim().length === 0 ? -1 : $("#invstmntFeeCrdtAccID").val();
        var interesPyblDbtAccID = typeof $("#interesPyblDbtAccID").val() === 'undefined' ? -1 : $("#interesPyblDbtAccID").val().trim().length === 0 ? -1 : $("#interesPyblDbtAccID").val();
        var interesPyblCrdtAccID = typeof $("#interesPyblCrdtAccID").val() === 'undefined' ? -1 : $("#interesPyblCrdtAccID").val().trim().length === 0 ? -1 : $("#interesPyblCrdtAccID").val();
        var interesExpenseDbtAccID = typeof $("#interesExpenseDbtAccID").val() === 'undefined' ? -1 : $("#interesExpenseDbtAccID").val().trim().length === 0 ? -1 : $("#interesExpenseDbtAccID").val();
        var interesExpenseCrdtAccID = typeof $("#interesExpenseCrdtAccID").val() === 'undefined' ? -1 : $("#interesExpenseCrdtAccID").val().trim().length === 0 ? -1 : $("#interesExpenseCrdtAccID").val();

        var rvsnTtl = typeof $("#rvsnTtl").val() === 'object' ? 0 : $("#rvsnTtl").val();
        
        var codeLnght = typeof $("#codeLnght").val() === 'undefined' ? 10 : $("#codeLnght").val();
        var isStaffAccountProduct = typeof $("#isStaffAccountProduct").val() === 'undefined' ? 'No' : $("#isStaffAccountProduct").val();
        
        var smsAlertFee = typeof $("#smsAlertFee").val() === 'undefined' ? 0.00 : $("#smsAlertFee").val().trim().length === 0 ? 0.00 : $("#smsAlertFee").val();        
        var smsAlertFeeRvnueAcctID = typeof $("#smsAlertFeeRvnueAcctID").val() === 'undefined' ? -1 : $("#smsAlertFeeRvnueAcctID").val().trim().length === 0 ? -1 : $("#smsAlertFeeRvnueAcctID").val();
        
        if(parseFloat(pdtCode.length) != parseFloat(codeLnght)){
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $("#codeLnght").css('border-color', 'red');
            $("#codeLnght").css('border-width', '2px');
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "<span style='color:red; font-weight:bold !important;'>Product Code Length must be "+codeLnght+"</span>",
                callback: function () { /* your callback code */
                }
            });
            return false;
        } else {
            $("#codeLnght").css('border-color', '#ccc');
            $("#codeLnght").css('border-width', '1px');        
        }        
        
        //var myFormPage = typeof $("#myFormPage").val() === 'object' ? 1 : $("#myFormPage").val();
        //alert(myFormPage);
        //VALIDATION
        if(shdSbmt == 1){           
//            var rslt = validateSvngsPrdtForm(pdtCode, prdtName, prdtCrncy, prdtType, chrgInterest, accrualFrqncy,
//                    calcMethod, crdtnFrqncy, crdtnType, chrgCOT, wtdwlLimitType, wtdwlLimitNo, wtdwlLimitAmt,
//                    invstmntType, drtnNo, intRate1, dscntRate, minAmount, maxAmount, cashDepositCrdtAccID, cashDepositCrdtAccID,
//                    chqDepositDbtAccID, chqDepositCrdtAccID, cashWtdwlDbtAccID, cashWtdwlCrdtAccID, entryFeesDbtAccID,
//                    entryFeesCrdtAccID, entryFeesCrdtAccID, closeFeesDbtAccID, closeFeesCrdtAccID, reopenFeesDbtAccID,
//                    reopenFeesCrdtAccID, wtdwlPnltyFlatDbtAccID, wtdwlPnltyFlatCrdtAccID, wtdwlPnltyPrcntDbtAccID);
//            if (!rslt) {
//                return false;
//            }                       
        }
        
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('prdtID', prdtID);
        formData.append('pdtCode', pdtCode);
        formData.append('prdtName', prdtName);
        formData.append('prdtDesc', prdtDesc);
        formData.append('prdtCrncy', prdtCrncy);
        formData.append('prdtType', prdtType);
        formData.append('chrgInterest', chrgInterest);
        formData.append('intRate', intRate);
        formData.append('accrualFrqncy', accrualFrqncy);
        formData.append('pstnFrqncy', pstnFrqncy);
        formData.append('calcMethod', calcMethod);
        formData.append('calcType', calcType);
        formData.append('indCust', indCust);
        formData.append('corpCust', corpCust);
        formData.append('custGrp', custGrp);
        formData.append('wtdwlLimitType', wtdwlLimitType);
        formData.append('wtdwlLimitNo', wtdwlLimitNo);
        formData.append('wtdwlLimitAmt', wtdwlLimitAmt);
        formData.append('wtdwlPnltyFlat', wtdwlPnltyFlat);
        formData.append('wtdwlPnltyPercent', wtdwlPnltyPercent);
        formData.append('chrgCOT', chrgCOT);
        formData.append('cotFreeWtdwlNo', cotFreeWtdwlNo);
        formData.append('depstOpnBal', depstOpnBal);
        formData.append('accBalMin', accBalMin);
        formData.append('ovdrftAllowed', ovdrftAllowed);
        formData.append('useAsColtrl', useAsColtrl);
        formData.append('entryFees', entryFees);
        formData.append('closeFees', closeFees);
        formData.append('reOpenFees', reOpenFees);
        formData.append('crdtnFrqncy', crdtnFrqncy);
        formData.append('crdtnType', crdtnType);
        
         formData.append('invstmntType', invstmntType);
         formData.append('drtnNo', drtnNo);
         formData.append('drtnType', drtnType);
         formData.append('intRate1', intRate1);
         formData.append('dscntRate', dscntRate);
         formData.append('minAmount', minAmount);
         formData.append('maxAmount', maxAmount);   
         formData.append('invstmntFeeFlat', invstmntFeeFlat);
         formData.append('invstmntFeePrcnt', invstmntFeePrcnt);
         formData.append('feeApplctnType', feeApplctnType);  
        
        formData.append('svngsAccntnEvntId', svngsAccntnEvntId);
        formData.append('cashDepositDbtAccID', cashDepositDbtAccID);
        formData.append('cashDepositCrdtAccID', cashDepositCrdtAccID);
        formData.append('chqDepositDbtAccID', chqDepositDbtAccID);
        formData.append('chqDepositCrdtAccID', chqDepositCrdtAccID);
        formData.append('cashWtdwlDbtAccID', cashWtdwlDbtAccID);
        formData.append('cashWtdwlCrdtAccID', cashWtdwlCrdtAccID);
        formData.append('entryFeesDbtAccID', entryFeesDbtAccID);
        formData.append('entryFeesCrdtAccID', entryFeesCrdtAccID);
        formData.append('closeFeesDbtAccID', closeFeesDbtAccID);
        formData.append('closeFeesCrdtAccID', closeFeesCrdtAccID);
        formData.append('reopenFeesDbtAccID', reopenFeesDbtAccID);
        formData.append('reopenFeesCrdtAccID', reopenFeesCrdtAccID);
        formData.append('wtdwlPnltyFlatDbtAccID', wtdwlPnltyFlatDbtAccID);
        formData.append('wtdwlPnltyFlatCrdtAccID', wtdwlPnltyFlatCrdtAccID);
        formData.append('wtdwlPnltyPrcntDbtAccID', wtdwlPnltyPrcntDbtAccID);
        formData.append('wtdwlPnltyPrcntCrdtAccID', wtdwlPnltyPrcntCrdtAccID);
        formData.append('cotFeeFlatDbtAccID', cotFeeFlatDbtAccID);
        formData.append('cotFeeFlatCrdtAccID', cotFeeFlatCrdtAccID);
        formData.append('invstmntFeeDbtAccID', invstmntFeeDbtAccID);
        formData.append('invstmntFeeCrdtAccID', invstmntFeeCrdtAccID);
        formData.append('interesPyblDbtAccID', interesPyblDbtAccID);
        formData.append('interesPyblCrdtAccID', interesPyblCrdtAccID);
        formData.append('interesExpenseDbtAccID', interesExpenseDbtAccID);
        formData.append('interesExpenseCrdtAccID', interesExpenseCrdtAccID);
        formData.append('shdSbmt',shdSbmt);
        formData.append('myFormPage',myFormPage);
        formData.append('rvsnTtl',rvsnTtl);
        formData.append('isStaffAccountProduct',isStaffAccountProduct);
        formData.append('minBalForInterest',minBalForInterest);
        formData.append('smsAlertFee',smsAlertFee);
        formData.append('smsAlertFeeRvnueAcctID',smsAlertFeeRvnueAcctID);
        
       if(shdSbmt === 1){//SUBMIT  
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.confirm({
                title: "Rhomicom Message",
                message: "Are you sure you want to submit this Product for Authorization? Note: This action cannot be undone",
                buttons: {
                    confirm: {
                        label: 'Yes',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: 'No',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {

                        $body = $("body");
                        $body.addClass("mdlloadingDiag");
                        $.ajax({
                            url: 'index.php',
                            type: 'POST',
                            data: formData,
                            async: true,
                            success: function (data) {
                                $body.removeClass("mdlloadingDiag");
                                $body.removeClass("mdlloading");
                                var msg = "";
                                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                    obj = $.parseJSON(data);
                                    prdtID = obj.prdtID;
                                    msg = "Product submitted successfully for AUTHORIZATION";
                                } else {
                                    msg = data;
                                }
                                
                                if(prdtID > 0){
                                    if(myFormPage == 2){
                                         newSvngsPrdtOpenATab('#prfBPStndEvntsAcctEDT', 'grp=17&typ=1&pg=12&subPgNo=7.1&vtyp=1&vtypActn=EDIT&prdtID='+prdtID+'&rvsnTtlAPD='+rvsnTtl);
                                         bootbox.alert({
                                            size: "small",
                                            title: "Rhomicom Message",
                                            message: msg,
                                            callback: function () { /* your callback code */
                                            }
                                        });
                                    } else  {
                                        getProductsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Savings and Investment Product', 12, 7.1,0,'EDIT', obj.prdtID,'','indCustTableRow1', -1, function(){
                                            bootbox.alert({
                                                size: "small",
                                                title: "Rhomicom Message",
                                                message: msg,
                                                callback: function () { /* your callback code */
                                                }
                                            });
                                        });
                                    }
                                } else {
                                   bootbox.alert({
                                            size: "small",
                                            title: "Rhomicom Message",
                                            message: msg,
                                            callback: function () { /* your callback code */
                                            }
                                        }); 
                                }

                            },
                            cache: false,
                            contentType: false,
                            processData: false
                        });
                    }
                }
            });  
        } else {  
            var obj;
            $.ajax({
                url: 'index.php',
                type: 'POST',
                data: formData,
                async: true,
                success: function (data) {
                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloading");
                    var msg = "";
                    if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                            replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                            replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                        obj = $.parseJSON(data);
                        //SET PRODUCT ID
                        prdtID =  obj.prdtID;

                        msg = "Savings Product Successfully Saved!";
                    } else {

                        msg = data;
                    }
                    
                    //obj =  JSON.parse(data); //$.parseJSON(data);//
                    if(parseFloat(prdtID) > 0){
                        if(myFormPage == 2){
                            newSvngsPrdtOpenATab('#prfBPStndEvntsAcctEDT', 'grp=17&typ=1&pg=12&subPgNo=7.1&vtyp=1&vtypActn=EDIT&prdtID='+prdtID+'&rvsnTtlAPD='+rvsnTtl);
                            bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: msg,
                                callback: function () { /* your callback code */
                                }
                            });
                        } else {
                            getProductsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Savings and Investment Product', 12, 7.1,0,'EDIT', prdtID,'','indCustTableRow1', -1, function(){
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            });
                        }
                    } else {
                        bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                            }
                        });                
                    }

                },
                cache: false,
                contentType: false,
                processData: false
            });
        }
    });
}


function getSvngsPrdtData(actionText, slctr, linkArgs)
{
    var srchFor;
    var srchIn;
    if ($("#addOrEditForm").val() === 'Add') {
        $("#dataAdminSrchFor").val($("#pdtCode").val());
        var srchFor = $("#dataAdminSrchFor").val();
        $("#dataAdminSrchIn").val("Product Code");
        var srchIn = $("#dataAdminSrchIn").val();
    } else {

        srchFor = typeof $("#dataAdminSrchFor").val() === 'undefined' ? '%' : $("#dataAdminSrchFor").val();
        srchIn = typeof $("#dataAdminSrchIn").val() === 'undefined' ? 'Both' : $("#dataAdminSrchIn").val();
    }

    var pageNo = typeof $("#dataAdminPageNo").val() === 'undefined' ? 1 : $("#dataAdminPageNo").val();
    var limitSze = typeof $("#dataAdminDsplySze").val() === 'undefined' ? 10 : $("#dataAdminDsplySze").val();
    var sortBy = typeof $("#dataAdminSortBy").val() === 'undefined' ? '' : $("#dataAdminSortBy").val();
    var otherPrsnType = typeof $("#dataAdminOtherPrsnType").val() === 'undefined' ? '' : $("#dataAdminOtherPrsnType").val();
    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy + "&prsnType=" + otherPrsnType;
    openATab(slctr, linkArgs);
}

function updateSvngsPrdtListData() {

    if ($("#addOrEditForm").val() === 'Add') {
        getSvngsPrdtData('', '#allmodules', 'grp=17&typ=1&pg=7&subPgNo=7.1');
    } else {
        var pdtCode = $("#pdtCode").val();
        var prdtName = $("#prdtName").val();
        var prdtDesc = $("#prdtDesc").val();
        var prdtCrncy = $("#prdtCrncy").val();
        var prdtType = $("#prdtType").val();
        var custTypes; // = $("#postalAddress").val() + ", " + $("#residentialAddress").val();

        var indCust = typeof $("input[name='indCust']:checked").val() === 'undefined' ? 'NO' : 'YES';
        var corpCust = typeof $("input[name='corpCust']:checked").val() === 'undefined' ? 'NO' : 'YES';
        var custGrp = typeof $("input[name='custGrp']:checked").val() === 'undefined' ? 'NO' : 'YES';
        if (indCust == 'YES' && corpCust == 'YES') {
            custTypes = 'Individual Customer, Corporate Customer';
        } else if (indCust == 'YES' && corpCust == 'YES' && custGrp == 'Yes') {
            custTypes = 'Individual Customer, Corporate Customer, Customer Group';
        } else if (indCust == 'YES' && corpCust == 'YES' && custGrp == 'NO') {
            custTypes = 'Individual Customer, Corporate Customer';
        } else if (indCust == 'YES' && corpCust == 'NO' && custGrp == 'NO') {
            custTypes = 'Individual Customer';
        } else if (indCust == 'YES' && corpCust == 'NO' && custGrp == 'YES') {
            custTypes = 'Individual Customer, Customer Group';
        } else if (indCust == 'NO' && corpCust == 'YES' && custGrp == 'Yes') {
            custTypes = 'Corporate Customer, Customer Group';
        } else if (indCust == 'NO' && corpCust == 'NO' && custGrp == 'Yes') {
            custTypes = 'Customer Group';
        } else if (indCust == 'NO' && corpCust == 'YES' && custGrp == 'NO') {
            custTypes = 'Corporate Customer';
        } else if (indCust == 'NO' && corpCust == 'NO' && custGrp == 'NO') {
            custTypes = '';
        }


        var rowID = $('#tblRowID').val();
        var cnta = 1;
        $("#" + rowID).find('td').each(function () {

            switch (cnta) {
                case 4:
                    $(this).html(pdtCode);
                    break;
                case 5:
                    $(this).html(prdtName);
                    break;
                case 6:
                    $(this).html(prdtDesc);
                    break;
                case 7:
                    $(this).html(prdtCrncy);
                    break;
                case 8:
                    $(this).html(prdtType);
                    break;
                case 9:
                    $(this).html(custTypes);
                    break;
            }

            cnta = cnta + 1;
        });
    }

}

function deleteSvngsPrdt(prdtID)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this product?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        getSvngsPrdtData('', '#allmodules', 'grp=17&typ=1&pg=7&subPgNo=7.1');
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=12&subPgNo=7.1&q=DELETE&prdtID=" + prdtID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

//SAVINGS WITHDRAWAL COMMISSION
function getSvngsWtdwlForm(elementID, modalBodyID, titleElementID, formElementID, tRowElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID)
{
//alert("Hi");
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
            $('#' + titleElementID).html(formTitle);
            $('#' + modalBodyID).html(xmlhttp.responseText);
            /*$('.modal-content').resizable({
             //alsoResize: ".modal-dialog",
             minHeight: 600,
             minWidth: 300
             });*/
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            if (vtyp === 5 && vtypActn === 'EDIT')
            {
                /*Get various field element IDs and populate values*/
                var $tds = $('#' + tRowElementID).find('td');
                $('#lowRange').val($.trim($tds.eq(3).text()));
                $('#highRange').val($.trim($tds.eq(4).text()));
                $('#amountFlat').val($.trim($tds.eq(5).text()));
                $('#amountPrcnt').val($.trim($tds.eq(6).text()));
                $('#remarks').val($.trim($tds.eq(7).text()));
                $('#tblRowElementID').val(tRowElementID);
            }

            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            ;
            $body = $("body");
            $(document).ready(function () {
                $('#' + formElementID).submit(function (e) {
                    e.preventDefault();
                    return false;
                });
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&rowID=" + pKeyID);
}

function saveSvngsWtdwlCmsnForm(elementID, rowID)
{
    var obj;
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var lowRange = typeof $("#lowRange").val() === 'undefined' ? 0 : $("#lowRange").val().trim().length === 0 ? 0 : $("#lowRange").val();
    var highRange = typeof $("#highRange").val() === 'undefined' ? 0 : $("#highRange").val().trim().length === 0 ? 0 : $("#highRange").val();
    var amountFlat = typeof $("#amountFlat").val() === 'undefined' ? 0 : $("#amountFlat").val().trim().length === 0 ? 0 : $("#amountFlat").val();
    var amountPrcnt = typeof $("#amountPrcnt").val() === 'undefined' ? 0 : $("#amountPrcnt").val().trim().length === 0 ? 0 : $("#amountPrcnt").val();
    var remarks = typeof $("#remarks").val() === 'undefined' ? '' : $("#remarks").val();
    var prdtID = typeof $("#prdtID").val() === 'undefined' ? -1 : $("#prdtID").val();
    var tRowElementID = typeof $("#tblRowElementID").val() === 'undefined' ? -1 : $("#tblRowElementID").val();
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? -1 : $("#rvsnTtl").val();
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            var msg = "";
            var data = xmlhttp.responseText;
            var rowValID = -1;
            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                obj = $.parseJSON(data);
                //SET ROW ID
                rowValID = obj.rowID;
            }
//alert(data);
//            if (rowID <= 0) {
//                $('#wtdwlCmsnTblAdd').append('<tr id="svngsWtdwlCmsnTblAddRow' + rowValID + '"><td>' +
//                        '<button type="button" class="btn btn-default btn-sm" onclick="getSvngsWtdwlForm(\'myLovModal\', \'myLovModalBody\', \'myLovModalTitle\', \'svngsWtdwlCmsnForm\', \'svngsWtdwlCmsnTblAddRow' + rowValID + '\', \'Edit Withdrawal Commission\', 12,7.1, 5, \'EDIT\',' + rowValID + ');" style="padding:2px !important;">' +
//                        '<img src="cmn_images/edit32.png" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
//                        '</button>' +
//                        '</td><td>New</td><td>' + lowRange +
//                        '</td><td>' + highRange + '</td><td>' + amountFlat + '</td><td>' + amountPrcnt + '</td><td>' + remarks +
//                        '</td><td style="display:none;">' + rowValID +
//                        '</td></tr>');
//            } else {
//
//                var $tds = $('#' + tRowElementID).find('td');
//                $.trim($tds.eq(2).text(lowRange));
//                $.trim($tds.eq(3).text(highRange));
//                $.trim($tds.eq(4).text(amountFlat));
//                $.trim($tds.eq(5).text(amountPrcnt));
//                $.trim($tds.eq(6).text(remarks));
//            }
            getProductsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Savings and Investment Product', 12, 7.1,0,'EDIT', prdtID,'','indCustTableRow1', -1, function(){
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: data,
                    callback: function () {
                    }
                });    
                $body.removeClass("mdlloadingDiag");
                $('#' + elementID).modal('hide');
            });            
            
            //$body.removeClass("mdlloadingDiag");
            //$('#' + elementID).modal('hide');
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=12&subPgNo=7.1&vtyp=5&q=UPDATE" +
            "&lowRange=" + lowRange +
            "&highRange=" + highRange +
            "&amountFlat=" + amountFlat +
            "&amountPrcnt=" + amountPrcnt +
            "&remarks=" + remarks +
            "&rowID=" + rowID +
            "&prdtID=" + prdtID+
            "&rvsnTtl=" + rvsnTtl);
}

//CUSTOMER ACCOUNTS
function createDisbmntPymntCustAccount()
{
    var pKeyID = 1; //typeof $("#acctTrnsId").val() === 'undefined' ? -1 : $("#acctTrnsId").val();
    var dialog = bootbox.confirm({
        title: 'Finalize Request?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">CREATE LOAN PAYMENT ACCOUNTS</span> for Bank Branches?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Create Loan Payment Account for Branches?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Finalizing Request...Please Wait...</p>',
                    callback: function () {
                        if (pKeyID > 0)
                        {
                            getSvngsPrdtData('', '#allmodules', 'grp=17&typ=1&pg=2&subPgNo=2.1');
                        }
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    q: 'LNPYACCT'
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            dialog1.find('.bootbox-body').html('<span style="color:red;">Nothing to Withdraw!</span>');
                        }, 500);
                    }
                });
            }
        }
    });
}

function getCustAcctsForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, listTableID, rowID, acctNo, callBackFunc)
{
    $('#allOtherInputData99').val(0);
    if (acctNo === "" || acctNo === "undefined") {
        acctNo = $("#acctNoFind").val();
    }
    
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }    
//alert("acctNo "+acctNo)
    accMandate = ["--Please Select--", "All to sign", "Anyone to sign", "Any two to sign", "Any three to sign", "Any four to sign",
        "Both to sign"];
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            $('#' + modalBodyID).html(xmlhttp.responseText);
            var p_statusTitle = $('#status').val();
            $('#' + titleElementID).html(formTitle); // + "<span style='color:red;font-weight: bold;float:right;width:50%;' id='statusTitle'>" + p_statusTitle + "</span>");
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                //if (noReload <= 0) {
                if(vtypActn !== "VIEW"){
                    getCustData('', '#allmodules', 'grp=17&typ=1&pg=2&subPgNo=2.1');
                }
                    //getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=' + subPgNo, fieldsPrfx);
                //}
                $('#' + titleElementID).html('');
                $('#' + modalBodyID).html('');
                $(e.currentTarget).unbind();
            });
            
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            if (!$.fn.DataTable.isDataTable('#' + listTableID)) {
                var table1 = $('#' + listTableID).DataTable({
                    "paging": false,
                    "ordering": false,
                    "info": false,
                    "bFilter": false,
                    "scrollX": false
                });
                $('#' + listTableID + ' tbody').on('click', 'tr', function () {
                    if ($(this).hasClass('selected')) {
                        $(this).removeClass('selected');
                    } else {
                        table1.$('tr.selected').removeClass('selected');
                        $(this).addClass('selected');
                    }
                });
                $('#' + listTableID + ' tbody').on('mouseenter', 'tr', function () {
                    if ($(this).hasClass('highlight')) {
                        $(this).removeClass('highlight');
                    } else {
                        table1.$('tr.highlight').removeClass('highlight');
                        $(this).addClass('highlight');
                    }
                });
            }
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + formElementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/
                $('#prpsOfAcct').multiselect({
                    includeSelectAllOption: true,
                    enableFiltering: true,
                    buttonWidth: '335px'
                });
                $('#acctTrnsTyp').multiselect({
                    includeSelectAllOption: true,
                    enableFiltering: true,
                    buttonWidth: '335px'
                });
                $('#srcOfFunds').multiselect({
                    includeSelectAllOption: true,
                    enableFiltering: true,
                    buttonWidth: '335px',
                    maxHeight: 250
                });
                $('#smsTriggers').multiselect({
                    includeSelectAllOption: true,
                    enableFiltering: true,
                    buttonWidth: '335px',
                    maxHeight: 250
                });
                if (vtypActn !== "VIEW") {
                    //$('#acctTitle').val($('#bnkCustomer').val()); //UNCOMMENT IF NECESSARY
                }
                if (pKeyID > 0) {
                    if (p_statusTitle == "Initiated") {

                        $("#withdrawCustAccountBtn").css("display", "inline-block");
                        $("#saveCustAccountBtn").css("display", "none");
                        $("#submitCustAccountBtn").css("display", "none");
                        $("#getSigntryBtn").css("display", "none");
                    } else if (p_statusTitle == "Incomplete" || p_statusTitle == "Rejected" || p_statusTitle == "Withdrawn"
                            || p_statusTitle == "Requires Reapproval") {

                        $("#withdrawCustAccountBtn").css("display", "none");
                        $("#saveCustAccountBtn").css("display", "inline-block");
                        $("#submitCustAccountBtn").css("display", "inline-block");
                        $("#getSigntryBtn").css("display", "block");
                    } else if (p_statusTitle == "Approved") {

                        $("#withdrawCustAccountBtn").css("display", "none");
                        $("#saveCustAccountBtn").css("display", "inline-block");
                        $("#submitCustAccountBtn").css("display", "none");
                        $("#getSigntryBtn").css("display", "block");
                    }
                }
                
                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + pKeyID + "&acctNo=" + acctNo);
}

function getCustAcctsForm_OLD(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, listTableID, rowID, acctNo, callBackFunc)
{
    $('#allOtherInputData99').val(0);
    if (acctNo === "" || acctNo === "undefined") {
        acctNo = $("#acctNoFind").val();
    }
    
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }    
//alert("acctNo "+acctNo)
    accMandate = ["--Please Select--", "All to sign", "Anyone to sign", "Any two to sign", "Any three to sign", "Any four to sign",
        "Both to sign"];
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            $('#' + modalBodyID).html(xmlhttp.responseText);
            var p_statusTitle = $('#status').val();
            $('#' + titleElementID).html(formTitle); // + "<span style='color:red;font-weight: bold;float:right;width:50%;' id='statusTitle'>" + p_statusTitle + "</span>");
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                //if (noReload <= 0) {
                if(vtypActn !== "VIEW"){
                    getCustData('', '#allmodules', 'grp=17&typ=1&pg=2&subPgNo=2.1');
                }
                    //getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=' + subPgNo, fieldsPrfx);
                //}
                $('#' + titleElementID).html('');
                $('#' + modalBodyID).html('');
                $(e.currentTarget).unbind();
            });
            
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            if (!$.fn.DataTable.isDataTable('#' + listTableID)) {
                var table1 = $('#' + listTableID).DataTable({
                    "paging": false,
                    "ordering": false,
                    "info": false,
                    "bFilter": false,
                    "scrollX": false
                });
                $('#' + listTableID + ' tbody').on('click', 'tr', function () {
                    if ($(this).hasClass('selected')) {
                        $(this).removeClass('selected');
                    } else {
                        table1.$('tr.selected').removeClass('selected');
                        $(this).addClass('selected');
                    }
                });
                $('#' + listTableID + ' tbody').on('mouseenter', 'tr', function () {
                    if ($(this).hasClass('highlight')) {
                        $(this).removeClass('highlight');
                    } else {
                        table1.$('tr.highlight').removeClass('highlight');
                        $(this).addClass('highlight');
                    }
                });
            }
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + formElementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/
                $('#prpsOfAcct').multiselect({
                    includeSelectAllOption: true,
                    enableFiltering: true,
                    buttonWidth: '335px'
                });
                $('#acctTrnsTyp').multiselect({
                    includeSelectAllOption: true,
                    enableFiltering: true,
                    buttonWidth: '335px'
                });
                $('#srcOfFunds').multiselect({
                    includeSelectAllOption: true,
                    enableFiltering: true,
                    buttonWidth: '335px',
                    maxHeight: 250
                });
                if (vtypActn !== "VIEW") {
                    //$('#acctTitle').val($('#bnkCustomer').val()); //UNCOMMENT IF NECESSARY
                }
                if (pKeyID > 0) {
                    if (p_statusTitle == "Initiated") {

                        $("#withdrawCustAccountBtn").css("display", "inline-block");
                        $("#saveCustAccountBtn").css("display", "none");
                        $("#submitCustAccountBtn").css("display", "none");
                        $("#getSigntryBtn").css("display", "none");
                    } else if (p_statusTitle == "Incomplete" || p_statusTitle == "Rejected" || p_statusTitle == "Withdrawn"
                            || p_statusTitle == "Requires Reapproval") {

                        $("#withdrawCustAccountBtn").css("display", "none");
                        $("#saveCustAccountBtn").css("display", "inline-block");
                        $("#submitCustAccountBtn").css("display", "inline-block");
                        $("#getSigntryBtn").css("display", "block");
                    } else if (p_statusTitle == "Approved") {

                        $("#withdrawCustAccountBtn").css("display", "none");
                        $("#saveCustAccountBtn").css("display", "inline-block");
                        $("#submitCustAccountBtn").css("display", "none");
                        $("#getSigntryBtn").css("display", "block");
                    }
                }
                
                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + pKeyID + "&acctNo=" + acctNo);
}

function updateCustAccountsListData1() {
    return true;
    if ($("#addOrEditForm").val() === 'Add') {
        getSvngsPrdtData('', '#allmodules', 'grp=17&typ=1&pg=2&subPgNo=2.1');
    } else {
        var pdtCode = $("#pdtCode").val();
        var prdtName = $("#prdtName").val();
        var prdtDesc = $("#prdtDesc").val();
        var prdtCrncy = $("#prdtCrncy").val();
        var prdtType = $("#prdtType").val();
        var custTypes; // = $("#postalAddress").val() + ", " + $("#residentialAddress").val();

        var indCust = typeof $("input[name='indCust']:checked").val() === 'undefined' ? 'NO' : 'YES';
        var corpCust = typeof $("input[name='corpCust']:checked").val() === 'undefined' ? 'NO' : 'YES';
        var custGrp = typeof $("input[name='custGrp']:checked").val() === 'undefined' ? 'NO' : 'YES';
        if (indCust == 'YES' && corpCust == 'YES') {
            custTypes = 'Individual Customer, Corporate Customer';
        } else if (indCust == 'YES' && corpCust == 'YES' && custGrp == 'Yes') {
            custTypes = 'Individual Customer, Corporate Customer, Customer Group';
        } else if (indCust == 'YES' && corpCust == 'YES' && custGrp == 'NO') {
            custTypes = 'Individual Customer, Corporate Customer';
        } else if (indCust == 'YES' && corpCust == 'NO' && custGrp == 'NO') {
            custTypes = 'Individual Customer';
        } else if (indCust == 'YES' && corpCust == 'NO' && custGrp == 'YES') {
            custTypes = 'Individual Customer, Customer Group';
        } else if (indCust == 'NO' && corpCust == 'YES' && custGrp == 'Yes') {
            custTypes = 'Corporate Customer, Customer Group';
        } else if (indCust == 'NO' && corpCust == 'NO' && custGrp == 'Yes') {
            custTypes = 'Customer Group';
        } else if (indCust == 'NO' && corpCust == 'YES' && custGrp == 'NO') {
            custTypes = 'Corporate Customer';
        } else if (indCust == 'NO' && corpCust == 'NO' && custGrp == 'NO') {
            custTypes = '';
        }


        var rowID = $('#tblRowID').val();
        var cnta = 1;
        $("#" + rowID).find('td').each(function () {

            switch (cnta) {
                case 4:
                    $(this).html(pdtCode);
                    break;
                case 5:
                    $(this).html(prdtName);
                    break;
                case 6:
                    $(this).html(prdtDesc);
                    break;
                case 7:
                    $(this).html(prdtCrncy);
                    break;
                case 8:
                    $(this).html(prdtType);
                    break;
                case 9:
                    $(this).html(custTypes);
                    break;
            }

            cnta = cnta + 1;
        });
    }

}

function onClickSvngsProduct(pgNo, subPgNo) {
//var custTypSltd = $("#custType option:selected").val();

    getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'Bank Product Types', '', 'acctType', '', 'radio', true, '', 'prdtTypeID', 'prdtType', 'clear', 1, '', function () {
        getSvngsPrdtDetsForAccnt(pgNo, subPgNo);
    });
}

function viewCustProfile() {
//set account title

    var custID = $('#bnkCustomerID').val();
    if (custID === 'undefined' || custID === '') {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Sorry! Please select a customer first!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        var custType = $('#custType').val();

        var custTypeID = 1.1; //Individual Customer
        if (custType == 'Corporate') {
            custTypeID = 1.2;
        } else if (custType == 'Group') {
            custTypeID = 1.3;
        } else if (custType == 'Joint-Individual') {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Sorry! No profile for Joint Indivual Customers",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }

	var applcntTyp = typeof $("#grpApplicantType").val() === 'undefined' ? 'N/A' : $("#grpApplicantType").val();
        
        if(applcntTyp == "Individual"){
            custTypeID = 1.1;
        }

        getCustomersForm('myFormsModalLgCA', 'myFormsModalBodyLgCA', 'myFormsModalTitleLgCA', 'Customer Profile', 11, custTypeID, 0, 'VIEW', custID, '', 'indCustTableRow1', -1, function () {
            var tstabcd = 1;
        }, 1);
    }
}

function deleteCustAccnt(acctID, acctStatus)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this account?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                if (!(acctStatus == "Incomplete" || acctStatus == "Rejected" || acctStatus == "Withdrawn")) {
                    mnBox.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Sorry! Only Accunts with Status <b>Incomplete</b>, <b>Rejected</b> or <b>Withdrawn</b> can be deleted.",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        getCustData('', '#allmodules', 'grp=17&typ=1&pg=2&subPgNo=2.1')
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=13&subPgNo=2.1&q=DELETE&vtyp=0&PKeyID=" + acctID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function validateCustAcctsForm(custType, bnkCustomerID, acctTitle, acctType, prdtTypeID, acctTrnsTyp,
        prsnTypeEntity, prpsOfAcct, prpsOfAcctOther, srcOfFunds, srcOfFundsOther, trnsPerMnthNo, amountPerMnth, bnkBranchID,
        reltnOfficerID, accMndte, groupID, groupNm) {
    if (custType === "--Please Select--") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#custType").css('border-color', 'red');
        $("#custType").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select the <b>Type</b> of customer!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (bnkCustomerID == "" || bnkCustomerID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#bnkCustomer").css('border-color', 'red');
        $("#bnkCustomer").css('border-width', '2px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a <b>Customer</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (acctTitle == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#acctTitle").css('border-color', 'red');
        $("#acctTitle").css('border-width', '2px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide an <b>Account Title</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (acctType === "--Please Select--") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#acctType").css('border-color', 'red');
        $("#acctType").css('border-width', '2px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select an <b>Account Type</b>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prdtTypeID == "" || prdtTypeID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#prdtType").css('border-color', 'red');
        $("#prdtType").css('border-width', '2px');
        $("#acctType").css('border-color', '#ccc');
        $("#acctType").css('border-width', '1px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a <b>Product</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (acctTrnsTyp == "" || acctTrnsTyp == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#acctTrnsTyp").css('border-color', 'red');
        $("#acctTrnsTyp").css('border-width', '2px');
        $("#acctTrnsTypLbl").css('color', 'red');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#acctType").css('border-color', '#ccc');
        $("#acctType").css('border-width', '1px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select at lease one <b>Transaction Type</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prsnTypeEntity == "" || prsnTypeEntity == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#prsnTypeEntity").css('border-color', 'red');
        $("#prsnTypeEntity").css('border-width', '2px');
        $("#acctTrnsTyp").css('border-color', '#ccc');
        $("#acctTrnsTyp").css('border-width', '1px');
        $("#acctTrnsTypLbl").css('color', '#333');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#acctType").css('border-color', '#ccc');
        $("#acctType").css('border-width', '1px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select <b>Person Type/Entity</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prpsOfAcct == "" || prpsOfAcct == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#prpsOfAcct").css('border-color', 'red');
        $("#prpsOfAcct").css('border-width', '2px');
        $("#prpsOfAcctLbl").css('color', 'red');
        $("#prsnTypeEntity").css('border-color', '#ccc');
        $("#prsnTypeEntity").css('border-width', '1px');
        $("#acctTrnsTyp").css('border-color', '#ccc');
        $("#acctTrnsTyp").css('border-width', '1px');
        $("#acctTrnsTypLbl").css('color', '#333');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#acctType").css('border-color', '#ccc');
        $("#acctType").css('border-width', '1px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select at least one <b>Purpose</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prpsOfAcct == "Other" && (prpsOfAcctOther.trim() == "")) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#prpsOfAcctOther").css('border-color', 'red');
        $("#prpsOfAcctOther").css('border-width', '2px');
        $("#prpsOfAcct").css('border-color', '#ccc');
        $("#prpsOfAcct").css('border-width', '1px');
        $("#prpsOfAcctLbl").css('color', '#333');
        $("#prsnTypeEntity").css('border-color', '#ccc');
        $("#prsnTypeEntity").css('border-width', '1px');
        $("#acctTrnsTyp").css('border-color', '#ccc');
        $("#acctTrnsTyp").css('border-width', '1px');
        $("#acctTrnsTypLbl").css('color', '#333');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#acctType").css('border-color', '#ccc');
        $("#acctType").css('border-width', '1px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide some purpose(s) other than the predefined list above!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (srcOfFunds == "" || srcOfFunds == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#srcOfFunds").css('border-color', 'red');
        $("#srcOfFunds").css('border-width', '2px');
        $("#srcOfFundsLbl").css('color', 'red');
        $("#prpsOfAcctOther").css('border-color', '#ccc');
        $("#prpsOfAcctOther").css('border-width', '1px');
        $("#prpsOfAcct").css('border-color', '#ccc');
        $("#prpsOfAcct").css('border-width', '1px');
        $("#prpsOfAcctLbl").css('color', '#333');
        $("#prsnTypeEntity").css('border-color', '#ccc');
        $("#prsnTypeEntity").css('border-width', '1px');
        $("#acctTrnsTyp").css('border-color', '#ccc');
        $("#acctTrnsTyp").css('border-width', '1px');
        $("#acctTrnsTypLbl").css('color', '#333');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#acctType").css('border-color', '#ccc');
        $("#acctType").css('border-width', '1px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select at least one <b>Source of Funds</b>!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (srcOfFunds == "Other Income" && (srcOfFundsOther.trim() == "")) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#srcOfFundsOther").css('border-color', 'red');
        $("#srcOfFundsOther").css('border-width', '2px');
        $("#srcOfFunds").css('border-color', '#ccc');
        $("#srcOfFunds").css('border-width', '1px');
        $("#srcOfFundsLbl").css('color', '#333');
        $("#prpsOfAcctOther").css('border-color', '#ccc');
        $("#prpsOfAcctOther").css('border-width', '1px');
        $("#prpsOfAcct").css('border-color', '#ccc');
        $("#prpsOfAcct").css('border-width', '1px');
        $("#prpsOfAcctLbl").css('color', '#333');
        $("#prsnTypeEntity").css('border-color', '#ccc');
        $("#prsnTypeEntity").css('border-width', '1px');
        $("#acctTrnsTyp").css('border-color', '#ccc');
        $("#acctTrnsTyp").css('border-width', '1px');
        $("#acctTrnsTypLbl").css('color', '#333');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#acctType").css('border-color', '#ccc');
        $("#acctType").css('border-width', '1px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide some funds source(s) other than the predefined list above",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (parseFloat(trnsPerMnthNo) <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#trnsPerMnthNo").css('border-color', 'red');
        $("#trnsPerMnthNo").css('border-width', '2px');
        $("#srcOfFundsOther").css('border-color', '#ccc');
        $("#srcOfFundsOther").css('border-width', '1px');
        $("#srcOfFunds").css('border-color', '#ccc');
        $("#srcOfFunds").css('border-width', '1px');
        $("#srcOfFundsLbl").css('color', '#333');
        $("#prpsOfAcctOther").css('border-color', '#ccc');
        $("#prpsOfAcctOther").css('border-width', '1px');
        $("#prpsOfAcct").css('border-color', '#ccc');
        $("#prpsOfAcct").css('border-width', '1px');
        $("#prpsOfAcctLbl").css('color', '#333');
        $("#prsnTypeEntity").css('border-color', '#ccc');
        $("#prsnTypeEntity").css('border-width', '1px');
        $("#acctTrnsTyp").css('border-color', '#ccc');
        $("#acctTrnsTyp").css('border-width', '1px');
        $("#acctTrnsTypLbl").css('color', '#333');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#acctType").css('border-color', '#ccc');
        $("#acctType").css('border-width', '1px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<b>Expected Monthly Transaction Volume</b> must be greater than 0",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (Number(trnsPerMnthNo) > 0 && Number(amountPerMnth) <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#amountPerMnth").css('border-color', 'red');
        $("#amountPerMnth").css('border-width', '2px');
        $("#trnsPerMnthNo").css('border-color', '#ccc');
        $("#trnsPerMnthNo").css('border-width', '1px');
        $("#srcOfFundsOther").css('border-color', '#ccc');
        $("#srcOfFundsOther").css('border-width', '1px');
        $("#srcOfFunds").css('border-color', '#ccc');
        $("#srcOfFunds").css('border-width', '1px');
        $("#srcOfFundsLbl").css('color', '#333');
        $("#prpsOfAcctOther").css('border-color', '#ccc');
        $("#prpsOfAcctOther").css('border-width', '1px');
        $("#prpsOfAcct").css('border-color', '#ccc');
        $("#prpsOfAcct").css('border-width', '1px');
        $("#prpsOfAcctLbl").css('color', '#333');
        $("#prsnTypeEntity").css('border-color', '#ccc');
        $("#prsnTypeEntity").css('border-width', '1px');
        $("#acctTrnsTyp").css('border-color', '#ccc');
        $("#acctTrnsTyp").css('border-width', '1px');
        $("#acctTrnsTypLbl").css('color', '#333');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#acctType").css('border-color', '#ccc');
        $("#acctType").css('border-width', '1px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<b>Expected Monthly Amount</b> must be greater than zero!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (1 == 1 && (reltnOfficerID == "" || reltnOfficerID == -1)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#reltnOfficer").css('border-color', 'red');
        $("#reltnOfficer").css('border-width', '2px');
        $("#amountPerMnth").css('border-color', '#ccc');
        $("#amountPerMnth").css('border-width', '1px');
        $("#trnsPerMnthNo").css('border-color', '#ccc');
        $("#trnsPerMnthNo").css('border-width', '1px');
        $("#srcOfFundsOther").css('border-color', '#ccc');
        $("#srcOfFundsOther").css('border-width', '1px');
        $("#srcOfFunds").css('border-color', '#ccc');
        $("#srcOfFunds").css('border-width', '1px');
        $("#srcOfFundsLbl").css('color', '#333');
        $("#prpsOfAcctOther").css('border-color', '#ccc');
        $("#prpsOfAcctOther").css('border-width', '1px');
        $("#prpsOfAcct").css('border-color', '#ccc');
        $("#prpsOfAcct").css('border-width', '1px');
        $("#prpsOfAcctLbl").css('color', '#333');
        $("#prsnTypeEntity").css('border-color', '#ccc');
        $("#prsnTypeEntity").css('border-width', '1px');
        $("#acctTrnsTyp").css('border-color', '#ccc');
        $("#acctTrnsTyp").css('border-width', '1px');
        $("#acctTrnsTypLbl").css('color', '#333');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#acctType").css('border-color', '#ccc');
        $("#acctType").css('border-width', '1px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide a <b>Relationship Officer</b> for this account!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (accMndte === "--Please Select--" || accMndte == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#accMndte").css('border-color', 'red');
        $("#accMndte").css('border-width', '2px');
        $("#reltnOfficer").css('border-color', '#ccc');
        $("#reltnOfficer").css('border-width', '1px');
        $("#amountPerMnth").css('border-color', '#ccc');
        $("#amountPerMnth").css('border-width', '1px');
        $("#trnsPerMnthNo").css('border-color', '#ccc');
        $("#trnsPerMnthNo").css('border-width', '1px');
        $("#srcOfFundsOther").css('border-color', '#ccc');
        $("#srcOfFundsOther").css('border-width', '1px');
        $("#srcOfFunds").css('border-color', '#ccc');
        $("#srcOfFunds").css('border-width', '1px');
        $("#srcOfFundsLbl").css('color', '#333');
        $("#prpsOfAcctOther").css('border-color', '#ccc');
        $("#prpsOfAcctOther").css('border-width', '1px');
        $("#prpsOfAcct").css('border-color', '#ccc');
        $("#prpsOfAcct").css('border-width', '1px');
        $("#prpsOfAcctLbl").css('color', '#333');
        $("#prsnTypeEntity").css('border-color', '#ccc');
        $("#prsnTypeEntity").css('border-width', '1px');
        $("#acctTrnsTyp").css('border-color', '#ccc');
        $("#acctTrnsTyp").css('border-width', '1px');
        $("#acctTrnsTypLbl").css('color', '#333');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#acctType").css('border-color', '#ccc');
        $("#acctType").css('border-width', '1px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a <b>Mandate</b> for this account",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (groupID <= -1 && groupNm != "Everyone") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#groupName").css('border-color', 'red');
        $("#groupName").css('border-width', '2px');
        $("#accMndte").css('border-color', '#ccc');
        $("#accMndte").css('border-width', '1px');
        $("#reltnOfficer").css('border-color', '#ccc');
        $("#reltnOfficer").css('border-width', '1px');
        $("#amountPerMnth").css('border-color', '#ccc');
        $("#amountPerMnth").css('border-width', '1px');
        $("#trnsPerMnthNo").css('border-color', '#ccc');
        $("#trnsPerMnthNo").css('border-width', '1px');
        $("#srcOfFundsOther").css('border-color', '#ccc');
        $("#srcOfFundsOther").css('border-width', '1px');
        $("#srcOfFunds").css('border-color', '#ccc');
        $("#srcOfFunds").css('border-width', '1px');
        $("#srcOfFundsLbl").css('color', '#333');
        $("#prpsOfAcctOther").css('border-color', '#ccc');
        $("#prpsOfAcctOther").css('border-width', '1px');
        $("#prpsOfAcct").css('border-color', '#ccc');
        $("#prpsOfAcct").css('border-width', '1px');
        $("#prpsOfAcctLbl").css('color', '#333');
        $("#prsnTypeEntity").css('border-color', '#ccc');
        $("#prsnTypeEntity").css('border-width', '1px');
        $("#acctTrnsTyp").css('border-color', '#ccc');
        $("#acctTrnsTyp").css('border-width', '1px');
        $("#acctTrnsTypLbl").css('color', '#333');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#acctType").css('border-color', '#ccc');
        $("#acctType").css('border-width', '1px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select an <b>Allowed Group Name</b> for this account",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        //$body.removeClass("mdlloadingDiag");
        //$body.removeClass("mdlloading");
        $("#groupName").css('border-color', '#ccc');
        $("#groupName").css('border-width', '1px');
        $("#accMndte").css('border-color', '#ccc');
        $("#accMndte").css('border-width', '1px');
        $("#reltnOfficer").css('border-color', '#ccc');
        $("#reltnOfficer").css('border-width', '1px');
        $("#amountPerMnth").css('border-color', '#ccc');
        $("#amountPerMnth").css('border-width', '1px');
        $("#trnsPerMnthNo").css('border-color', '#ccc');
        $("#trnsPerMnthNo").css('border-width', '1px');
        $("#srcOfFundsOther").css('border-color', '#ccc');
        $("#srcOfFundsOther").css('border-width', '1px');
        $("#srcOfFunds").css('border-color', '#ccc');
        $("#srcOfFunds").css('border-width', '1px');
        $("#srcOfFundsLbl").css('color', '#333');
        $("#prpsOfAcctOther").css('border-color', '#ccc');
        $("#prpsOfAcctOther").css('border-width', '1px');
        $("#prpsOfAcct").css('border-color', '#ccc');
        $("#prpsOfAcct").css('border-width', '1px');
        $("#prpsOfAcctLbl").css('color', '#333');
        $("#prsnTypeEntity").css('border-color', '#ccc');
        $("#prsnTypeEntity").css('border-width', '1px');
        $("#acctTrnsTyp").css('border-color', '#ccc');
        $("#acctTrnsTyp").css('border-width', '1px');
        $("#acctTrnsTypLbl").css('color', '#333');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#acctType").css('border-color', '#ccc');
        $("#acctType").css('border-width', '1px');
        $("#acctTitle").css('border-color', '#ccc');
        $("#acctTitle").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        return true;
    }
}

function saveCustAccountsData(pgNo, subPgNo, vtyp, shdSbmit)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag"); 
        
        var prpsOfAcctArray = $('#prpsOfAcct option:selected').map(function () {
            return $(this).val(); ///text();
        }).get();
        var srcOfFundstArray = $('#srcOfFunds option:selected').map(function () {
            return $(this).val(); ///text();
        }).get();
        var acctTrnsTypArray = $('#acctTrnsTyp option:selected').map(function () {
            return $(this).val(); ///text();
        }).get();
        var smsTriggersArray = $('#smsTriggers option:selected').map(function () {
            return $(this).val(); ///text();
        }).get();
        //alert(prpsOfAcctArray);

        var obj;
        var custType = typeof $("#custType").val() === 'undefined' ? '' : $("#custType").val();
        var bnkCustomerID = typeof $("#bnkCustomerID").val() === 'undefined' ? -1 : $("#bnkCustomerID").val();
        var acctID = typeof $("#acctID").val() === 'undefined' ? -1 : $("#acctID").val().trim().length === 0 ? -1 : $("#acctID").val();
        var acctNumber = typeof $("#acctNumber").val() === 'undefined' ? '' : $("#acctNumber").val();
        var acctTitle = typeof $("#acctTitle").val() === 'undefined' ? '' : $("#acctTitle").val();
        var acctType = typeof $("#acctType").val() === 'undefined' ? '' : $("#acctType").val();
        var prdtTypeID = typeof $("#prdtTypeID").val() === 'undefined' ? -1 : $("#prdtTypeID").val();
        var acctTrnsTyp = acctTrnsTypArray; //typeof $("#acctTrnsTyp").val() === 'undefined' ? '' : $("#acctTrnsTyp").val();
        var prsnTypeEntity = typeof $("#prsnTypeEntity").val() === 'undefined' ? '' : $("#prsnTypeEntity").val();
        var prdtCrncy = typeof $("#prdtCrncy").val() === 'undefined' ? '' : $("#prdtCrncy").val();
        var prpsOfAcct = prpsOfAcctArray; //typeof $("#prpsOfAcct").val() === 'undefined' ? '' : $("#prpsOfAcct").val();
        var prpsOfAcctOther = typeof $("#prpsOfAcctOther").val() === 'undefined' ? -1 : $("#prpsOfAcctOther").val();
        var srcOfFunds = srcOfFundstArray; //$("#srcOfFunds").attr("name");//typeof $("#srcOfFunds").val() === 'undefined' ? -1 : $("#srcOfFunds").val();
        var srcOfFundsOther = typeof $("#srcOfFundsOther").val() === 'undefined' ? -1 : $("#srcOfFundsOther").val();
        var trnsPerMnthNo = typeof $("#trnsPerMnthNo").val() === 'undefined' ? -1 : $("#trnsPerMnthNo").val().trim().length === 0 ? 0 : $("#trnsPerMnthNo").val();
        var amountPerMnth = typeof $("#amountPerMnth").val() === 'undefined' ? -1 : $("#amountPerMnth").val().trim().length === 0 ? 0 : $("#amountPerMnth").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
        var reltnOfficerID = typeof $("#reltnOfficerID").val() === 'undefined' ? '' : $("#reltnOfficerID").val();
        //var startDate = typeof $("#startDate").val() === 'undefined' ? '' : $("#startDate").val();
        //var endDate = typeof $("#endDate").val() === 'undefined' ? '' : $("#endDate").val();

        var statusReason = typeof $("#closeReason").val() === 'undefined' ? '' : $("#closeReason").val();
        var status = typeof $("#status").val() === 'undefined' ? -1 : $("#status").val();
        var accMndte = typeof $("#accMndte").val() === 'undefined' ? -1 : $("#accMndte").val();
        var grpType = typeof $("#grpType").val() === 'undefined' ? 'Everyone' : $("#grpType").val();
        var groupID = typeof $("#groupID").val() === 'undefined' ? -1 : $("#groupID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        var canOverdrawAcct = typeof $("#canOverdrawAcct").val() === 'undefined' ? 'No' : $("#canOverdrawAcct").val();
        var smsTriggers = smsTriggersArray; 
        //alert(acctTrnsTyp);
//        if(parseInt(acctID)> 0 && acctNumber.trim() == ""){
//            $body.removeClass("mdlloadingDiag");
//            $body.removeClass("mdlloading");
//            bootbox.alert({
//                size: "small",
//                title: "Rhomicom Message",
//                message: "Please provide an Account Number",
//                callback: function () { /* your callback code */
//                }
//            });  
//            $("#acctNumber").css('border-color', 'red');
//            $("#acctNumber").css('border-width', '2px');
//            return false;
//        } else {
//            $("#acctNumber").css('border-color', '#ccc');
//            $("#acctNumber").css('border-width', '1px');
//        }


        var rslt = validateCustAcctsForm(custType, bnkCustomerID, acctTitle, acctType, prdtTypeID, acctTrnsTyp,
                prsnTypeEntity, prpsOfAcct, prpsOfAcctOther, srcOfFunds, srcOfFundsOther, trnsPerMnthNo, amountPerMnth, bnkBranchID,
                reltnOfficerID, accMndte, groupID, grpType);
        if (!rslt) {
            return false;
        }

        var actnTyp;
        var prmtMsg = "Are you sure you want to submit account for Approval?"
        if(shdSbmit === 1){//SUBMIT
            actnTyp = 2;
            var accMndte = typeof $("#accMndte").val() === 'undefined' ? -1 : $("#accMndte").val();
            var mndtySignCnta = 0;
            if (accMndte === "Anyone to sign") {
                mndtySignCnta = 1;
            } else if (accMndte === "Any two to sign") {
                mndtySignCnta = 2;
            } else if (accMndte === "Any three to sign") {
                mndtySignCnta = 3;
            } else if (accMndte === "Any four to sign") {
                mndtySignCnta = 4;
            } else if (accMndte === "All to sign") {
                mndtySignCnta = 1;
            } else if (accMndte === "Both to sign") {
                mndtySignCnta = 2;
            } else if (accMndte === "Only to sign") {
                mndtySignCnta = 1;
            }

            if (Number($('table#acctSignatoryTblAdd tbody tr:last').index() + 1) < Number(mndtySignCnta)) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                //$("#guarantorsLgnd").css('color', 'red');
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide at least <b>" + mndtySignCnta + " Signatory(s)</b> before submitting this account for approval!",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            } else if (accMndte === "Only to sign" && (Number($('table#acctSignatoryTblAdd tbody tr:last').index() + 1) > 1)) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                //$("#guarantorsLgnd").css('color', 'red');
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Only <b>One signatory</b> is required. </br>Please delete excess signatories!",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            } else if (accMndte === "Both to sign" && (Number($('table#acctSignatoryTblAdd tbody tr:last').index() + 1) > 2)) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                //$("#guarantorsLgnd").css('color', 'red');
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Only <b>Two signatories</b> are required. </br>Please delete excess signatories!",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            } else {

                var chkdCnta = 0;
                //var v_yes = "Yes";
                $('table#acctSignatoryTblAdd tr').each(function () {
//var columns = $(this).find('td');
                    if ($(this).find("td:eq(5)").text() == "Yes") {
                        chkdCnta = chkdCnta + 1;
                    }

                });
                if (accMndte === "Anyone to sign" && Number(chkdCnta) > 1) {
                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloading");
                    //$("#guarantorsLgnd").css('color', 'red');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Only <b>One Mandatory Signatory</b> is required, but " + chkdCnta + " specified</br>Please do needful!",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                } else if (accMndte === "Any two to sign" && Number(chkdCnta) > 2) {
                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloading");
                    //$("#guarantorsLgnd").css('color', 'red');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Only <b>Two Mandatory Signatories</b> are required, but " + chkdCnta + " specified</br>Please do needful!",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                } else if (accMndte === "Any three to sign" && Number(chkdCnta) > 2) {
                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloading");
                    //$("#guarantorsLgnd").css('color', 'red');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Only <b>Three Mandatory Signatories</b> are required, but " + chkdCnta + " specified</br>Please do needful!",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                } else if (accMndte === "Any four to sign" && Number(chkdCnta) > 2) {
                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloading");
                    //$("#guarantorsLgnd").css('color', 'red');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Only <b>Four Mandatory Signatories</b> are required, but " + chkdCnta + " specified</br>Please do needful!",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }
            }           
            
        }
        
//var formData = new FormData($(this)[0]);
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('acctID', acctID);
        formData.append('acctNumber', acctNumber);
        formData.append('acctTitle', acctTitle);
        formData.append('actyp', 1);
        formData.append('acctType', acctType);
        formData.append('prdtCrncy', prdtCrncy);
        formData.append('prdtTypeID', prdtTypeID);
        formData.append('acctTrnsTyp', acctTrnsTyp);
        formData.append('prsnTypeEntity', prsnTypeEntity);
        formData.append('custType', custType);
        formData.append('bnkCustomerID', bnkCustomerID);
        formData.append('prpsOfAcct', prpsOfAcct);
        formData.append('prpsOfAcctOther', prpsOfAcctOther);
        formData.append('srcOfFunds', srcOfFunds);
        formData.append('srcOfFundsOther', srcOfFundsOther);
        formData.append('trnsPerMnthNo', trnsPerMnthNo);
        formData.append('amountPerMnth', amountPerMnth);
        formData.append('bnkBranchID', bnkBranchID);
        formData.append('reltnOfficerID', reltnOfficerID);
        formData.append('canOverdrawAcct',canOverdrawAcct);
        formData.append('smsTriggers',smsTriggers);
        //formData.append('startDate', startDate);
        //formData.append('endDate', endDate);

        formData.append('statusReason', statusReason);
        formData.append('status', status);
        formData.append('accMndte', accMndte);
        formData.append('grpType', grpType);
        formData.append('groupID', groupID);
        formData.append('rvsnTtl', rvsnTtl);
        formData.append('shdSbmit', shdSbmit);
        
        if(shdSbmit === 1){//SUBMIT  
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.confirm({
                title: "Rhomicom Message",
                message: prmtMsg,
                buttons: {
                    confirm: {
                        label: 'Yes',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: 'No',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {

                        $body = $("body");
                        $body.addClass("mdlloadingDiag");
                        $.ajax({
                            url: 'index.php',
                            type: 'POST',
                            data: formData,
                            async: true,
                            success: function (data) {
                                $body.removeClass("mdlloadingDiag");
                                $body.removeClass("mdlloading");
                                var msg = "";
                                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                    obj = $.parseJSON(data);
                                    acctID = obj.acctID;
                                } else {
//                                    if (actn == "SUBMIT") {
//
//                                        $("#withdrawCustAccountBtn").css("display", "inline-block");
//                                        $("#saveCustAccountBtn").css("display", "none");
//                                        $("#submitCustAccountBtn").css("display", "none");
//                                        $("#getSigntryBtn").css("display", "none");
//                                        $('#statusTitle').html("Initiated");
//                                        $('#status').val("Initiated");
//                                    } else if (actn == "WITHDRAW") {
//
//                                        $("#withdrawCustAccountBtn").css("display", "none");
//                                        $("#saveCustAccountBtn").css("display", "inline-block");
//                                        $("#submitCustAccountBtn").css("display", "inline-block");
//                                        $("#getSigntryBtn").css("display", "block");
//                                        //$("#getSigntryBtn").css("display", "block");
//
//                                        $('#statusTitle').html("Withdrawn");
//                                        $('#status').val("Withdrawn");
//                                    }

                                }
                                
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: "Customer Account Submitted Successfully",
                                    callback: function () { /* your callback code */
                                        getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'Edit Customer Account', 13, 2.1, 0, 'EDIT', acctID, 'custAcctTable', 'indCustTableRow1');
                                    }
                                });                                
    
                            },
                            cache: false,
                            contentType: false,
                            processData: false
                        });
                    }
                }
            });  
        } else {
            $.ajax({
                url: 'index.php',
                type: 'POST',
                data: formData,
                async: true,
                success: function (data) {
                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloading");
                    var msg = "";
                    if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                            replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                            replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                        obj = $.parseJSON(data);
                        acctID = obj.acctID;
                        //SET PRODUCT ID
                        $("#acctID").val(obj.acctID);
                        $("#acctNumber").val(obj.acctNumber);
                        $("#submitCustAccountBtn").css("display", "inline-block");
                        //SHOW EXTRA TABS
                        $("#standardEvtns").css("display", "block");
                        $("#customEvnts").css("display", "block");
                        msg = "Customer Accounts Successfully Saved!";
                    } else {

                        msg = data;
                    }

                    //obj =  JSON.parse(data); //$.parseJSON(data);//
                    if(acctID > 0){
                        bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                                getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'Edit Customer Account', 13, 2.1, 0, 'EDIT', acctID, 'custAcctTable', 'indCustTableRow1');
                            }
                        });
                    } else {
                        bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { }
                        });
                    }
                },
                cache: false,
                contentType: false,
                processData: false
            });
        }
    });
}

function saveCustAccountsData_old(pgNo, subPgNo, vtyp, shdSbmit)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag"); 
        
        var prpsOfAcctArray = $('#prpsOfAcct option:selected').map(function () {
            return $(this).val(); ///text();
        }).get();
        var srcOfFundstArray = $('#srcOfFunds option:selected').map(function () {
            return $(this).val(); ///text();
        }).get();
        var acctTrnsTypArray = $('#acctTrnsTyp option:selected').map(function () {
            return $(this).val(); ///text();
        }).get();
        //alert(prpsOfAcctArray);

        var obj;
        var custType = typeof $("#custType").val() === 'undefined' ? '' : $("#custType").val();
        var bnkCustomerID = typeof $("#bnkCustomerID").val() === 'undefined' ? -1 : $("#bnkCustomerID").val();
        var acctID = typeof $("#acctID").val() === 'undefined' ? -1 : $("#acctID").val().trim().length === 0 ? -1 : $("#acctID").val();
        var acctNumber = typeof $("#acctNumber").val() === 'undefined' ? '' : $("#acctNumber").val();
        var acctTitle = typeof $("#acctTitle").val() === 'undefined' ? '' : $("#acctTitle").val();
        var acctType = typeof $("#acctType").val() === 'undefined' ? '' : $("#acctType").val();
        var prdtTypeID = typeof $("#prdtTypeID").val() === 'undefined' ? -1 : $("#prdtTypeID").val();
        var acctTrnsTyp = acctTrnsTypArray; //typeof $("#acctTrnsTyp").val() === 'undefined' ? '' : $("#acctTrnsTyp").val();
        var prsnTypeEntity = typeof $("#prsnTypeEntity").val() === 'undefined' ? '' : $("#prsnTypeEntity").val();
        var prdtCrncy = typeof $("#prdtCrncy").val() === 'undefined' ? '' : $("#prdtCrncy").val();
        var prpsOfAcct = prpsOfAcctArray; //typeof $("#prpsOfAcct").val() === 'undefined' ? '' : $("#prpsOfAcct").val();
        var prpsOfAcctOther = typeof $("#prpsOfAcctOther").val() === 'undefined' ? -1 : $("#prpsOfAcctOther").val();
        var srcOfFunds = srcOfFundstArray; //$("#srcOfFunds").attr("name");//typeof $("#srcOfFunds").val() === 'undefined' ? -1 : $("#srcOfFunds").val();
        var srcOfFundsOther = typeof $("#srcOfFundsOther").val() === 'undefined' ? -1 : $("#srcOfFundsOther").val();
        var trnsPerMnthNo = typeof $("#trnsPerMnthNo").val() === 'undefined' ? -1 : $("#trnsPerMnthNo").val().trim().length === 0 ? 0 : $("#trnsPerMnthNo").val();
        var amountPerMnth = typeof $("#amountPerMnth").val() === 'undefined' ? -1 : $("#amountPerMnth").val().trim().length === 0 ? 0 : $("#amountPerMnth").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
        var reltnOfficerID = typeof $("#reltnOfficerID").val() === 'undefined' ? '' : $("#reltnOfficerID").val();
        //var startDate = typeof $("#startDate").val() === 'undefined' ? '' : $("#startDate").val();
        //var endDate = typeof $("#endDate").val() === 'undefined' ? '' : $("#endDate").val();

        var statusReason = typeof $("#closeReason").val() === 'undefined' ? '' : $("#closeReason").val();
        var status = typeof $("#status").val() === 'undefined' ? -1 : $("#status").val();
        var accMndte = typeof $("#accMndte").val() === 'undefined' ? -1 : $("#accMndte").val();
        var grpType = typeof $("#grpType").val() === 'undefined' ? 'Everyone' : $("#grpType").val();
        var groupID = typeof $("#groupID").val() === 'undefined' ? -1 : $("#groupID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        var canOverdrawAcct = typeof $("#canOverdrawAcct").val() === 'undefined' ? 'No' : $("#canOverdrawAcct").val();
        //alert(acctTrnsTyp);
//        if(parseInt(acctID)> 0 && acctNumber.trim() == ""){
//            $body.removeClass("mdlloadingDiag");
//            $body.removeClass("mdlloading");
//            bootbox.alert({
//                size: "small",
//                title: "Rhomicom Message",
//                message: "Please provide an Account Number",
//                callback: function () { /* your callback code */
//                }
//            });  
//            $("#acctNumber").css('border-color', 'red');
//            $("#acctNumber").css('border-width', '2px');
//            return false;
//        } else {
//            $("#acctNumber").css('border-color', '#ccc');
//            $("#acctNumber").css('border-width', '1px');
//        }


        var rslt = validateCustAcctsForm(custType, bnkCustomerID, acctTitle, acctType, prdtTypeID, acctTrnsTyp,
                prsnTypeEntity, prpsOfAcct, prpsOfAcctOther, srcOfFunds, srcOfFundsOther, trnsPerMnthNo, amountPerMnth, bnkBranchID,
                reltnOfficerID, accMndte, groupID, grpType);
        if (!rslt) {
            return false;
        }

        var actnTyp;
        var prmtMsg = "Are you sure you want to submit account for Approval?"
        if(shdSbmit === 1){//SUBMIT
            actnTyp = 2;
            var accMndte = typeof $("#accMndte").val() === 'undefined' ? -1 : $("#accMndte").val();
            var mndtySignCnta = 0;
            if (accMndte === "Anyone to sign") {
                mndtySignCnta = 1;
            } else if (accMndte === "Any two to sign") {
                mndtySignCnta = 2;
            } else if (accMndte === "Any three to sign") {
                mndtySignCnta = 3;
            } else if (accMndte === "Any four to sign") {
                mndtySignCnta = 4;
            } else if (accMndte === "All to sign") {
                mndtySignCnta = 1;
            } else if (accMndte === "Both to sign") {
                mndtySignCnta = 2;
            } else if (accMndte === "Only to sign") {
                mndtySignCnta = 1;
            }

            if (Number($('table#acctSignatoryTblAdd tbody tr:last').index() + 1) < Number(mndtySignCnta)) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                //$("#guarantorsLgnd").css('color', 'red');
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide at least <b>" + mndtySignCnta + " Signatory(s)</b> before submitting this account for approval!",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            } else if (accMndte === "Only to sign" && (Number($('table#acctSignatoryTblAdd tbody tr:last').index() + 1) > 1)) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                //$("#guarantorsLgnd").css('color', 'red');
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Only <b>One signatory</b> is required. </br>Please delete excess signatories!",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            } else if (accMndte === "Both to sign" && (Number($('table#acctSignatoryTblAdd tbody tr:last').index() + 1) > 2)) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                //$("#guarantorsLgnd").css('color', 'red');
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Only <b>Two signatories</b> are required. </br>Please delete excess signatories!",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            } else {

                var chkdCnta = 0;
                //var v_yes = "Yes";
                $('table#acctSignatoryTblAdd tr').each(function () {
//var columns = $(this).find('td');
                    if ($(this).find("td:eq(5)").text() == "Yes") {
                        chkdCnta = chkdCnta + 1;
                    }

                });
                if (accMndte === "Anyone to sign" && Number(chkdCnta) > 1) {
                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloading");
                    //$("#guarantorsLgnd").css('color', 'red');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Only <b>One Mandatory Signatory</b> is required, but " + chkdCnta + " specified</br>Please do needful!",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                } else if (accMndte === "Any two to sign" && Number(chkdCnta) > 2) {
                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloading");
                    //$("#guarantorsLgnd").css('color', 'red');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Only <b>Two Mandatory Signatories</b> are required, but " + chkdCnta + " specified</br>Please do needful!",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                } else if (accMndte === "Any three to sign" && Number(chkdCnta) > 2) {
                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloading");
                    //$("#guarantorsLgnd").css('color', 'red');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Only <b>Three Mandatory Signatories</b> are required, but " + chkdCnta + " specified</br>Please do needful!",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                } else if (accMndte === "Any four to sign" && Number(chkdCnta) > 2) {
                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloading");
                    //$("#guarantorsLgnd").css('color', 'red');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Only <b>Four Mandatory Signatories</b> are required, but " + chkdCnta + " specified</br>Please do needful!",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }
            }           
            
        }
        
//var formData = new FormData($(this)[0]);
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('acctID', acctID);
        formData.append('acctNumber', acctNumber);
        formData.append('acctTitle', acctTitle);
        formData.append('actyp', 1);
        formData.append('acctType', acctType);
        formData.append('prdtCrncy', prdtCrncy);
        formData.append('prdtTypeID', prdtTypeID);
        formData.append('acctTrnsTyp', acctTrnsTyp);
        formData.append('prsnTypeEntity', prsnTypeEntity);
        formData.append('custType', custType);
        formData.append('bnkCustomerID', bnkCustomerID);
        formData.append('prpsOfAcct', prpsOfAcct);
        formData.append('prpsOfAcctOther', prpsOfAcctOther);
        formData.append('srcOfFunds', srcOfFunds);
        formData.append('srcOfFundsOther', srcOfFundsOther);
        formData.append('trnsPerMnthNo', trnsPerMnthNo);
        formData.append('amountPerMnth', amountPerMnth);
        formData.append('bnkBranchID', bnkBranchID);
        formData.append('reltnOfficerID', reltnOfficerID);
        formData.append('canOverdrawAcct',canOverdrawAcct);
        //formData.append('startDate', startDate);
        //formData.append('endDate', endDate);

        formData.append('statusReason', statusReason);
        formData.append('status', status);
        formData.append('accMndte', accMndte);
        formData.append('grpType', grpType);
        formData.append('groupID', groupID);
        formData.append('rvsnTtl', rvsnTtl);
        formData.append('shdSbmit', shdSbmit);
        
        if(shdSbmit === 1){//SUBMIT  
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.confirm({
                title: "Rhomicom Message",
                message: prmtMsg,
                buttons: {
                    confirm: {
                        label: 'Yes',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: 'No',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {

                        $body = $("body");
                        $body.addClass("mdlloadingDiag");
                        $.ajax({
                            url: 'index.php',
                            type: 'POST',
                            data: formData,
                            async: true,
                            success: function (data) {
                                $body.removeClass("mdlloadingDiag");
                                $body.removeClass("mdlloading");
                                var msg = "";
                                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                    obj = $.parseJSON(data);
                                    acctID = obj.acctID;
                                } else {
//                                    if (actn == "SUBMIT") {
//
//                                        $("#withdrawCustAccountBtn").css("display", "inline-block");
//                                        $("#saveCustAccountBtn").css("display", "none");
//                                        $("#submitCustAccountBtn").css("display", "none");
//                                        $("#getSigntryBtn").css("display", "none");
//                                        $('#statusTitle').html("Initiated");
//                                        $('#status').val("Initiated");
//                                    } else if (actn == "WITHDRAW") {
//
//                                        $("#withdrawCustAccountBtn").css("display", "none");
//                                        $("#saveCustAccountBtn").css("display", "inline-block");
//                                        $("#submitCustAccountBtn").css("display", "inline-block");
//                                        $("#getSigntryBtn").css("display", "block");
//                                        //$("#getSigntryBtn").css("display", "block");
//
//                                        $('#statusTitle').html("Withdrawn");
//                                        $('#status').val("Withdrawn");
//                                    }

                                }
                                
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: "Customer Account Submitted Successfully",
                                    callback: function () { /* your callback code */
                                        getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'Edit Customer Account', 13, 2.1, 0, 'EDIT', acctID, 'custAcctTable', 'indCustTableRow1');
                                    }
                                });                                
    
                            },
                            cache: false,
                            contentType: false,
                            processData: false
                        });
                    }
                }
            });  
        } else {
            $.ajax({
                url: 'index.php',
                type: 'POST',
                data: formData,
                async: true,
                success: function (data) {
                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloading");
                    var msg = "";
                    if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                            replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                            replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                        obj = $.parseJSON(data);
                        acctID = obj.acctID;
                        //SET PRODUCT ID
                        $("#acctID").val(obj.acctID);
                        $("#acctNumber").val(obj.acctNumber);
                        $("#submitCustAccountBtn").css("display", "inline-block");
                        //SHOW EXTRA TABS
                        $("#standardEvtns").css("display", "block");
                        $("#customEvnts").css("display", "block");
                        msg = "Customer Accounts Successfully Saved!";
                    } else {

                        msg = data;
                    }

                    //obj =  JSON.parse(data); //$.parseJSON(data);//
                    if(acctID > 0){
                        bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                                getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'Edit Customer Account', 13, 2.1, 0, 'EDIT', acctID, 'custAcctTable', 'indCustTableRow1');
                            }
                        });
                    } else {
                        bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { }
                        });
                    }
                },
                cache: false,
                contentType: false,
                processData: false
            });
        }
    });
}

function onClickCustName() {
//var custTypSltd = $("#custType option:selected").val();

    getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'All Bank Customers', 'gnrlOrgID', 'custType', '', 'radio', true, '', 'bnkCustomerID', 'bnkCustomer', 'clear', 1, '', function () {
        $('#acctTitle').val($('#bnkCustomer').val());
    });
}

function empty_selectList(elementID) {

    var select = document.getElementById(elementID);
    select.options.length = 0;
}

function populate_selectListIndv(elementID) {
    empty_selectList(elementID);
    var select = document.getElementById(elementID);
    select.options[select.options.length] = new Option('Only to sign', 'Only to sign');
}

function populate_selectListIndvFrmArray(elementID) {
    empty_selectList(elementID);
    var select = document.getElementById(elementID);
    for (var index in accMandate) {
        select.options[select.options.length] = new Option(accMandate[index], accMandate[index]); //new Option(accMandate[index], index);
    }

}

function loadPrsnTypeEntiries(elmnt) {
    $body = $("body");
    if ($('#custType').val() == '--Please Select--') {
        empty_selectList("accMndte");
        return false;
    }

    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            $('#prsnTypeEntity').html(xmlhttp.responseText);
            /*$('.modal-dialog').draggable();*/

            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $(document).ready(function () {
                /*$('#' + formElementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/

                if ($('#custType').val() == 'Individual') {
                    populate_selectListIndv("accMndte");
                } else {
                    populate_selectListIndvFrmArray("accMndte");
                }
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=13&subPgNo=2.1&vtyp=0&vtypActn=PTYPENT&cType=" + $('#custType').val());
}

function getSignatoryForm(elementID, modalBodyID, titleElementID, formElementID, tRowElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID)
{
    var custType = $('#custType').val();
    var prsnTypeEntity = $('#prsnTypeEntity').val();
    var bnkCustomerID = $('#bnkCustomerID').val();
    var acctID = $('#acctID').val();
    var acctSignID = pKeyID; //$('#acctSignID').val();

    if (acctID === 'undefined' || acctID === '' || acctID === -1) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please save Account first!",
            callback: function () {
            }
        });
        return false;
    } else if (custType === 'undefined' || custType === '' || bnkCustomerID === 'undefined' || bnkCustomerID === '') {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Customer Type and Name are mandatory!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {


        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var xmlhttp;
        if (window.XMLHttpRequest)
        {
            /*code for IE7+, Firefox, Chrome, Opera, Safari*/
            xmlhttp = new XMLHttpRequest();
        } else
        {
            /*code for IE6, IE5*/
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
        xmlhttp.onreadystatechange = function ()
        {
            if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
            {
//alert("Hello");
                $('#' + titleElementID).html(formTitle);
                $('#' + modalBodyID).html(xmlhttp.responseText);
                /*$('.modal-content').resizable({
                 //alsoResize: ".modal-dialog",
                 minHeight: 600,
                 minWidth: 300
                 });*/
                /*$('.modal-dialog').draggable();*/
                $(function () {
                    $('.form_date').datetimepicker({
                        format: "d-M-yyyy",
                        language: 'en',
                        weekStart: 0,
                        todayBtn: true,
                        autoclose: true,
                        todayHighlight: true,
                        keyboardNavigation: true,
                        startView: 2,
                        minView: 2,
                        maxView: 4,
                        forceParse: true
                    });
                });
                if (vtyp === 5 && vtypActn === 'EDIT')
                {
                    /*Get various field element IDs and populate values*/
                    var $tds = $('#' + tRowElementID).find('td');
                    $('#lowRange').val($.trim($tds.eq(2).text()));
                    $('#highRange').val($.trim($tds.eq(3).text()));
                    $('#amountFlat').val($.trim($tds.eq(4).text()));
                    $('#amountPrcnt').val($.trim($tds.eq(5).text()));
                    $('#remarks').val($.trim($tds.eq(6).text()));
                    $('#tblRowElementID').val(tRowElementID);
                }

                $('#' + elementID).on('show.bs.modal', function (e) {
                    $(this).find('.modal-body').css({
                        'max-height': '100%'
                    });
                });
                $('#myLovModal').off('hidden.bs.modal');
                $('#myLovModal').one('hidden.bs.modal', function (e) {
                    $('#' + modalBodyID).html('');
                    $(e.currentTarget).unbind();
                });
                $body.removeClass("mdlloadingDiag");
                $('#' + elementID).modal({backdrop: 'static',keyboard:false});
                //$body.removeClass("mdlloading");
                //$body = $("body");
                $(document).ready(function () {
                    $('#' + formElementID).submit(function (e) {
                        e.preventDefault();
                        return false;
                    });
                    if (custType == "Corporate" && prsnTypeEntity != "CORP-Partnership") {
                        $("#srcTypeDiv").css("display", "block");
                    } else {
                        $("#srcTypeDiv").css("display", "none");
                    }

                });
            }
        };
        xmlhttp.open("POST", "index.php", true);
        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn +
                "&acctID=" + acctID +
                "&acctSignId=" + acctSignID);
    }
}

function getAccountSignatories() {
    var custType = $('#custType').val();
    var bnkCustomerID = $('#bnkCustomerID').val();
    var srcType = $('#srcType').val();
    var lovName = "Bank Individual Customers";
    var extraWhere = " AND 1 = 1";
    var criteriaID2 = "custTypeIndividual";
    switch (custType) {
        case 'Individual':
            extraWhere = " AND tbl1.a = '" + bnkCustomerID + "'";
            criteriaID2 = "custType";
            getLovsPage('myLovModal1', 'myLovModal1Title', 'myLovModal1Body', lovName, 'gnrlOrgID', criteriaID2, '', 'radio', true, '', 'bnkSignatoryID', 'bnkSignatory', 'clear', 1, extraWhere);
            break;
        case 'Corporate':
            if (srcType === "Other Persons") {
                lovName = "Bank Other Persons";
                criteriaID2 = "isSignatory";
            }
//criteriaID2 = "custTypeIndividual";
            getLovsPage('myLovModal1', 'myLovModal1Title', 'myLovModal1Body', lovName, 'gnrlOrgID', criteriaID2, '', 'radio', true, '', 'bnkSignatoryID', 'bnkSignatory', 'clear', 1, extraWhere);
            break;
        case 'Group':
            //criteriaID2 = "custTypeIndividual";
            lovName = "MCF Customer Group Members";
            getLovsPage('myLovModal1', 'myLovModal1Title', 'myLovModal1Body', lovName, 'gnrlOrgID', 'bnkCustomerID', '', 'radio', true, '', 'bnkSignatoryID', 'bnkSignatory', 'clear', 1, '');
            
            //getLovsPage('myLovModal1', 'myLovModal1Title', 'myLovModal1Body', lovName, 'gnrlOrgID', criteriaID2, '', 'radio', true, '', 'bnkSignatoryID', 'bnkSignatory', 'clear', 1, extraWhere);
            break;
        case 'Joint-Individual':
            extraWhere = "";
            //criteriaID2 = "custTypeIndividual";
            getLovsPage('myLovModal1', 'myLovModal1Title', 'myLovModal1Body', lovName, 'gnrlOrgID', criteriaID2, '', 'radio', true, '', 'bnkSignatoryID', 'bnkSignatory', 'clear', 1, extraWhere);
            break;
    }


}

function saveAccountSignatoriesForm(elementID, rowID, mode)
{
    var obj;
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var acctID = typeof $("#acctID").val() === 'undefined' ? -1 : $("#acctID").val();
    var srcType = typeof $("#srcType").val() === 'undefined' ? '' : $("#srcType").val();
    var bnkSignatoryID = typeof $("#bnkSignatoryID").val() === 'undefined' ? -1 : $("#bnkSignatoryID").val();
    var bnkSignatory = typeof $("#bnkSignatory").val() === 'undefined' ? -1 : $("#bnkSignatory").val();
    var toSignMndtry = typeof $("#toSignMndtry").val() === 'undefined' ? 'No' : $("#toSignMndtry").val();
    var endDate = typeof $("#endDate").val() === 'undefined' ? '' : $("#endDate").val();
    //var tRowElementID = typeof $("#tblRowElementID").val() === 'undefined' ? -1 : $("#tblRowElementID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? '' : $("#rvsnTtl").val();

    if (mode == "ADD") {
        var vld = true;
        $('table#acctSignatoryTblAdd tr').each(function () {

            if ($(this).find("td:eq(7)").text() == srcType && $(this).find("td:eq(8)").text() == bnkSignatoryID) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                //$("#guarantorsLgnd").css('color', 'red'); 
                vld = false;
                return false;
            }

        });
        if (vld == false)
        {
            $('#myLovModalTitle99').html('Rhomicom Message');
            $('#myLovModalBody99').html("<span style='color:red !important;'><b>Signatory already exists. Please select another person!</b></span>");  
            $('#myLovModal99').modal('show', {backdrop: 'static'});            
            
//            bootbox.alert({
//                size: "small",
//                title: "Rhomicom Message",
//                message: "<span style='color:red !important;'><b>Signatory already exists. Please select another person!</b></span>",
//                callback: function () { /* your callback code */
//                }
//            });
            return false;
        }
    }

    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            var msg = "";
            var data = xmlhttp.responseText;
            var rowValID = -1;
            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                obj = $.parseJSON(data);
                //SET ROW ID
                var rowValID = obj.rowID;
                var localIDNo = obj.localIDNo;
            }
            
//            if (rowID <= 0) {
//                $('#acctSignatoryTblAdd').append('<tr id="acctSignatoryTblAddRow' + rowValID + '"><td>' +
//                        '<button type="button" class="btn btn-default btn-sm" onclick="getSignatoryForm(\'myLovModal\', \'myLovModalBody\', \'myLovModalTitle\', \'acctSignatoryForm\', \'\', \'Edit Signatory\', 13, 2.1, 5, \'EDIT\',' + rowValID + ');" style="padding:2px !important;">' +
//                        '<img src="cmn_images/edit32.png" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
//                        '</button>' +
//                        '</td><td>' +
//                        '<button type="button" class="btn btn-default btn-sm" onclick="deleteCustAccntsSignatory(' + rowValID + ',' + acctID + ',\'No\');">' +
//                        '<img src="cmn_images/delete.png" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
//                        '</button>' +
//                        '</td><td>New</td><td>' + bnkSignatory +
//                        '</td><td>' + localIDNo +
//                        '</td><td>' + toSignMndtry +
//                        '</td><td>' +
//                        '<button type="button" class="btn btn-default btn-sm" onclick="viewSignatoryForm(\'myLovModal\', \'myLovModalBody\', \'myLovModalTitle\', \'acctSignatoryForm\', \'\', \'Signatory\', 13, 2.1, 5, \'VIEW\',' + rowValID + ');" style="padding:2px !important;">' +
//                        '<img src="cmn_images/kghostview.png" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
//                        '</button>' +
//                        '</td><td style="display:none;">' + srcType +
//                        '</td><td style="display:none;">' + bnkSignatoryID +
//                        '</td><td style="display:none;">' + endDate +
//                        '</td></tr>');
//            } else {
//
//                var $tds = $('#acctSignatoryTblAddRow' + rowID).find('td');
//                $.trim($tds.eq(3).text(bnkSignatory));
//                $.trim($tds.eq(4).text(localIDNo));
//                $.trim($tds.eq(5).text(toSignMndtry));
//                $.trim($tds.eq(7).text(srcType));
//                $.trim($tds.eq(8).text(bnkSignatoryID));
//                $.trim($tds.eq(9).text(endDate));
//            }

            getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'Edit Customer Account', 13, 2.1, 0, 'EDIT', acctID, 'custAcctTable', 'indCustTableRow1', -1, function(){
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: data,
                    callback: function () {
                    }
                });    
                $body.removeClass("mdlloadingDiag");
                $('#' + elementID).modal('hide');
            });

        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=13&subPgNo=2.1&vtyp=5&q=UPDATE" +
            "&srcType=" + srcType +
            "&bnkSignatoryID=" + bnkSignatoryID +
            "&toSignMndtry=" + toSignMndtry +
            "&endDate=" + endDate +
            "&rowID=" + rowID +
            "&acctID=" + acctID+
            "&rvsnTtl=" + rvsnTtl);
}

function getSvngsPrdtDetsForAccnt(pgNo, subPgNo)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var json;
        var prdtTypeID = typeof $("#prdtTypeID").val() === 'undefined' ? -1 : $("#prdtTypeID").val();
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', 4);
        formData.append('prdtTypeID', prdtTypeID);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    json = $.parseJSON(data);
                    $("#prdtCrncy").val(json.svngsPrdtDetArry.currencyId);
                    $("#prdtCrncyIsoCode").val(json.svngsPrdtDetArry.crncyIsoCode);
                } else {
                    alert(data + " Error!");
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function deleteCustAccntsSignatory(acctSignId, acctID, isApproved)
{
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();    
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this signatory?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                if (!($("#status").val() == "Incomplete" || $("#status").val() == "Rejected" || $("#status").val() == "Withdrawn")) {
                    //alert("Error Here");
                    mnBox.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Sorry! Only Signatories Accunts with Status <b>Incomplete</b>, <b>Rejected</b> or <b>Withdrawn</b> can be deleted.",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                                getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'Edit Customer Account', 13, 2.1, 0, 'EDIT', acctID, 'custAcctTable', 'indCustTableRow1');                                  
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });                                           
                        
                        //$('table#acctSignatoryTblAdd tbody tr#acctSignatoryTblAddRow' + acctSignId).remove();
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=13&subPgNo=2.1&q=DELETE&vtyp=5&PKeyID=" + acctID + "&acctSignId=" + acctSignId+
                         "&rvsnTtl="+rvsnTtl+"&isApproved="+isApproved);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function submitWithdrawCustAccnt(pgNo, subPgNo, vtyp, actn)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var acctID = typeof $("#acctID").val() === 'undefined' ? -1 : $("#acctID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        //var qstnNoId
        //alert('chkedAssmntID'+chkedAssmntID)
        var actnTyp;
        var prmtMsg = "Are you sure you want to submit account for Approval?"
        if (actn == 'REJECT')
        {
            actnTyp = 2;
            prmtMsg = "Are you sure you want to reject this Customer Account?"
        } else if (actn == 'WITHDRAW') {
            actnTyp = 3;
            prmtMsg = "Are you sure you want to withdraw this Customer Account?"
        } else {
            actnTyp = 4;
            prmtMsg = "Are you sure you want to Authorize this Customer Account?"
        } 


        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('q', 'UPDATE');
        formData.append('vtyp', vtyp);
        formData.append('actyp', actnTyp);
        formData.append('acctID', acctID);
        formData.append('accMndte', accMndte);
        formData.append('rvsnTtl',rvsnTtl);
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    $body = $("body");
                    $body.addClass("mdlloadingDiag");
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                acctID = obj.acctID;
                            } else {
//                                if (actn == "SUBMIT") {
//
//                                    $("#withdrawCustAccountBtn").css("display", "inline-block");
//                                    $("#saveCustAccountBtn").css("display", "none");
//                                    $("#submitCustAccountBtn").css("display", "none");
//                                    $("#getSigntryBtn").css("display", "none");
//                                    $('#statusTitle').html("Initiated");
//                                    $('#status').val("Initiated");
//                                } else if (actn == "WITHDRAW") {
//
//                                    $("#withdrawCustAccountBtn").css("display", "none");
//                                    $("#saveCustAccountBtn").css("display", "inline-block");
//                                    $("#submitCustAccountBtn").css("display", "inline-block");
//                                    $("#getSigntryBtn").css("display", "block");
//                                    //$("#getSigntryBtn").css("display", "block");
//
//                                    $('#statusTitle').html("Withdrawn");
//                                    $('#status').val("Withdrawn");
//                                }

                            }
                            
                            getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'Edit Customer Account', 13, 2.1, 0, 'EDIT', acctID, 'custAcctTable', 'indCustTableRow1', -1, function(){
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: data,
                                    callback: function () { /* your callback code */
 
                                     }
                                });
                            });

//                            bootbox.alert({
//                                size: "small",
//                                title: "Rhomicom Message",
//                                message: data,
//                                callback: function () { /* your callback code */
//                                    getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'Edit Customer Account', 13, 2.1, 0, 'EDIT', acctID, 'custAcctTable', 'indCustTableRow1');
//                                }
//                            });
                            
//                            getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'Edit Customer Account', 13, 2.1, 0, 'EDIT', acctID, 'custAcctTable', 'indCustTableRow1','', function(){
//                                bootbox.alert({
//                                    size: "small",
//                                    title: "Rhomicom Message",
//                                    message: data,
//                                    callback: function () {
//                                    }
//                                });
//                            });
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function viewSignatoryForm(elementID, modalBodyID, titleElementID, formElementID, tRowElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, idSrc)
{
    /** NEW 06122017 **/
    if (idSrc === "undefined" || idSrc === "") {
        idSrc = "acctSignID";
    }

    var acctID = $('#acctID').val();
    var acctSignID = pKeyID;
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            $('#' + titleElementID).html(formTitle);
            $('#' + modalBodyID).html(xmlhttp.responseText);
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            //$body.removeClass("mdlloading");
            //$body = $("body");
            $(document).ready(function () {
                $('#' + formElementID).submit(function (e) {
                    e.preventDefault();
                    return false;
                });
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn +
            "&acctID=" + acctID +
            "&acctSignId=" + acctSignID +
            "&idSrc=" + idSrc/** NEW 06122017 **/);
}

function validateAcctTrnsSignatories() {

//alert('Hi');
//var acctSignId = -1;
    var toSignMndtry = "No";
    var signtryName = "";
    var ErrMsg = "";
    var f = 0;
    var acctSignList = [];
    var trnsSignList = [];
    var signListNms = [];
    var accMndte = typeof $("#mandate").val() === 'undefined' ? -1 : $("#mandate").val();
    var mndtySignCnta = 0;
    var signWord = "Signatory";
    var isAreWord = "is";
    if (accMndte === "Anyone to sign") {
        mndtySignCnta = 1;
    } else if (accMndte === "Any two to sign") {
        mndtySignCnta = 2;
    } else if (accMndte === "Any three to sign") {
        mndtySignCnta = 3;
    } else if (accMndte === "Any four to sign") {
        mndtySignCnta = 4;
    } else if (accMndte === "All to sign") {
        mndtySignCnta = 1;
    } else if (accMndte === "Both to sign") {
        mndtySignCnta = 2;
    } else if (accMndte === "Only to sign") {
        mndtySignCnta = 1;
    }

    if (Number(mndtySignCnta) > 1) {
        signWord = "Signatories";
        isAreWord = "are";
    }


    $('#acctSignatoriesTblAdd').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {

                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#acctSignatoriesTblAddRow_' + rndmNum).val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {
                    signtryName = $('#acctSignatoriesTblAddRow' + rndmNum + '_name').text();
                    toSignMndtry = $('#acctSignatoriesTblAddRow' + rndmNum + '_MndtrySign').text();
                    if ($('#acctSignatoriesTblAddRow_' + rndmNum).find('input[type="checkbox"]:checked').length == "1") {
                        trnsSignList[f] = "Yes";
                    } else {
                        trnsSignList[f] = "No";
                    }

                    acctSignList[f] = toSignMndtry;
                    signListNms[f] = signtryName;
                    f = f + 1;
                }
            }
        }
    });
    var mndtrySigntrsCnt = 0;
    for (var k = 0; k < acctSignList.length; k++) {
        if (acctSignList[k] === "Yes") {
            mndtrySigntrsCnt = mndtrySigntrsCnt + 1;
        }
    }

    var actualSigntrsCnt = 0;
    for (var m = 0; m < acctSignList.length; m++) {
        if (trnsSignList[m] === "Yes") {
            actualSigntrsCnt = actualSigntrsCnt + 1;
        }
    }


//1. ENSURE THAT THE AT LEAST THE MANDATORY SIGNATORIES COUNT IS MET
    if (Number(actualSigntrsCnt) < Number(mndtySignCnta)) {
        ErrMsg = ErrMsg + "<b>" + mndtySignCnta + " " + signWord + " " + isAreWord + " required but " + actualSigntrsCnt + " provided!</b></br>";
        //cnta = 2;
    }



    /*if (Number(actualSigntrsCnt) != Number(mndtrySigntrsCnt)) {
     ErrMsg = ErrMsg + "Infomation: Account mandate is <span style='color:red !important;'>" + accMndte + "</span><b>; but " + actualSigntrsCnt + " provided as signatories!</b></br>";
     //cnta = cnta + 1;
     }*/

//2. ENSURE THAT TRANSACTIONS'S CHECKED SIGNATORIES ARE MANDATED TO SIGN
    for (var j = 0; j < acctSignList.length; j++) {

//var d = cnta;

        if ((accMndte === "Anyone to sign" || accMndte === "Any two to sign" || accMndte === "Any three to sign" || accMndte === "Any four to sign")
                && (acctSignList[j] === "Yes" && trnsSignList[j] === "No")) {

//i)IF ANYONE CAN SIGN BUG SIGNATORY ONE IS NOT MANDATED TO SIGN AND SIGNS
            ErrMsg = ErrMsg + "Sorry!<b> " + signListNms[j] + "</b> has to sign!</br>";
        } else if ((accMndte === "All to sign" || accMndte === "Both to sign") && (trnsSignList[j] === "No")) {

//ii)IF ANYONE CAN SIGN BUG SIGNATORY ONE IS NOT MANDATED TO SIGN AND SIGNS
            ErrMsg = ErrMsg + "<b> " + signListNms[j] + "</b> has to sign!</br>";
        }
    }

    if (ErrMsg.trim() != "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        bootbox.alert({
            size: "small",
            title: "Validation Errors",
            message: ErrMsg,
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
//alert('Hi12');
        return true;
    }

}

//ACCOUNT LIENS
function getLienForm(elementID, modalBodyID, titleElementID, formElementID, tRowElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, callBackFunc)
{
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }    
    
    var acctID = typeof $("#acctID").val() === 'undefined' ? -1 : $("#acctID").val();
    var acctLienID = pKeyID; //$('#acctSignID').val();

    if (acctID == 'undefined' || acctID == '' || acctID == -1) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please save Account first!",
            callback: function () {
            }
        });
        return false;
    } else {


        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var xmlhttp;
        if (window.XMLHttpRequest)
        {
            /*code for IE7+, Firefox, Chrome, Opera, Safari*/
            xmlhttp = new XMLHttpRequest();
        } else
        {
            /*code for IE6, IE5*/
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
        xmlhttp.onreadystatechange = function ()
        {
            if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
            {
//alert("Hello");
                $('#' + titleElementID).html(formTitle);
                $('#' + modalBodyID).html(xmlhttp.responseText);
                /*$('.modal-content').resizable({
                 //alsoResize: ".modal-dialog",
                 minHeight: 600,
                 minWidth: 300
                 });*/
                /*$('.modal-dialog').draggable();*/
                $(function () {
                    $('.form_date').datetimepicker({
                        format: "d-M-yyyy",
                        language: 'en',
                        weekStart: 0,
                        todayBtn: true,
                        autoclose: true,
                        todayHighlight: true,
                        keyboardNavigation: true,
                        startView: 2,
                        minView: 2,
                        maxView: 4,
                        forceParse: true
                    });
                });
                if (vtyp === 5 && vtypActn === 'EDIT')
                {
                    /*Get various field element IDs and populate values*/
                    var $tds = $('#' + tRowElementID).find('td');
                    $('#lowRange').val($.trim($tds.eq(2).text()));
                    $('#highRange').val($.trim($tds.eq(3).text()));
                    $('#amountFlat').val($.trim($tds.eq(4).text()));
                    $('#amountPrcnt').val($.trim($tds.eq(5).text()));
                    $('#remarks').val($.trim($tds.eq(6).text()));
                    $('#tblRowElementID').val(tRowElementID);
                }

                $('#' + elementID).on('show.bs.modal', function (e) {
                    $(this).find('.modal-body').css({
                        'max-height': '100%'
                    });
                });
                $body.removeClass("mdlloadingDiag");
                $('#' + elementID).modal({backdrop: 'static',keyboard:false});
                //$body.removeClass("mdlloading");
                //$body = $("body");
                $(document).ready(function () {
                    $('#' + formElementID).submit(function (e) {
                        e.preventDefault();
                        return false;
                    });
                    
                    callBackFunc();
                });
            }
        };
        xmlhttp.open("POST", "index.php", true);
        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn +
                "&acctID=" + acctID +
                "&rowID=" + acctLienID);
    }
}

function saveAccountLienForm(elementID, rowID)
{
    var obj;
    $body = $("body");
    //$body.addClass("mdlloadingDiag");
    var acctID = typeof $("#acctID").val() === 'undefined' ? -1 : $("#acctID").val();
    var lienAmnt = typeof $("#lienAmnt").val() === 'undefined' ? 0 : $("#lienAmnt").val();
    var startDate = typeof $("#startDate").val() === 'undefined' ? '' : $("#startDate").val();
    var endDate = typeof $("#endDate").val() === 'undefined' ? '' : $("#endDate").val();
    var narration = typeof $("#narration").val() === 'undefined' ? '' : $("#narration").val();
    var lienStatus = typeof $("#lienStatus").val() === 'undefined' ? 'Incomplete' : $("#lienStatus").val();
    var tRowElementID = typeof $("#tblRowElementID").val() === 'undefined' ? -1 : $("#tblRowElementID").val();
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
    var p_startDate;
    var pday_SD;
    var pmonth_SD;
    var pyear_SD;
    var p_endDate;
    var pday_ED;
    var pmonth_ED;
    var pyear_ED;
    var today = new Date();
    var pday_TD = today.getDate();
    var pmonth_TD = today.getMonth() + 1;
    var pyear_TD = today.getFullYear();
    if (startDate != "") {
        p_startDate = new Date(startDate);
        pday_SD = p_startDate.getDate();
        pmonth_SD = p_startDate.getMonth() + 1;
        pyear_SD = p_startDate.getFullYear();
    }

    if (endDate != "") {
        p_endDate = new Date(endDate);
        pday_ED = p_endDate.getDate();
	if(pday_ED < 10){
            pday_ED = '0'+pday_ED;
        }
        pmonth_ED = p_endDate.getMonth() + 1;
        pyear_ED = p_endDate.getFullYear();
    }


    if ((lienAmnt == "" || Number(lienAmnt) <= 0) && lienStatus != "Remove") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $('#myLovModalTitle99').html('Rhomicom Message');
        $('#myLovModalBody99').html("<span style='color:red !important;'><b>Lien Amount must be greater than zero!</b></span>");  
        $('#myLovModal99').modal('show', {backdrop: 'static'});         
        return false;
    } else if (startDate == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $('#myLovModalTitle99').html('Rhomicom Message');
        $('#myLovModalBody99').html("<span style='color:red !important;'><b>Please provide lien start date!</b></span>");  
        $('#myLovModal99').modal('show', {backdrop: 'static'});         
        return false;
    } /*else if (startDate != "" && (pyear_TD + "-" + pmonth_TD + "-" + pday_TD > pyear_SD + "-" + pmonth_SD + "-" + pday_SD)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $('#myLovModalTitle99').html('Rhomicom Message');
        $('#myLovModalBody99').html("<span style='color:red !important;'><b>Lien Start Date must be greater than or equal to today's date!</b></span>");  
        $('#myLovModal99').modal('show', {backdrop: 'static'});         
        return false;
    } else if (endDate != "" && (pyear_TD + "-" + pmonth_TD + "-" + pday_TD > pyear_ED + "-" + pmonth_ED + "-" + pday_ED)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $('#myLovModalTitle99').html('Rhomicom Message');
        $('#myLovModalBody99').html("<span style='color:red !important;'><b>Lien End Date must be greater than or equal to today's date!</b></span>");  
        $('#myLovModal99').modal('show', {backdrop: 'static'});          
        return false;
    } */else if (startDate != "" && endDate != "" && p_startDate > p_endDate) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $('#myLovModalTitle99').html('Rhomicom Message');
        $('#myLovModalBody99').html("<span style='color:red !important;'><b>Lien End Date must be greater than Start date!</b></span>");  
        $('#myLovModal99').modal('show', {backdrop: 'static'});         
        return false;
    } else if (narration.trim() == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $('#myLovModalTitle99').html('Rhomicom Message');
        $('#myLovModalBody99').html("<span style='color:red !important;'><b>Please provide a comprehensive narration for this Lien!</b></span>");  
        $('#myLovModal99').modal('show', {backdrop: 'static'});         
        return false;
    }

    $('#myLovModal').modal('hide');

    if (endDate == "") {
        endDate = "31-Dec-4000";
    }
    
    box = bootbox.dialog({size: "small",
        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> <span style="color:green;"><b>Saving. Please Wait...</b></span></div>'});
    box.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b) / 2;
            return h + "px";
        }
    });    

    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            var msg = "";
            var data = xmlhttp.responseText;
            var rowValID = -1;
            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                obj = $.parseJSON(data);
                //SET ROW ID
                var rowValID = obj.rowID;
                //var lienIDNo = obj.lienIDNo;
                
                getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'Edit Customer Account', 13, 2.1, 0, 'EDIT', acctID, 'custAcctTable', 'indCustTableRow1', -1, function(){
                    box.modal('hide');	
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: obj.lnMsg,
                        callback: function () {
                        }
                    });    
                    $body.removeClass("mdlloadingDiag");
                    $('#' + elementID).modal('hide');
                });                 
            } else {
                getLienForm('myLovModal', 'myLovModalBody', 'myLovModalTitle', 'acctLienForm', '', 'Edit Lien', 13, 2.1, 6, 'EDIT', rowID, function(){
                    box.modal('hide');	
                    $('#myLovModalTitle99').html('Rhomicom Message');
                    $('#myLovModalBody99').html("<span style='color:red !important;'><b>"+data+"</b></span>");  
                    $('#myLovModal99').modal('show', {backdrop: 'static'});  
//                    bootbox.alert({
//                        size: "small",
//                        title: "Rhomicom Message",
//                        message: data,
//                        callback: function () {
//                        }
//                    });
                });	
            }
                       
            
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=13&subPgNo=2.1&vtyp=6&q=UPDATE" +
            "&lienAmnt=" + fmtAsNumberLcl(lienAmnt) +
            "&startDate=" + startDate +
            "&endDate=" + endDate +
            "&narration=" + narration +
            "&rowID=" + rowID +
            "&acctID=" + acctID+
            "&rvsnTtl=" + rvsnTtl +
            "&lienStatus="+lienStatus);
}

function deleteCustLienRcrd(acctLienId, acctID, lienStatus, isApproved)
{
    var box;
    var box2;
    var mnBox;
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();   
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Lien?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                if (!(lienStatus == "Inactive")) {
                    mnBox.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Sorry! Only Liens with Status <b>Inactive</b> can be deleted.",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        //box.modal('hide');
                        getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'Edit Customer Account', 13, 2.1, 0, 'EDIT', acctID, 'custAcctTable', 'indCustTableRow1', -1, function(){
                            box.modal('hide');	
                            box2 = bootbox.alert({
                                 size: "small",
                                 title: "Rhomicom Message",
                                 message: data,
                                 callback: function () { /* your callback code */
                                 }
                             });
                             box2.find('.modal-content').css({
                                 'margin-top': function () {
                                     var w = $(window).height();
                                     var b = $(".modal-dialog").height();
                                     // should not be (w-h)/2
                                     var h = (w - b - 150) / 2;
                                     return h + "px";
                                 }
                             });
                        });                        


                        //$('table#acctLiensTblAdd tbody tr#acctLiensTblAddRow' + acctLienId).remove();
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=13&subPgNo=2.1&q=DELETE&vtyp=6&PKeyID=" + acctID + "&acctLienId=" + acctLienId+
                        "&rvsnTtl="+rvsnTtl+"&isApproved="+isApproved+"&lienStatus="+lienStatus);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

//STANDARD EVENTS ACCOUNTING
function saveSvngsPrdtStdAcctnEvents(pgNo, subPgNo, vtyp)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var obj;
        var prdtID = typeof $("#prdtID").val() === 'undefined' ? -1 : $("#prdtID").val();
        var svngsAccntnEvntId = typeof $("#svngsAccntnEvntId").val() === 'undefined' ? -1 : $("#svngsAccntnEvntId").val().trim().length === 0 ? -1 : $("#svngsAccntnEvntId").val();
        var cashDepositDbtAccID = typeof $("#cashDepositDbtAccID").val() === 'undefined' ? -1 : $("#cashDepositDbtAccID").val().trim().length === 0 ? -1 : $("#cashDepositDbtAccID").val();
        var cashDepositCrdtAccID = typeof $("#cashDepositCrdtAccID").val() === 'undefined' ? -1 : $("#cashDepositCrdtAccID").val().trim().length === 0 ? -1 : $("#cashDepositCrdtAccID").val();
        var chqDepositDbtAccID = typeof $("#chqDepositDbtAccID").val() === 'undefined' ? -1 : $("#chqDepositDbtAccID").val().trim().length === 0 ? -1 : $("#chqDepositDbtAccID").val();
        var chqDepositCrdtAccID = typeof $("#chqDepositCrdtAccID").val() === 'undefined' ? -1 : $("#chqDepositCrdtAccID").val().trim().length === 0 ? -1 : $("#chqDepositCrdtAccID").val();
        var cashWtdwlDbtAccID = typeof $("#cashWtdwlDbtAccID").val() === 'undefined' ? -1 : $("#cashWtdwlDbtAccID").val().trim().length === 0 ? -1 : $("#cashWtdwlDbtAccID").val();
        var cashWtdwlCrdtAccID = typeof $("#cashWtdwlCrdtAccID").val() === 'undefined' ? -1 : $("#cashWtdwlCrdtAccID").val().trim().length === 0 ? -1 : $("#cashWtdwlCrdtAccID").val();
        var entryFeesDbtAccID = typeof $("#entryFeesDbtAccID").val() === 'undefined' ? -1 : $("#entryFeesDbtAccID").val().trim().length === 0 ? -1 : $("#entryFeesDbtAccID").val();
        var entryFeesCrdtAccID = typeof $("#entryFeesCrdtAccID").val() === 'undefined' ? -1 : $("#entryFeesCrdtAccID").val().trim().length === 0 ? -1 : $("#entryFeesCrdtAccID").val();
        var closeFeesDbtAccID = typeof $("#closeFeesDbtAccID").val() === 'undefined' ? -1 : $("#closeFeesDbtAccID").val().trim().length === 0 ? -1 : $("#closeFeesDbtAccID").val();
        var closeFeesCrdtAccID = typeof $("#closeFeesCrdtAccID").val() === 'undefined' ? -1 : $("#closeFeesCrdtAccID").val().trim().length === 0 ? -1 : $("#closeFeesCrdtAccID").val();
        var reopenFeesDbtAccID = typeof $("#reopenFeesDbtAccID").val() === 'undefined' ? -1 : $("#reopenFeesDbtAccID").val().trim().length === 0 ? -1 : $("#reopenFeesDbtAccID").val();
        var reopenFeesCrdtAccID = typeof $("#reopenFeesCrdtAccID").val() === 'undefined' ? -1 : $("#reopenFeesCrdtAccID").val().trim().length === 0 ? -1 : $("#reopenFeesCrdtAccID").val();
        var wtdwlPnltyFlatDbtAccID = typeof $("#wtdwlPnltyFlatDbtAccID").val() === 'undefined' ? -1 : $("#wtdwlPnltyFlatDbtAccID").val().trim().length === 0 ? -1 : $("#wtdwlPnltyFlatDbtAccID").val();
        var wtdwlPnltyFlatCrdtAccID = typeof $("#wtdwlPnltyFlatCrdtAccID").val() === 'undefined' ? -1 : $("#wtdwlPnltyFlatCrdtAccID").val().trim().length === 0 ? -1 : $("#wtdwlPnltyFlatCrdtAccID").val();
        var wtdwlPnltyPrcntDbtAccID = typeof $("#wtdwlPnltyPrcntDbtAccID").val() === 'undefined' ? -1 : $("#wtdwlPnltyPrcntDbtAccID").val().trim().length === 0 ? -1 : $("#wtdwlPnltyPrcntDbtAccID").val();
        var wtdwlPnltyPrcntCrdtAccID = typeof $("#wtdwlPnltyPrcntCrdtAccID").val() === 'undefined' ? -1 : $("#wtdwlPnltyPrcntCrdtAccID").val().trim().length === 0 ? -1 : $("#wtdwlPnltyPrcntCrdtAccID").val();
        var cotFeeFlatDbtAccID = typeof $("#cotFeeFlatDbtAccID").val() === 'undefined' ? -1 : $("#cotFeeFlatDbtAccID").val().trim().length === 0 ? -1 : $("#cotFeeFlatDbtAccID").val();
        var cotFeeFlatCrdtAccID = typeof $("#cotFeeFlatCrdtAccID").val() === 'undefined' ? -1 : $("#cotFeeFlatCrdtAccID").val().trim().length === 0 ? -1 : $("#cotFeeFlatCrdtAccID").val();
        var invstmntFeeDbtAccID = typeof $("#invstmntFeeDbtAccID").val() === 'undefined' ? -1 : $("#invstmntFeeDbtAccID").val().trim().length === 0 ? -1 : $("#invstmntFeeDbtAccID").val();
        var invstmntFeeCrdtAccID = typeof $("#invstmntFeeCrdtAccID").val() === 'undefined' ? -1 : $("#invstmntFeeCrdtAccID").val().trim().length === 0 ? -1 : $("#invstmntFeeCrdtAccID").val();
        var interesPyblDbtAccID = typeof $("#interesPyblDbtAccID").val() === 'undefined' ? -1 : $("#interesPyblDbtAccID").val().trim().length === 0 ? -1 : $("#interesPyblDbtAccID").val();
        var interesPyblCrdtAccID = typeof $("#interesPyblCrdtAccID").val() === 'undefined' ? -1 : $("#interesPyblCrdtAccID").val().trim().length === 0 ? -1 : $("#interesPyblCrdtAccID").val();
        var interesExpenseDbtAccID = typeof $("#interesExpenseDbtAccID").val() === 'undefined' ? -1 : $("#interesExpenseDbtAccID").val().trim().length === 0 ? -1 : $("#interesExpenseDbtAccID").val();
        var interesExpenseCrdtAccID = typeof $("#interesExpenseCrdtAccID").val() === 'undefined' ? -1 : $("#interesExpenseCrdtAccID").val().trim().length === 0 ? -1 : $("#interesExpenseCrdtAccID").val();
        //var formData = new FormData($(this)[0]);
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('svngsAccntnEvntId', svngsAccntnEvntId);
        formData.append('cashDepositDbtAccID', cashDepositDbtAccID);
        formData.append('cashDepositCrdtAccID', cashDepositCrdtAccID);
        formData.append('chqDepositDbtAccID', chqDepositDbtAccID);
        formData.append('chqDepositCrdtAccID', chqDepositCrdtAccID);
        formData.append('cashWtdwlDbtAccID', cashWtdwlDbtAccID);
        formData.append('cashWtdwlCrdtAccID', cashWtdwlCrdtAccID);
        formData.append('entryFeesDbtAccID', entryFeesDbtAccID);
        formData.append('entryFeesCrdtAccID', entryFeesCrdtAccID);
        formData.append('closeFeesDbtAccID', closeFeesDbtAccID);
        formData.append('closeFeesCrdtAccID', closeFeesCrdtAccID);
        formData.append('reopenFeesDbtAccID', reopenFeesDbtAccID);
        formData.append('reopenFeesCrdtAccID', reopenFeesCrdtAccID);
        formData.append('wtdwlPnltyFlatDbtAccID', wtdwlPnltyFlatDbtAccID);
        formData.append('wtdwlPnltyFlatCrdtAccID', wtdwlPnltyFlatCrdtAccID);
        formData.append('wtdwlPnltyPrcntDbtAccID', wtdwlPnltyPrcntDbtAccID);
        formData.append('wtdwlPnltyPrcntCrdtAccID', wtdwlPnltyPrcntCrdtAccID);
        formData.append('cotFeeFlatDbtAccID', cotFeeFlatDbtAccID);
        formData.append('cotFeeFlatCrdtAccID', cotFeeFlatCrdtAccID);
        formData.append('invstmntFeeDbtAccID', invstmntFeeDbtAccID);
        formData.append('invstmntFeeCrdtAccID', invstmntFeeCrdtAccID);
        formData.append('interesPyblDbtAccID', interesPyblDbtAccID);
        formData.append('interesPyblCrdtAccID', interesPyblCrdtAccID);
        formData.append('interesExpenseDbtAccID', interesExpenseDbtAccID);
        formData.append('interesExpenseCrdtAccID', interesExpenseCrdtAccID);
        formData.append('prdtID', prdtID);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    $("#svngsAccntnEvntId").val(obj.svngsAccntnEvntId);
                    //SHOW EXTRA TABS
                    $("#standardEvtns").css("display", "block");
                    $("#customEvnts").css("display", "block");
                    msg = "Savings Product Event Accounting Successfully Saved!";
                } else {

                    msg = data;
                }

                //obj =  JSON.parse(data); //$.parseJSON(data);//

                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: msg,
                    callback: function () { /* your callback code */
                    }
                });
            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}



//CREDIT MANAGEMENT
/** NEW FUNCTIONS 07062017 **/
function resetLoanCalculator() {

}

function deleteGrpMember(memberID, custStatus, isApproved)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Member?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                if (!(custStatus == "Incomplete" || custStatus == "Rejected" || custStatus == "Withdrawn")) {
                    mnBox.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Sorry! Only Members of Groups with Status <b>Incomplete</b>, <b>Rejected</b> or <b>Withdrawn</b> can be deleted.",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var custID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
                var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'EDIT CORPORATE CUSTOMER PROFILE', 11, 1.3, 0, 'EDIT', custID, 'EDIT', 'indCustTableRow1', -1, function () {

                        });
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=11&subPgNo=1.3&q=DELETE&actyp=1&PKeyID=" + memberID + "&custStatus=" + custStatus
                        +"&custID=" + custID + "&rvsnTtl="+rvsnTtl+"&isApproved="+isApproved);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function saveGrpMemberForm(elementID, rowID, mode)
{
    var obj;
    var box;
    var box2;
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var custID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
    var mbrPstn = typeof $("#mbrPstn").val() === 'undefined' ? '' : $("#mbrPstn").val();
    var memberID = typeof $("#memberID").val() === 'undefined' ? -1 : $("#memberID").val();
    var memberNm = typeof $("#member").val() === 'undefined' ? '' : $("#member").val();
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
    var startDateActive = typeof $("#startDateActive").val() === 'undefined' ? '' : $("#startDateActive").val();
    var endDateActive = typeof $("#endDateActive").val() === 'undefined' ? '' : $("#endDateActive").val();
    if (memberID == "" || memberID == -1) {
        $body.removeClass("mdlloadingDiag");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a Director first",
            callback: function () {
            }
        });
        return false;
    } else if (startDateActive == "" || startDateActive == "undefined") {
        $body.removeClass("mdlloadingDiag");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Enter a Start Date for this relationship",
            callback: function () {
            }
        });
        return false;
    }
    var vld = true;   
    var vldMsg = "";
    
    if (mode == "ADD") {
        $('table#grpMemberTblAdd tr').each(function () {
            if ($.trim($(this).find("td:eq(3)").text()) == $.trim(memberNm)) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                vldMsg = "Member "+memberNm.toUpperCase()+" already exists for this group. Please select another Member!";
                vld = false;
                return false;
            }
            if ($.trim($(this).find("td:eq(4)").text()) == $.trim(mbrPstn) && mbrPstn.toUpperCase() != "MEMBER") {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                
                vldMsg = "Position "+mbrPstn.toUpperCase()+" already exists for this group. Please select another Position!";
                vld = false;
                return false;
                
            }            

        });
    }
    
    if (vld == false)
    {
        $('#myLovModalTitle99').html('Rhomicom Message');
        $('#myLovModalBody99').html("<span style='color:red !important;'><b>"+vldMsg+"</b></span>");  
        $('#myLovModal99').modal('show', {backdrop: 'static'});            

        return false;
    }    
    

    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            var msg = "";
            var data = xmlhttp.responseText;
            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                obj = $.parseJSON(data);
                $('#' + elementID).modal('hide');
                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'EDIT CUSTOMER GROUP PROFILE', 11, 1.3, 0, 'EDIT', custID, 'EDIT', 'indCustTableRow1', -1, function () {
                    $body.removeClass("mdlloadingDiag");
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Successfully Saved Director",
                        callback: function () {
                        }
                    });
                });
            } else {
                $body.removeClass("mdlloadingDiag");
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: data,
                    callback: function () {
                    }
                });
                return false;
            }




        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=11&subPgNo=1.3&vtyp=5&q=UPDATE" +
            "&memberID=" + memberID +
            "&rowID=" + rowID +
            "&custID=" + custID +
            "&mbrPstn=" + mbrPstn +
            "&startDateActive=" + startDateActive +
            "&endDateActive=" + endDateActive+
            "&rvsnTtl="+rvsnTtl);
}

function getGrpMembers() {
//criteriaID2 = "custTypeIndividual";
    getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'Bank Individual Customers', 'gnrlOrgID', '', '', 'radio', true, '', 'memberID', 'member', 'clear', 1, '', function () {

    });
}


function deleteCorpDirector(directorID, custStatus, isApproved)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Director?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                if (!(custStatus == "Incomplete" || custStatus == "Rejected" || custStatus == "Withdrawn")) {
                    mnBox.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Sorry! Only Directors for Customers with Status <b>Incomplete</b>, <b>Rejected</b> or <b>Withdrawn</b> can be deleted.",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var custID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
                var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'EDIT CORPORATE CUSTOMER PROFILE', 11, 1.2, 0, 'EDIT', custID, 'EDIT', 'indCustTableRow1', -1, function () {

                        });
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=11&subPgNo=1.2&q=DELETE&actyp=1&PKeyID=" + directorID + "&custStatus=" + custStatus
                        +"&custID=" + custID + "&rvsnTtl="+rvsnTtl+"&isApproved="+isApproved);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function saveCorpDirectorForm(elementID, rowID)
{
    var obj;
    var box;
    var box2;
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var custID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
    var srcType = typeof $("#srcType").val() === 'undefined' ? '' : $("#srcType").val();
    var directorID = typeof $("#directorID").val() === 'undefined' ? -1 : $("#directorID").val();
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
    var startDateActive = typeof $("#startDateActive").val() === 'undefined' ? '' : $("#startDateActive").val();
    var endDateActive = typeof $("#endDateActive").val() === 'undefined' ? '' : $("#endDateActive").val();
    if (directorID == "" || directorID == -1) {
        $body.removeClass("mdlloadingDiag");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a Director first",
            callback: function () {
            }
        });
        return false;
    } else if (startDateActive == "" || startDateActive == "undefined") {
        $body.removeClass("mdlloadingDiag");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Enter a Start Date for this relationship",
            callback: function () {
            }
        });
        return false;
    }

    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            var msg = "";
            var data = xmlhttp.responseText;
            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                obj = $.parseJSON(data);
                $('#' + elementID).modal('hide');
                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'EDIT CORPORATE CUSTOMER PROFILE', 11, 1.2, 0, 'EDIT', custID, 'EDIT', 'indCustTableRow1', -1, function () {
                    $body.removeClass("mdlloadingDiag");
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Successfully Saved Director",
                        callback: function () {
                        }
                    });
                });
            } else {
                $body.removeClass("mdlloadingDiag");
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: data,
                    callback: function () {
                    }
                });
                return false;
            }




        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=11&subPgNo=1.2&vtyp=5&q=UPDATE" +
            "&directorID=" + directorID +
            "&rowID=" + rowID +
            "&custID=" + custID +
            "&srcType=" + srcType +
            "&startDateActive=" + startDateActive +
            "&endDateActive=" + endDateActive+
            "&rvsnTtl=" + rvsnTtl);
}

function getCorpDirectors() {
    var srcType = $('#srcType').val();
    var lovName = "Bank Individual Customers";
    var extraWhere = " AND 1 = 1";
    var criteriaID2 = "custTypeIndividual";
    if (srcType === "Other Persons") {
        //lovName = "MCF Bank Other Persons - Directors";
        lovName = "MCF Bank Other Persons - Directors, Joint and Trust Persons";
        //criteriaID2 = "relation";
        //getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'gnrlOrgID', criteriaID2, '', 'radio', true, '', 'directorID', 'director', 'clear', 1, extraWhere);
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'gnrlOrgID', '', '', 'radio', true, '', 'directorID', 'director', 'clear', 1, extraWhere);
    } else {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'gnrlOrgID', criteriaID2, '', 'radio', true, '', 'directorID', 'director', 'clear', 1, extraWhere);
    }
}

function getcorpDirectorForm(elementID, modalBodyID, titleElementID, formElementID, tRowElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID)
{
    var custID = $('#custID').val();
    var corpDirectorID = pKeyID;
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
    if (custID === 'undefined' || custID === '' || custID === -1) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please save Customer first!",
            callback: function () {
            }
        });
        return false;
    } else {


        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var xmlhttp;
        if (window.XMLHttpRequest)
        {
            /*code for IE7+, Firefox, Chrome, Opera, Safari*/
            xmlhttp = new XMLHttpRequest();
        } else
        {
            /*code for IE6, IE5*/
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
        xmlhttp.onreadystatechange = function ()
        {
            if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
            {
//alert("Hello");
                $('#' + titleElementID).html(formTitle);
                $('#' + modalBodyID).html(xmlhttp.responseText);
                $('#' + elementID).off('hidden.bs.modal');
                $('#' + elementID).one('hidden.bs.modal', function (e) {
                    $('#' + titleElementID).html('');
                    $('#' + modalBodyID).html('');
                    $(e.currentTarget).unbind();
                });
                /*$('.modal-content').resizable({
                 //alsoResize: ".modal-dialog",
                 minHeight: 600,
                 minWidth: 300
                 });*/
                /*$('.modal-dialog').draggable();*/
                $(function () {
                    $('.form_date').datetimepicker({
                        format: "d-M-yyyy",
                        language: 'en',
                        weekStart: 0,
                        todayBtn: true,
                        autoclose: true,
                        todayHighlight: true,
                        keyboardNavigation: true,
                        startView: 2,
                        minView: 2,
                        maxView: 4,
                        forceParse: true
                    });
                });
                if (vtyp === 5 && vtypActn === 'EDIT')
                {
                    /*Get various field element IDs and populate values*/
                    var $tds = $('#' + tRowElementID).find('td');
                    $('#lowRange').val($.trim($tds.eq(2).text()));
                    $('#highRange').val($.trim($tds.eq(3).text()));
                    $('#amountFlat').val($.trim($tds.eq(4).text()));
                    $('#amountPrcnt').val($.trim($tds.eq(5).text()));
                    $('#remarks').val($.trim($tds.eq(6).text()));
                    $('#tblRowElementID').val(tRowElementID);
                }

                $('#' + elementID).on('show.bs.modal', function (e) {
                    $(this).find('.modal-body').css({
                        'max-height': '100%'
                    });
                });
                $body.removeClass("mdlloadingDiag");
                $('#' + elementID).modal({backdrop: 'static',keyboard:false});
                //$body.removeClass("mdlloading");
                //$body = $("body");
                $(document).ready(function () {
                    $('#' + formElementID).submit(function (e) {
                        e.preventDefault();
                        return false;
                    });
                });
            }
        };
        xmlhttp.open("POST", "index.php", true);
        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn +
                "&custID=" + custID +
                "&rowID=" + corpDirectorID + "&rvsnTtl=" + rvsnTtl);
    }
}

function saveBasicDataCorp(pgNo, subPgNo, vtyp, shdSbmt)
{
    var box;
    var box2;
    var pActiveTab = $('.nav-tabs .active').text();

    var myFormPage = 1;
    //var $this = $("#cageTrnstab");
    //$this.tab('show');        

    //if(pActiveTab == "All Apps/Modules  13Additional Data"){
    if(pActiveTab.indexOf('Additional Data') >= 0) {
        myFormPage = 2;
    }     
    
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        //$body.addClass("mdlloadingDiag");
        


        var obj;
        var profileID = typeof $("#profileID").val() === 'undefined' ? -1 : $("#profileID").val();
        var custID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
        var idNo = typeof $("#idNo").val() === 'undefined' ? '' : $("#idNo").val();
        var clsfctn = typeof $("#clsfctn").val() === 'undefined' ? '' : $("#clsfctn").val();
        var custName = typeof $("#custName").val() === 'undefined' ? '' : $("#custName").val();
        var natureOfBus = typeof $("#natureOfBus").val() === 'undefined' ? '' : $("#natureOfBus").val();
        var relation = typeof $("#relation").val() === 'undefined' ? '' : $("#relation").val();
        var dateOfEstblshmnt = typeof $("#dateOfEstblshmnt").val() === 'undefined' ? '' : $("#dateOfEstblshmnt").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? '' : $("#bnkBranchID").val();
        var startDate = typeof $("#startDate").val() === 'undefined' ? '' : $("#startDate").val();
        var endDate = typeof $("#endDate").val() === 'undefined' ? '' : $("#endDate").val();
        var pstlAddress = typeof $("#pstlAddress").val() === 'undefined' ? '' : $("#pstlAddress").val();
        var resAddress = typeof $("#resAddress").val() === 'undefined' ? '' : $("#resAddress").val();
        var email = typeof $("#email").val() === 'undefined' ? '' : $("#email").val();
        var contactNos = typeof $("#contactNos").val() === 'undefined' ? '' : $("#contactNos").val();
        var faxNo = typeof $("#faxNo").val() === 'undefined' ? '' : $("#faxNo").val();
        var brandName = typeof $("#brandName").val() === 'undefined' ? '' : $("#brandName").val();
        var orgType = typeof $("#orgType").val() === 'undefined' ? '' : $("#orgType").val();
        var regNo = typeof $("#regNo").val() === 'undefined' ? '' : $("#regNo").val();
        var dateOfIncorp = typeof $("#dateOfIncorp").val() === 'undefined' ? '' : $("#dateOfIncorp").val();
        var typeOfIncorp = typeof $("#typeOfIncorp").val() === 'undefined' ? '' : $("#typeOfIncorp").val();
        var vatNo = typeof $("#vatNo").val() === 'undefined' ? '' : $("#vatNo").val();
        var tinNo = typeof $("#tinNo").val() === 'undefined' ? '' : $("#tinNo").val();
        var ssnitRegNo = typeof $("#ssnitRegNo").val() === 'undefined' ? '' : $("#ssnitRegNo").val();
        var noOfEmp = typeof $("#noOfEmp").val() === 'undefined' ? 0 : $("#noOfEmp").val().trim().length === 0 ? 0 : $("#noOfEmp").val();
        var meetingDaysArray = $('#meetingDays option:selected').map(function () {
            return $(this).val(); ///text();
        }).get();
        var meetingDays = meetingDaysArray;
        //VALIDATIONS
        var rslt = validateCorpCustomerForm(custName, natureOfBus, dateOfEstblshmnt, startDate, resAddress,
                email, contactNos, brandName, regNo, dateOfIncorp, tinNo, noOfEmp, meetingDays, subPgNo);
        if (!rslt) {
            return false;
        }
        
        var mbrTyp = "Director";
        if (subPgNo == 1.3) {
            mbrTyp = "Member of Group";
        }        
        
        if (shdSbmt > 0 && $('#grpMemberTblAdd > tbody > tr').length <= 0) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "<span style='color:red; font-weight:bold !important;'><i>Please provide at least One(1) "+mbrTyp+"</i></span>",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }  
        
        if(subPgNo == 1.3){
            var grpMnbrCnt = $('#grpMemberTblAdd > tbody > tr').length;
            //alert("grpMnbrCnt="+grpMnbrCnt+" noOfEmp="+noOfEmp);
            if(shdSbmt > 0 && (parseFloat(grpMnbrCnt) != parseFloat(noOfEmp))){
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "<span style='color:red; font-weight:bold !important;'><i>Group Members Count (<b>"+grpMnbrCnt+"</b>) must equal Group Size <b>"+noOfEmp+"</b></i></span>",
                    callback: function () { /* your callback code */
                    }
                });
                return false;                
            }
        }

        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var srcType = "Corporate Customer";
        if (subPgNo == 1.3) {
            srcType = "Customer Group";
        }

        var addtnlCstmrDataCol1 = typeof $("#addtnlCstmrDataCol1").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol1").val();
        var addtnlCstmrDataCol2 = typeof $("#addtnlCstmrDataCol2").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol2").val();
        var addtnlCstmrDataCol3 = typeof $("#addtnlCstmrDataCol3").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol3").val();
        var addtnlCstmrDataCol4 = typeof $("#addtnlCstmrDataCol4").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol4").val();
        var addtnlCstmrDataCol5 = typeof $("#addtnlCstmrDataCol5").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol5").val();
        var addtnlCstmrDataCol6 = typeof $("#addtnlCstmrDataCol6").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol6").val();
        var addtnlCstmrDataCol7 = typeof $("#addtnlCstmrDataCol7").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol7").val();
        var addtnlCstmrDataCol8 = typeof $("#addtnlCstmrDataCol8").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol8").val();
        var addtnlCstmrDataCol9 = typeof $("#addtnlCstmrDataCol9").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol9").val();
        var addtnlCstmrDataCol10 = typeof $("#addtnlCstmrDataCol10").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol10").val();
        var addtnlCstmrDataCol11 = typeof $("#addtnlCstmrDataCol11").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol11").val();
        var addtnlCstmrDataCol12 = typeof $("#addtnlCstmrDataCol12").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol12").val();
        var addtnlCstmrDataCol13 = typeof $("#addtnlCstmrDataCol13").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol13").val();
        var addtnlCstmrDataCol14 = typeof $("#addtnlCstmrDataCol14").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol14").val();
        var addtnlCstmrDataCol15 = typeof $("#addtnlCstmrDataCol15").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol15").val();
        var addtnlCstmrDataCol16 = typeof $("#addtnlCstmrDataCol16").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol16").val();
        var addtnlCstmrDataCol17 = typeof $("#addtnlCstmrDataCol17").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol17").val();
        var addtnlCstmrDataCol18 = typeof $("#addtnlCstmrDataCol18").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol18").val();
        var addtnlCstmrDataCol19 = typeof $("#addtnlCstmrDataCol19").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol19").val();
        var addtnlCstmrDataCol20 = typeof $("#addtnlCstmrDataCol20").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol20").val();
        var addtnlCstmrDataCol21 = typeof $("#addtnlCstmrDataCol21").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol21").val();
        var addtnlCstmrDataCol22 = typeof $("#addtnlCstmrDataCol22").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol22").val();
        var addtnlCstmrDataCol23 = typeof $("#addtnlCstmrDataCol23").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol23").val();
        var addtnlCstmrDataCol24 = typeof $("#addtnlCstmrDataCol24").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol24").val();
        var addtnlCstmrDataCol25 = typeof $("#addtnlCstmrDataCol25").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol25").val();
        var addtnlCstmrDataCol26 = typeof $("#addtnlCstmrDataCol26").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol26").val();
        var addtnlCstmrDataCol27 = typeof $("#addtnlCstmrDataCol27").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol27").val();
        var addtnlCstmrDataCol28 = typeof $("#addtnlCstmrDataCol28").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol28").val();
        var addtnlCstmrDataCol29 = typeof $("#addtnlCstmrDataCol29").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol29").val();
        var addtnlCstmrDataCol30 = typeof $("#addtnlCstmrDataCol30").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol30").val();
        var addtnlCstmrDataCol31 = typeof $("#addtnlCstmrDataCol31").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol31").val();
        var addtnlCstmrDataCol32 = typeof $("#addtnlCstmrDataCol32").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol32").val();
        var addtnlCstmrDataCol33 = typeof $("#addtnlCstmrDataCol33").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol33").val();
        var addtnlCstmrDataCol34 = typeof $("#addtnlCstmrDataCol34").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol34").val();
        var addtnlCstmrDataCol35 = typeof $("#addtnlCstmrDataCol35").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol35").val();
        var addtnlCstmrDataCol36 = typeof $("#addtnlCstmrDataCol36").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol36").val();
        var addtnlCstmrDataCol37 = typeof $("#addtnlCstmrDataCol37").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol37").val();
        var addtnlCstmrDataCol38 = typeof $("#addtnlCstmrDataCol38").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol38").val();
        var addtnlCstmrDataCol39 = typeof $("#addtnlCstmrDataCol39").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol39").val();
        var addtnlCstmrDataCol40 = typeof $("#addtnlCstmrDataCol40").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol40").val();
        var addtnlCstmrDataCol41 = typeof $("#addtnlCstmrDataCol41").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol41").val();
        var addtnlCstmrDataCol42 = typeof $("#addtnlCstmrDataCol42").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol42").val();
        var addtnlCstmrDataCol43 = typeof $("#addtnlCstmrDataCol43").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol43").val();
        var addtnlCstmrDataCol44 = typeof $("#addtnlCstmrDataCol44").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol44").val();
        var addtnlCstmrDataCol45 = typeof $("#addtnlCstmrDataCol45").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol45").val();
        var addtnlCstmrDataCol46 = typeof $("#addtnlCstmrDataCol46").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol46").val();
        var addtnlCstmrDataCol47 = typeof $("#addtnlCstmrDataCol47").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol47").val();
        var addtnlCstmrDataCol48 = typeof $("#addtnlCstmrDataCol48").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol48").val();
        var addtnlCstmrDataCol49 = typeof $("#addtnlCstmrDataCol49").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol49").val();
        var addtnlCstmrDataCol50 = typeof $("#addtnlCstmrDataCol50").val() === 'undefined' ? '' : $("#addtnlCstmrDataCol50").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        //var formData = new FormData($(this)[0]);
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('profileID', profileID);
        formData.append('custID', custID);
        formData.append('idNo', idNo);
        formData.append('clsfctn', clsfctn);
        formData.append('custName', custName);
        formData.append('natureOfBus', natureOfBus);
        formData.append('relation', relation);
        formData.append('dateOfEstblshmnt', dateOfEstblshmnt);
        formData.append('bnkBranchID', bnkBranchID);
        formData.append('startDate', startDate);
        formData.append('endDate', endDate);
        formData.append('pstlAddress', pstlAddress);
        formData.append('resAddress', resAddress);
        formData.append('email', email);
        formData.append('contactNos', contactNos);
        formData.append('faxNo', faxNo);
        formData.append('brandName', brandName);
        formData.append('orgType', orgType);
        formData.append('regNo', regNo);
        formData.append('dateOfIncorp', dateOfIncorp);
        formData.append('typeOfIncorp', typeOfIncorp);
        formData.append('vatNo', vatNo);
        formData.append('tinNo', tinNo);
        formData.append('ssnitRegNo', ssnitRegNo);
        formData.append('noOfEmp', noOfEmp);
        formData.append('meetingDays', meetingDays);
        formData.append('srcType', srcType);
        formData.append('shdSbmt', shdSbmt);
        formData.append('addtnlCstmrDataCol1', addtnlCstmrDataCol1);
        formData.append('addtnlCstmrDataCol2', addtnlCstmrDataCol2);
        formData.append('addtnlCstmrDataCol3', addtnlCstmrDataCol3);
        formData.append('addtnlCstmrDataCol4', addtnlCstmrDataCol4);
        formData.append('addtnlCstmrDataCol5', addtnlCstmrDataCol5);
        formData.append('addtnlCstmrDataCol6', addtnlCstmrDataCol6);
        formData.append('addtnlCstmrDataCol7', addtnlCstmrDataCol7);
        formData.append('addtnlCstmrDataCol8', addtnlCstmrDataCol8);
        formData.append('addtnlCstmrDataCol9', addtnlCstmrDataCol9);
        formData.append('addtnlCstmrDataCol10', addtnlCstmrDataCol10);
        formData.append('addtnlCstmrDataCol11', addtnlCstmrDataCol11);
        formData.append('addtnlCstmrDataCol12', addtnlCstmrDataCol12);
        formData.append('addtnlCstmrDataCol13', addtnlCstmrDataCol13);
        formData.append('addtnlCstmrDataCol14', addtnlCstmrDataCol14);
        formData.append('addtnlCstmrDataCol15', addtnlCstmrDataCol15);
        formData.append('addtnlCstmrDataCol16', addtnlCstmrDataCol16);
        formData.append('addtnlCstmrDataCol17', addtnlCstmrDataCol17);
        formData.append('addtnlCstmrDataCol18', addtnlCstmrDataCol18);
        formData.append('addtnlCstmrDataCol19', addtnlCstmrDataCol19);
        formData.append('addtnlCstmrDataCol20', addtnlCstmrDataCol20);
        formData.append('addtnlCstmrDataCol21', addtnlCstmrDataCol21);
        formData.append('addtnlCstmrDataCol22', addtnlCstmrDataCol22);
        formData.append('addtnlCstmrDataCol23', addtnlCstmrDataCol23);
        formData.append('addtnlCstmrDataCol24', addtnlCstmrDataCol24);
        formData.append('addtnlCstmrDataCol25', addtnlCstmrDataCol25);
        formData.append('addtnlCstmrDataCol26', addtnlCstmrDataCol26);
        formData.append('addtnlCstmrDataCol27', addtnlCstmrDataCol27);
        formData.append('addtnlCstmrDataCol28', addtnlCstmrDataCol28);
        formData.append('addtnlCstmrDataCol29', addtnlCstmrDataCol29);
        formData.append('addtnlCstmrDataCol30', addtnlCstmrDataCol30);
        formData.append('addtnlCstmrDataCol31', addtnlCstmrDataCol31);
        formData.append('addtnlCstmrDataCol32', addtnlCstmrDataCol32);
        formData.append('addtnlCstmrDataCol33', addtnlCstmrDataCol33);
        formData.append('addtnlCstmrDataCol34', addtnlCstmrDataCol34);
        formData.append('addtnlCstmrDataCol35', addtnlCstmrDataCol35);
        formData.append('addtnlCstmrDataCol36', addtnlCstmrDataCol36);
        formData.append('addtnlCstmrDataCol37', addtnlCstmrDataCol37);
        formData.append('addtnlCstmrDataCol38', addtnlCstmrDataCol38);
        formData.append('addtnlCstmrDataCol39', addtnlCstmrDataCol39);
        formData.append('addtnlCstmrDataCol40', addtnlCstmrDataCol40);
        formData.append('addtnlCstmrDataCol41', addtnlCstmrDataCol41);
        formData.append('addtnlCstmrDataCol42', addtnlCstmrDataCol42);
        formData.append('addtnlCstmrDataCol43', addtnlCstmrDataCol43);
        formData.append('addtnlCstmrDataCol44', addtnlCstmrDataCol44);
        formData.append('addtnlCstmrDataCol45', addtnlCstmrDataCol45);
        formData.append('addtnlCstmrDataCol46', addtnlCstmrDataCol46);
        formData.append('addtnlCstmrDataCol47', addtnlCstmrDataCol47);
        formData.append('addtnlCstmrDataCol48', addtnlCstmrDataCol48);
        formData.append('addtnlCstmrDataCol49', addtnlCstmrDataCol49);
        formData.append('addtnlCstmrDataCol50', addtnlCstmrDataCol50);
        formData.append('rvsnTtl',rvsnTtl);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
//                BootstrapDialog.show({
//                    size: BootstrapDialog.SIZE_SMALL,
//                    type: BootstrapDialog.TYPE_DEFAULT,
//                    title: 'Rhomicom Message',
//                    message: data,
//                    animate: true,
//                    onshow: function (dialog) {
//                    },  buttons: [{
//                            label: 'OK',
//                            cssClass: 'btn-primary',
//                            action: function (dialogItself) {
//                                dialogItself.close();
//                            }
//                        }]
//                });
                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PERSON ID AND CUST ID

                    $("#custID").val(obj.custID);
                    $("#profileID").val(obj.profileID);
                    $("#idNo").val(obj.localIdNo);
                    //SHOW EXTRA TABS
                    //$("#addPrsnData").css("display", "block");
                    //$("#custAttchmnt").css("display", "block");

                    msg = "Customer Data Successfully Saved!";
                    if(shdSbmt > 0){
                        msg = "Customer Data Successfully Submitted for Approval!";
                    }
                    
		   if(myFormPage == 2){                       
                        box.modal('hide');
                        openATab('#prfBCOPAddPrsnDataEDT', 'grp=17&typ=1&pg=11&subPgNo=1.6&vtyp=1&vtypActn=EDIT&custID='+obj.custID+'&formType=Corporate Customer&rvsnTtlAPD='+rvsnTtl);                          
                        bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                            }
                        });
                    } else {                    
                        getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Customer Profile', 11, subPgNo, 0, 'EDIT', obj.custID, '', 'indCustTableRow1', -1, function () {

                            box.modal('hide');
                            bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: msg,
                                callback: function () { /* your callback code */
                                }
                            });
                        });
                    }
                } else {

                    msg = data;
                    box.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }


            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function validateCorpCustomerForm(custName, natureOfBus, dateOfEstblshmnt, startDate, resAddress,
        email, contactNos, brandName, regNo, dateOfIncorp, tinNo, noOfEmp, meetingDays, subPgNo) {
    var cnta = 0;
    var msgDsply = "";
    var msgDsplyHdr = "<span style='font-weight: bold !important;'>The following is/are required:</span></br>";
    if (custName.trim() == "" || custName == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#custName").css('border-color', 'red');
        $("#custName").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Customer Name,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#custName").css('border-color', '#ccc');
        $("#custName").css('border-width', '1px');
    }

    if (subPgNo == 1.2) {
        if (natureOfBus.trim() == "" || natureOfBus == "undefined") {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $("#natureOfBus").css('border-color', 'red');
            $("#natureOfBus").css('border-width', '2px');
            msgDsply = msgDsply + "<b>Nature of Business,</b></br>";
            cnta = cnta + 1;
        } else {
            $("#natureOfBus").css('border-color', '#ccc');
            $("#natureOfBus").css('border-width', '1px');
        }
    }

    if (dateOfEstblshmnt == "" || dateOfEstblshmnt == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#dateOfEstblshmnt").css('border-color', 'red');
        $("#dateOfEstblshmnt").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Date of Establishment,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#dateOfEstblshmnt").css('border-color', '#ccc');
        $("#dateOfEstblshmnt").css('border-width', '1px');
    }

    if (startDate == "" || startDate == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#startDate").css('border-color', 'red');
        $("#startDate").css('border-width', '2px');
        msgDsply = msgDsply + "Relationship <b>Start Date,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#startDate").css('border-color', '#ccc');
        $("#startDate").css('border-width', '1px');
    }

    if (resAddress.trim() == "" || resAddress == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#resAddress").css('border-color', 'red');
        $("#resAddress").css('border-width', '2px');
        if (subPgNo == 1.2) {
            msgDsply = msgDsply + "<b>Trading Address,</b></br>";
        } else {
            msgDsply = msgDsply + "<b>Meeting Place,</b></br>";
        }
        cnta = cnta + 1;
    } else {
        $("#resAddress").css('border-color', '#ccc');
        $("#resAddress").css('border-width', '1px');
    }

    if (subPgNo == 1.2) {
        if (email.trim() == "" || email == "undefined") {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $("#email").css('border-color', 'red');
            $("#email").css('border-width', '2px');
            msgDsply = msgDsply + "<b>Email Address,</b></br>";
            cnta = cnta + 1;
        } else {
            $("#email").css('border-color', '#ccc');
            $("#email").css('border-width', '1px');
        }
    }

    if (contactNos.trim() == "" || contactNos == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#contactNos").css('border-color', 'red');
        $("#contactNos").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Contact Numbers(Separated by commas),</b></br>";
        cnta = cnta + 1;
    } else {
        $("#contactNos").css('border-color', '#ccc');
        $("#contactNos").css('border-width', '1px');
    }

    if (subPgNo == 1.3) {
        if (meetingDays == "" || meetingDays == "undefined") {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $("#meetingDaysLbl").css('border-color', 'red');
            $("#meetingDaysLbl").css('border-width', '2px');
            msgDsply = msgDsply + "<b>Meeting Days,</b></br>";
            cnta = cnta + 1;
        } else {
            $("#meetingDaysLbl").css('border-color', '#ccc');
            $("#meetingDaysLbl").css('border-width', '1px');
        }
    }

    if (subPgNo == 1.2) {
        if (brandName.trim() == "" || brandName == "undefined") {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $("#brandName").css('border-color', 'red');
            $("#brandName").css('border-width', '2px');
            msgDsply = msgDsply + "<b>Brand Name,</b></br>";
            cnta = cnta + 1;
        } else {
            $("#brandName").css('border-color', '#ccc');
            $("#brandName").css('border-width', '1px');
        }

        if (regNo.trim() == "" || regNo == "undefined") {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $("#regNo").css('border-color', 'red');
            $("#regNo").css('border-width', '2px');
            msgDsply = msgDsply + "<b>Registration Number,</b></br>";
            cnta = cnta + 1;
        } else {
            $("#regNo").css('border-color', '#ccc');
            $("#regNo").css('border-width', '1px');
        }

        if (dateOfIncorp == "" || dateOfIncorp == "undefined") {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $("#dateOfIncorp").css('border-color', 'red');
            $("#dateOfIncorp").css('border-width', '2px');
            msgDsply = msgDsply + "<b>Date of Incorporation,</b></br>";
            cnta = cnta + 1;
        } else {
            $("#dateOfIncorp").css('border-color', '#ccc');
            $("#dateOfIncorp").css('border-width', '1px');
        }

        if (tinNo.trim() == "" || tinNo == "undefined") {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $("#tinNo").css('border-color', 'red');
            $("#tinNo").css('border-width', '2px');
            msgDsply = msgDsply + "<b>Tax Identification Number(TIN)</b></br>";
            cnta = cnta + 1;
        } else {
            $("#tinNo").css('border-color', '#ccc');
            $("#tinNo").css('border-width', '1px');
        }
    }

    if (noOfEmp == "" || noOfEmp == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#noOfEmp").css('border-color', 'red');
        $("#noOfEmp").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Number of Employees</b></br>";
        cnta = cnta + 1;
    } else {
        $("#noOfEmp").css('border-color', '#ccc');
        $("#noOfEmp").css('border-width', '1px');
    }

    if (cnta > 0) {
        bootbox.alert({
            size: "small",
            title: "Validation Errors",
            message: msgDsplyHdr + "<span style='color:red; font-weight:bold !important;'>" + msgDsply + "</span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        $("#custName").css('border-color', '#ccc');
        $("#custName").css('border-width', '1px');
        $("#natureOfBus").css('border-color', '#ccc');
        $("#natureOfBus").css('border-width', '1px');
        $("#dateOfEstblshmnt").css('border-color', '#ccc');
        $("#dateOfEstblshmnt").css('border-width', '1px');
        $("#startDate").css('border-color', '#ccc');
        $("#startDate").css('border-width', '1px');
        $("#resAddress").css('border-color', '#ccc');
        $("#resAddress").css('border-width', '1px');
        $("#email").css('border-color', '#ccc');
        $("#email").css('border-width', '1px');
        $("#contactNos").css('border-color', '#ccc');
        $("#contactNos").css('border-width', '1px');
        $("#brandName").css('border-color', '#ccc');
        $("#brandName").css('border-width', '1px');
        $("#regNo").css('border-color', '#ccc');
        $("#regNo").css('border-width', '1px');
        $("#dateOfIncorp").css('border-color', '#ccc');
        $("#dateOfIncorp").css('border-width', '1px');
        $("#tinNo").css('border-color', '#ccc');
        $("#tinNo").css('border-width', '1px');
        $("#meetingDaysLbl").css('border-color', '#ccc');
        $("#meetingDaysLbl").css('border-width', '1px');
        $("#noOfEmp").css('border-color', '#ccc');
        $("#noOfEmp").css('border-width', '1px');
        return true;
    }
}

function getCstmrAddtnlDataForm(elementID, modalBodyID, titleElementID, formElementID,
        tRowElementID, formTitle, vtyp, addOrEdit, pKeyID, pipeSprtdFieldIDs, extDtColNum, tableElmntID)
{
    var formType = typeof $("#formTypeInpt").val() === 'undefined' ? '' : $("#formTypeInpt").val();
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var xmlhttp;
        if (window.XMLHttpRequest)
        {
            /*code for IE7+, Firefox, Chrome, Opera, Safari*/
            xmlhttp = new XMLHttpRequest();
        } else
        {
            /*code for IE6, IE5*/
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
        xmlhttp.onreadystatechange = function ()
        {
            if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
            {
                $('#' + titleElementID).html(formTitle);
                $('#' + modalBodyID).html(xmlhttp.responseText);
                $('#' + elementID).off('hidden.bs.modal');
                $('#' + elementID).one('hidden.bs.modal', function (e) {
                    $('#' + titleElementID).html('');
                    $('#' + modalBodyID).html('');
                    $(e.currentTarget).unbind();
                });
                $('#' + modalBodyID + 'Diag').draggable();
                $(function () {
                    $('.form_date').datetimepicker({
                        format: "d-M-yyyy",
                        language: 'en',
                        weekStart: 0,
                        todayBtn: true,
                        autoclose: true,
                        todayHighlight: true,
                        keyboardNavigation: true,
                        startView: 2,
                        minView: 2,
                        maxView: 4,
                        forceParse: true
                    });
                });
                if (addOrEdit === 'EDIT')
                {
                    var str_flds_array = pipeSprtdFieldIDs.split('|');
                    var $tds = $('#' + tRowElementID).find('td');
                    for (var i = 0; i < str_flds_array.length; i++) {
                        // Trim the excess whitespace.
                        var fldID = str_flds_array[i].replace(/^\s*/, "").replace(/\s*$/, "");
                        $('#' + fldID).val($.trim($tds.eq(i + 1).text()));
                    }
                }
                $('#' + elementID).on('show.bs.modal', function (e) {
                    $(this).find('.modal-body').css({
                        'max-height': '100%'
                    });
                });
                $body.removeClass("mdlloadingDiag");
                $('#' + elementID).modal({backdrop: 'static', keyboard: false});
                $body.removeClass("mdlloading");
                $(document).ready(function () {
                    $('#' + formElementID).submit(function (e) {
                        e.preventDefault();
                        return false;
                    });
                });
            }
        };
        xmlhttp.open("POST", "index.php", true);
        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xmlhttp.send("grp=17&typ=1&pg=11&subPgNo=1.6&vtyp=" + vtyp + "&addtnlCstmrPkey=" + pKeyID +
                "&extDtColNum=" + extDtColNum
                + "&pipeSprtdFieldIDs=" + pipeSprtdFieldIDs +
                "&tableElmntID=" + tableElmntID + "&tRowElementID=" + tRowElementID
                + "&addOrEdit=" + addOrEdit +
                "&formType=" + formType);
    });
}

function saveCstmrAddtnlDataForm(modalBodyID, addtnlCstmrPkey, pipeSprtdFieldIDs, extDtColNum, tableElmntID, tRowElementID, addOrEdit)
{
    var custID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var str_flds_array = pipeSprtdFieldIDs.split('|');
        var str_flds_array_val = pipeSprtdFieldIDs.split('|');
        var lnkArgs = "";
        var tdsAppend = "";
        var $tds = $('#' + tRowElementID).find('td');
        var rndmNum = Math.floor((Math.random() * 99999) + parseInt(extDtColNum));
        for (var i = 0; i < str_flds_array.length; i++) {
            // Trim the excess whitespace.
            var fldID = str_flds_array[i].replace(/^\s*/, "").replace(/\s*$/, "");
            str_flds_array[i] = fldID;
            str_flds_array_val[i] = typeof $('#' + fldID).val() === 'undefined' ? '%' : $('#' + fldID).val();
            lnkArgs = lnkArgs + "&" + fldID + "=" + str_flds_array_val[i];
            if (addOrEdit === 'EDIT')
            {
                $tds.eq(i + 1).html(str_flds_array_val[i]);
            } else
            {
                tdsAppend = tdsAppend + "<td>" + str_flds_array_val[i] + "</td>";
            }
        }
        if (addOrEdit === 'ADD')
        {
            var btnHtml = '<td><button type="button" class="btn btn-default btn-sm" onclick="getCstmrAddtnlDataForm(\'myFormsModal\', \'myFormsModalBody\', \'myFormsModalTitle\', \'addtnlCstmrTblrDataForm\',' +
                    '\'cstrExtrTblrDtCol_' + extDtColNum + '_Row' + rndmNum + '\', \'Add/Edit Data\', 12, \'EDIT\', ' + addtnlCstmrPkey + ', \'' + pipeSprtdFieldIDs + '\', ' + extDtColNum + ', \'extDataTblCol_' + extDtColNum + '\');">' +
                    '<img src="cmn_images/edit32.png" style="height:20px; width:auto; position: relative; vertical-align: middle;"></button></td>';
            $('#' + tableElmntID).append('<tr id="cstmrExtrTblrDtCol_' + extDtColNum + '_Row' + rndmNum + '">' + btnHtml + tdsAppend + '</tr>');
        }
        var allTblValues = "";
        $('#' + tableElmntID).find('tr').each(function (i, el) {
            var $tds1 = $(this).find('td');
            for (var i = 0; i < str_flds_array.length; i++) {
                if (i == str_flds_array.length - 1)
                {
                    allTblValues = allTblValues + $tds1.eq(i + 1).text();
                } else {
                    allTblValues = allTblValues + $tds1.eq(i + 1).text() + "~";
                }
            }
            allTblValues = allTblValues + "|";
        });
        var xmlhttp;
        if (window.XMLHttpRequest)
        {
            /*code for IE7+, Firefox, Chrome, Opera, Safari*/
            xmlhttp = new XMLHttpRequest();
        } else
        {
            /*code for IE6, IE5*/
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
        xmlhttp.onreadystatechange = function ()
        {
            if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
            {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                $('#' + modalBodyID).html(xmlhttp.responseText);
                var msg = '<span style="font-weight:bold;">Status: </span>' +
                        '<span style="color:red;font-weight: bold;">Requires Approval </span>';
                $("#mySelfStatusBtn").html(msg);
            }
        };
        xmlhttp.open("POST", "index.php", true);
        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xmlhttp.send("grp=17&typ=1&pg=11&q=UPDATE&actyp=4&addtnlCstmrPkey=" + addtnlCstmrPkey
                + "&extDtColNum=" + extDtColNum + "&tableElmntID=" + tableElmntID
                + "&allTblValues=" + allTblValues + "&custID=" + custID);
    });
}

function loadCstmrExtrData()
{
    var srcType = typeof $("#formSrcType").val() === 'undefined' ? '--Please Select--' : $("#formSrcType").val();
    openATab('#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.6&srcType=' + srcType);
}

function saveCstmrExtrDataCol(slctr, linkArgs)
{
    var slctdExtrDataCols = "";
    var isVld = true;
    var errMsg = "";
    var srcType = typeof $("#formSrcType").val() === 'undefined' ? '--Please Select--' : $("#formSrcType").val();
    if (srcType == "--Please Select--") {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a <b>Form</b>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    $('#extrCstmrDtColsTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                var fieldLbl = $('#extrCstmrDtColsRow' + rndmNum + '_FieldLbl').val();
                var colNum = $('#extrCstmrDtColsRow' + rndmNum + '_ColNum').val();
                if (typeof $('#extrCstmrDtColsRow' + rndmNum + '_ColNum').val() === 'undefined')
                {
                    isVld = false;
                }
                if (colNum.trim() === '')
                {
                    isVld = false;
                } else {
                    if (fieldLbl.trim() !== '') {
                        var dtTyp = $('#extrCstmrDtColsRow' + rndmNum + '_DtTyp').val();
                        if (dtTyp.trim() === '')
                        {
                            isVld = false;
                            errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                                    'font-weight:bold;color:red;">Data Type for Column No. ' + colNum + ' cannot be empty!</span></p>';
                            $('#extrCstmrDtColsRow' + rndmNum + '_DtTyp').addClass('rho-error');
                        } else {
                            $('#extrCstmrDtColsRow' + rndmNum + '_DtTyp').removeClass('rho-error');
                        }
                        var ctgry = $('#extrCstmrDtColsRow' + rndmNum + '_Ctgry').val();
                        if (ctgry.trim() === '')
                        {
                            isVld = false;
                            errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                                    'font-weight:bold;color:red;">Category for Column No. ' + colNum + ' cannot be empty!</span></p>';
                            $('#extrCstmrDtColsRow' + rndmNum + '_Ctgry').addClass('rho-error');
                        } else {
                            $('#extrCstmrDtColsRow' + rndmNum + '_Ctgry').removeClass('rho-error');
                        }
                        var dspTyp = $('#extrCstmrDtColsRow' + rndmNum + '_DspTyp').val();
                        if (dspTyp.trim() === '')
                        {
                            isVld = false;
                            errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                                    'font-weight:bold;color:red;">Display Type for Column No. ' + colNum + ' cannot be empty!</span></p>';
                            $('#extrCstmrDtColsRow' + rndmNum + '_DspTyp').addClass('rho-error');
                        } else {
                            $('#extrCstmrDtColsRow' + rndmNum + '_DspTyp').removeClass('rho-error');
                        }
                        var dtLen = $('#extrCstmrDtColsRow' + rndmNum + '_DtLen').val();
                        if (dtLen.trim() === '')
                        {
                            $('#extrCstmrDtColsRow' + rndmNum + '_DtLen').val(200);
                        }
                        var order = $('#extrCstmrDtColsRow' + rndmNum + '_Order').val();
                        if (order.trim() === '')
                        {
                            $('#extrCstmrDtColsRow' + rndmNum + '_Order').val(1);
                        }
                        var tblColsNum = $('#extrCstmrDtColsRow' + rndmNum + '_TblColsNum').val();
                        if (tblColsNum.trim() === '')
                        {
                            if (dspTyp === 'Tabular')
                            {
                                $('#extrCstmrDtColsRow' + rndmNum + '_TblColsNum').val(1);
                            } else {
                                $('#extrCstmrDtColsRow' + rndmNum + '_TblColsNum').val(0);
                            }
                        }
                        var tblrColNms = $('#extrCstmrDtColsRow' + rndmNum + '_TblrColNms').val();
                        if (tblrColNms.trim() === '' && dspTyp === 'Tabular')
                        {
                            isVld = false;
                            errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                                    'font-weight:bold;color:red;">Tabular Column Names for Column No. ' + colNum + ' cannot be empty!</span></p>';
                            $('#extrCstmrDtColsRow' + rndmNum + '_TblrColNms').addClass('rho-error');
                        } else {
                            $('#extrCstmrDtColsRow' + rndmNum + '_TblrColNms').removeClass('rho-error');
                            //$('#extrCstmrDtColsRow' + rndmNum + '_TblrColNms').val('');
                        }
                    }
                }
                if (isVld === false)
                {
                    /*Do Nothing*/
                } else {
                    var isRqrd = typeof $("input[name='extrCstmrDtColsRow" + rndmNum + "_IsRqrd']:checked").val() === 'undefined' ? 'NO' : 'YES';
                    slctdExtrDataCols = slctdExtrDataCols + $('#extrCstmrDtColsRow' + rndmNum + '_ColNum').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#extrCstmrDtColsRow' + rndmNum + '_ExtrDtID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#extrCstmrDtColsRow' + rndmNum + '_FieldLbl').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#extrCstmrDtColsRow' + rndmNum + '_LovNm').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#extrCstmrDtColsRow' + rndmNum + '_DtTyp').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#extrCstmrDtColsRow' + rndmNum + '_Ctgry').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#extrCstmrDtColsRow' + rndmNum + '_DtLen').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#extrCstmrDtColsRow' + rndmNum + '_DspTyp').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#extrCstmrDtColsRow' + rndmNum + '_TblColsNum').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#extrCstmrDtColsRow' + rndmNum + '_Order').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#extrCstmrDtColsRow' + rndmNum + '_TblrColNms').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + isRqrd.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                }
            }
        }
    });
    if (rhotrim(errMsg, '; ') !== '')
    {
        bootbox.alert({
            title: 'System Alert!',
            /*size: 'small',*/
            message: errMsg});
        return false;
    }
    var dialog = bootbox.alert({
        title: 'Save Fields/Columns',
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> Saving Fields/Columns...Please Wait...</p>',
        callback: function () {
            openATab(slctr, linkArgs + '&srcType=' + srcType);
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 11,
                    subPgNo: 1.6,
                    q: 'UPDATE',
                    actyp: 1,
                    slctdExtrDataCols: slctdExtrDataCols,
                    srcType: srcType
                },
                success: function (result) {
                    setTimeout(function () {
                        dialog.find('.bootbox-body').html(result);
                    }, 500);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function delCstmrExtrDataCol(rowIDAttrb)
{
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    var colNum = '';
    if (typeof $('#extrCstmrDtColsRow' + rndmNum + '_ExtrDtID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#extrCstmrDtColsRow' + rndmNum + '_ExtrDtID').val();
        colNum = $('#extrCstmrDtColsRow' + rndmNum + '_ColNum').val();
    }
    var dialog = bootbox.confirm({
        title: 'Remove Field/Column?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">REMOVE</span> this Field/Column?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Remove Field/Column?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Removing Field/Column...Please Wait...</p>'
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 11,
                                    q: 'DELETE',
                                    subPgNo: 1.6,
                                    actyp: 1,
                                    colNum: colNum,
                                    extrdataID: pKeyID
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                        if (result1.indexOf("Success") !== -1) {
                                            $("#" + rowIDAttrb).remove();
                                        }
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            $("#" + rowIDAttrb).remove();
                            dialog1.find('.bootbox-body').html('Row Removed Successfully!');
                        }, 500);
                    }
                });
            }
        }
    });
}

function getLoanRqstRvrslForm(elementID, modalBodyID, titleElementID, formElementID, tRowElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID)
{
    var loanRqstID = typeof $("#loanRqstID").val() === 'undefined' ? -1 : $("#loanRqstID").val();
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
            $('#' + titleElementID).html(formTitle);
            $('#' + modalBodyID).html(xmlhttp.responseText);
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                $('#' + titleElementID).html('');
                $('#' + modalBodyID).html('');
                $(e.currentTarget).unbind();
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $(document).ready(function () {
                $('#' + formElementID).submit(function (e) {
                    e.preventDefault();
                    return false;
                });
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn +
            "&loanRqstID=" + loanRqstID);
}

function deleteLoanRqstGuarantor(loanGuarantorID, loanStatus)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Guarantor?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                if (!(loanStatus == "Incomplete" || loanStatus == "Rejected" || loanStatus == "Withdrawn")) {
                    mnBox.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Sorry! Only Guarantors for Loan Applications with Status <b>Incomplete</b>, <b>Rejected</b> or <b>Withdrawn</b> can be deleted.",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var loanRqstID = typeof $("#loanRqstID").val() === 'undefined' ? -1 : $("#loanRqstID").val();
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        getLoanRqstForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Loan Request', 15, 4.1, 0, 'EDIT', loanRqstID, 'indCustTable', 'indCustTableRow1');
                        //getCustData('', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.1')
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.1&q=DELETE&actyp=1&PKeyID=" + loanGuarantorID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function validateDateTimePicker(elementID) {
    var value = $("#" + elementID).val();
    //var format = $("#datetimepicker1").datepicker('option', 'dateFormat');
    var valueIsValid = false;
    try {
        $.datepicker.parseDate("d-M-yy", value);
        valueIsValid = true;
    } catch (e) {
    }

    return valueIsValid;
}

function validateApplctnFormLoanCalculator(prdtType, prdtTypeID, loanAmount, loanMaxAmount, loanMinAmount, loanTenor, maxLoanTenorType, loanTenorType,
        maxLoanTenor, minLoanTenorType, minLoanTenor, interestRate, baseIntRate, gracePeriodNo, dsbmntDate) {

    if (loanAmount == "" || loanAmount <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanAmount").css('border-color', 'red');
        $("#loanAmount").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Loan amount must be greater than Zero!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prdtTypeID > 0 && (parseFloat(loanAmount) > parseFloat(loanMaxAmount))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanAmount").css('border-color', 'red');
        $("#loanAmount").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Maximum applicable loan amount is " + formatAsMoney(loanMaxAmount) +
                    " for loan product <span style='color:red;font-weitht:bold !important;'><i>" + prdtType + "</i></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prdtTypeID > 0 && (parseFloat(loanAmount) < parseFloat(loanMinAmount))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanAmount").css('border-color', 'red');
        $("#loanAmount").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Mimimum applicable loan amount is " + formatAsMoney(loanMinAmount) +
                    " for loan product <span style='color:red;font-weitht:bold !important;'><i>" + prdtType + "</i></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (loanTenor == "" || Number(loanTenor) <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Loan Tenor must be greater than Zero!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prdtTypeID > 0 && ((maxLoanTenorType == "Month(s)" || maxLoanTenorType == "Year(s)") && (loanTenorType == maxLoanTenorType)
            && (Number(loanTenor) > Number(maxLoanTenor)))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Maximum Loan Tenor is " + maxLoanTenor + " " + maxLoanTenorType +
                    " for loan product <span style='color:red;font-weitht:bold !important;'><i>" + prdtType + "</i></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prdtTypeID > 0 && (maxLoanTenorType == "Year(s)" && loanTenorType == "Month(s)" && (Number(loanTenor) > (Number(maxLoanTenor) * 12)))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Maximum Loan Tenor is " + (Number(maxLoanTenor) * 12) + " Month(s)" +
                    " for loan product <span style='color:red;font-weitht:bold !important;'><i>" + prdtType + "</i></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prdtTypeID > 0 && (maxLoanTenorType == "Month(s)" && loanTenorType == "Year(s)" && ((Number(loanTenor) * 12) > Number(maxLoanTenor)))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Maximum Loan Tenor is " + (Number(maxLoanTenor) / 12) + " Year(s)" +
                    " for loan product <span style='color:red;font-weitht:bold !important;'><i>" + prdtType + "</i></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prdtTypeID > 0 && ((minLoanTenorType == "Month(s)" || minLoanTenorType == "Year(s)") && (loanTenorType == minLoanTenorType))
            && (Number(loanTenor) < Number(minLoanTenor))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Minimum Loan Tenor is " + minLoanTenor + " " + minLoanTenorType +
                    " for loan product <span style='color:red;font-weitht:bold !important;'><i>" + prdtType + "</i></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prdtTypeID > 0 && (minLoanTenorType == "Year(s)" && loanTenorType == "Month(s)" && (Number(loanTenor) < (Number(minLoanTenor) * 12)))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Mimimum Loan Tenor is " + (Number(minLoanTenor) * 12) + " Month(s)" +
                    " for loan product <span style='color:red;font-weitht:bold !important;'><i>" + prdtType + "</i></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prdtTypeID > 0 && (minLoanTenorType == "Month(s)" && loanTenorType == "Year(s)" && ((Number(loanTenor) * 12) < Number(minLoanTenor)))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Minimum Loan Tenor is " + (Number(minLoanTenor) / 12) + " Year(s)" +
                    " for loan product <span style='color:red;font-weitht:bold !important;'><i>" + prdtType + "</i></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (interestRate == "" || interestRate <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#interestRate").css('border-color', 'red');
        $("#interestRate").css('border-width', '2px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        $("#loanTenor").css('border-color', '#ccc');
        $("#loanTenor").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Interest Rate must be greater than Zero (0)</b>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prdtTypeID > 0 && (interestRate == "" || interestRate <= 0 || (parseFloat(interestRate) < parseFloat(baseIntRate)))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#interestRate").css('border-color', 'red');
        $("#interestRate").css('border-width', '2px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        $("#loanTenor").css('border-color', '#ccc');
        $("#loanTenor").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Interest Rate must be greater than the Base Rate of <b>" + baseIntRate + "% Per Anum</b>" +
                    " for loan product <span style='color:red;font-weitht:bold !important;'><i>" + prdtType + "</i></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (gracePeriodNo == "" || gracePeriodNo <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#gracePeriodNo").css('border-color', 'red');
        $("#gracePeriodNo").css('border-width', '2px');
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        $("#loanTenor").css('border-color', '#ccc');
        $("#loanTenor").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Grace Period must be greater than Zero(0) Month/Year</b>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (dsbmntDate == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#dsbmntDate").css('border-color', 'red');
        $("#dsbmntDate").css('border-width', '2px');
        $("#gracePeriodNo").css('border-color', '#ccc');
        $("#gracePeriodNo").css('border-width', '1px');
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        $("#loanTenor").css('border-color', '#ccc');
        $("#loanTenor").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide valid Disbursement Date</b>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (dsbmntDate != "" && (validateDateTimePicker("dsbmntDate") == false)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#dsbmntDate").css('border-color', 'red');
        $("#dsbmntDate").css('border-width', '2px');
        $("#gracePeriodNo").css('border-color', '#ccc');
        $("#gracePeriodNo").css('border-width', '1px');
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        $("#loanTenor").css('border-color', '#ccc');
        $("#loanTenor").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide Disbursement Date</b>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        $("#loanTenor").css('border-color', '#ccc');
        $("#loanTenor").css('border-width', '1px');
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');
        $("#gracePeriodNo").css('border-color', '#ccc');
        $("#gracePeriodNo").css('border-width', '1px');
        $("#dsbmntDate").css('border-color', '#ccc');
        $("#dsbmntDate").css('border-width', '1px');
        return true;
    }
}

function calcLoanAmortization(pgNo, subPgNo, vtyp)
{
//alert("Hi");
    var box;
    var box2;
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        //$body = $("body");
        //$body.addClass("mdlloadingDiag");

        var obj;
        var prdtTypeID = typeof $("#prdtTypeID").val() === 'undefined' ? -1 : $("#prdtTypeID").val();
        var prdtType = typeof $("#prdtType").val() === 'undefined' ? -1 : $("#prdtType").val();
        var crdtType = typeof $("#crdtType").val() === 'undefined' ? '' : $("#crdtType").val();
        if (crdtType == "Not Applicable") {
            crdtType = "Loan";
        }


        var crncyIsoCode = typeof $("#crncyIsoCode").text() === 'undefined' ? '' : $("#crncyIsoCode").text();
        var loanAmount = typeof $("#loanAmount").val() === 'undefined' ? -1 : $("#loanAmount").val().trim().length === 0 ? 0 : $("#loanAmount").val();
        var loanTenor = typeof $("#loanTenor").val() === 'undefined' ? -1 : $("#loanTenor").val().trim().length === 0 ? 0 : $("#loanTenor").val();
        var loanTenorType = typeof $("#loanTenorType").val() === 'undefined' ? '' : $("#loanTenorType").val();
        var interestRate = typeof $("#interestRate").val() === 'undefined' ? -1 : $("#interestRate").val();
        var intRateType = typeof $("#intRateType").val() === 'undefined' ? '' : $("#intRateType").val();
        var compound = typeof $("#compound").val() === 'undefined' ? '' : $("#compound").val();
        var payBack = typeof $("#payBack").val() === 'undefined' ? '' : $("#payBack").val();
        var gracePeriodNo = typeof $("#gracePeriodNo").val() === 'undefined' ? -1 : $("#gracePeriodNo").val().trim().length === 0 ? 0 : $("#gracePeriodNo").val();
        var gracePeriodType = typeof $("#gracePeriodType").val() === 'undefined' ? '' : $("#gracePeriodType").val();
        var loanMaxAmount = typeof $("#loanMaxAmount").val() === 'undefined' ? -1 : $("#loanMaxAmount").val();
        var loanMinAmount = typeof $("#loanMinAmount").val() === 'undefined' ? -1 : $("#loanMinAmount").val();
        var maxLoanTenor = typeof $("#maxLoanTenor").val() === 'undefined' ? -1 : $("#maxLoanTenor").val();
        var maxLoanTenorType = typeof $("#maxLoanTenorType").val() === 'undefined' ? -1 : $("#maxLoanTenorType").val();
        var minLoanTenor = typeof $("#minLoanTenor").val() === 'undefined' ? -1 : $("#minLoanTenor").val();
        var minLoanTenorType = typeof $("#minLoanTenorType").val() === 'undefined' ? -1 : $("#minLoanTenorType").val();
        var baseIntRate = typeof $("#baseIntRate").val() === 'undefined' ? -1 : $("#baseIntRate").val();
        var dsbmntDate = typeof $("#dsbmntDate").val() === 'undefined' ? '' : $("#dsbmntDate").val();
        var rslt = validateApplctnFormLoanCalculator(prdtType, prdtTypeID, loanAmount, loanMaxAmount, loanMinAmount, loanTenor, maxLoanTenorType, loanTenorType,
                maxLoanTenor, minLoanTenorType, minLoanTenor, interestRate, baseIntRate, gracePeriodNo, dsbmntDate);
        if (!rslt) {
            return false;
        }

        $body.removeClass("mdlloading");
        $body.removeClass("mdlloadingDiag");
        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Generating Results. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('actyp', 1);
        formData.append('loanAmount', loanAmount);
        formData.append('loanTenor', loanTenor);
        formData.append('loanTenorType', loanTenorType);
        formData.append('interestRate', interestRate);
        formData.append('intRateType', intRateType);
        formData.append('compound', compound);
        formData.append('payBack', payBack);
        formData.append('gracePeriodNo', gracePeriodNo);
        formData.append('gracePeriodType', gracePeriodType);
        formData.append('dsbmntDate', dsbmntDate);
        formData.append('crdtType', crdtType);
        formData.append('crncyIsoCode', crncyIsoCode);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {

                box.modal('hide');
                $("#amrtiztnSchdlDiv").html(data);
                box2 = bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Results Generated Successfully",
                    callback: function () { /* your callback code */
                    }
                });
            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function getLoanPrdtDetsForApplctnLoanCalc(pgNo, subPgNo)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var json;
        var prdtTypeID = typeof $("#prdtTypeID").val() === 'undefined' ? -1 : $("#prdtTypeID").val();
        var crdtType = typeof $("#crdtType").val() === 'undefined' ? '' : $("#crdtType").val();
        var rpmntSrcType = typeof $("#rpmntSrcType").val() === 'undefined' ? '' : $("#rpmntSrcType").val();
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', 4);
        formData.append('PKeyID', prdtTypeID);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    json = $.parseJSON(data);
                    //$("#loanRqstID").val(json.loanProductId);
                    //$("#currencyId").val(json.loanPrdtDetArry.currencyId);
                    $("#isAccountRqrd").val(json.loanPrdtDetArry.isAccountRqrd);
                    $("#loanMaxAmount").val(json.loanPrdtDetArry.loanMaxAmount);
                    $("#loanMinAmount").val(json.loanPrdtDetArry.loanMinAmount);
                    $("#maxLoanTenor").val(json.loanPrdtDetArry.maxLoanTenor);
                    $("#maxLoanTenorType").val(json.loanPrdtDetArry.maxLoanTenorType);
                    $("#guarantorRequired").val(json.loanPrdtDetArry.guarantorRequired);
                    $("#guarantorNo").val(json.loanPrdtDetArry.guarantorNo);
                    $("#productType").val(json.loanPrdtDetArry.productType);
                    $("#custTypeCustgrp").val(json.loanPrdtDetArry.custTypeCustgrp);
                    $("#custTypeCorp").val(json.loanPrdtDetArry.custTypeCorp);
                    $("#custTypeInd").val(json.loanPrdtDetArry.custTypeInd);
                    $("#cashCollateralRqrd").val(json.loanPrdtDetArry.cashCollateralRqrd);
                    $("#valueFlatCashColt").val(json.loanPrdtDetArry.valueFlatCashColt);
                    $("#valuePrcntCashColt").val(json.loanPrdtDetArry.valuePrcntCashColt);
                    $("#prptyCollateralRqrd").val(json.loanPrdtDetArry.prptyCollateralRqrd);
                    $("#valueFlatPrptyColt").val(json.loanPrdtDetArry.valueFlatPrptyColt);
                    $("#valuePrcntPrptyColt").val(json.loanPrdtDetArry.valuePrcntPrptyColt);
                    $("#invstmntCollateralRqrd").val(json.loanPrdtDetArry.invstmntCollateralRqrd);
                    $("#valueInvstmntCashColt").val(json.loanPrdtDetArry.valueInvstmntCashColt);
                    $("#valueInvstmntPrcntColt").val(json.loanPrdtDetArry.valueInvstmntPrcntColt);
                    $("#minLoanTenor").val(json.loanPrdtDetArry.minLoanTenor);
                    $("#minLoanTenorType").val(json.loanPrdtDetArry.minLoanTenorType);
                    $("#baseIntRate").val(json.loanPrdtDetArry.baseIntRate);
                    $("#interestRate").val(json.loanPrdtDetArry.baseIntRate);
                    $("#crncyIsoCode").text(json.loanPrdtDetArry.crncyIsoCode);
                    $("#crncyIsoCode2").text(json.loanPrdtDetArry.crncyIsoCode);
                    $("#crncyIsoCode3").text(json.loanPrdtDetArry.crncyIsoCode);
                    $("#crncyIsoCode4").text(json.loanPrdtDetArry.crncyIsoCode);
                    $("#intRateType").val(json.loanPrdtDetArry.intRateType);
                    $("#compound").val(json.loanPrdtDetArry.prdtCompound);
                    $("#payBack").val(json.loanPrdtDetArry.prdtPayBack);
                    $("#gracePeriodNo").val(json.loanPrdtDetArry.gracePeriodNo);
                    $("#gracePeriodType").val(json.loanPrdtDetArry.gracePeriodType);
                } else {
                    alert(data + "hiii");
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function onClickProductLoanCalc(pgNo, subPgNo) {
    var custTypSltd = $("#custType option:selected").val();
    var lovNm = "MCF Loan Products - Individual";
    if (custTypSltd === "Corporate") {
        lovNm = "MCF Loan Products - Corporate";
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custTypeYes', 'crdtType', 'radio', true, '', 'prdtTypeID', 'prdtType', 'clear', 1, '', function () {
            getLoanPrdtDetsForApplctnLoanCalc(pgNo, subPgNo);
        });
    } else if (custTypSltd === "Group") {

        lovNm = "MCF Loan Products - Group";
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custTypeYes', 'crdtType', 'radio', true, '', 'prdtTypeID', 'prdtType', 'clear', 1, '', function () {
            getLoanPrdtDetsForApplctnLoanCalc(pgNo, subPgNo);
        });
    } else if (custTypSltd === "Individual") {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custTypeYes', 'crdtType', 'radio', true, '', 'prdtTypeID', 'prdtType', 'clear', 1, '', function () {
            getLoanPrdtDetsForApplctnLoanCalc(pgNo, subPgNo);
        });
    } else {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please Select Customer Type first!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

}

function dsplyLoanCalculator(loadOption, lnkArgs) {
    doAjaxWthCallBck(lnkArgs, 'myFormsModaly', loadOption, 'Loans Calculator', 'myFormsModalyTitle', 'myFormsModalyBody', function () {
        loadScript("app/mcf/mcf.js?v=" + jsFilesVrsn, function () {

            $(document).ready(function () {
//                if (!$.fn.DataTable.isDataTable('#allCageItemsTable')) {
//                    var table1 = $('#allCageItemsTable').DataTable({
//                        "paging": false,
//                        "ordering": false,
//                        "info": false,
//                        "bFilter": false,
//                        "scrollX": false
//                    });
//                    $('#allCageItemsTable').wrap('<div class="dataTables_scroll"/>');
//                }
//                $('#allCageItemsForm').submit(function (e) {
//                    e.preventDefault();
//                    return false;
//                });
//                if (!$.fn.DataTable.isDataTable('#allCageItemTrnsTable')) {
//                    var table2 = $('#allCageItemTrnsTable').DataTable({
//                        "paging": false,
//                        "ordering": false,
//                        "info": false,
//                        "bFilter": false,
//                        "scrollX": false
//                    });
//                    $('#allCageItemTrnsTable').wrap('<div class="dataTables_scroll"/>');
//                }
//                $('#allCageItemsTable tbody').off('click');
//                $('#allCageItemsTable tbody').off('mouseenter');
//                $('#allCageItemsTable tbody').on('click', 'tr', function () {
//                    if ($(this).hasClass('selected')) {
//                        $(this).removeClass('selected');
//
//                    } else {
//                        table1.$('tr.selected').removeClass('selected');
//                        $(this).addClass('selected');
//
//                    }
//                    var rndmNum = $(this).attr('id').split("_")[1];
//                    var pKeyID = typeof $('#allCageItemsRow' + rndmNum + '_ItemID').val() === 'undefined' ? '%' : $('#allCageItemsRow' + rndmNum + '_ItemID').val();
//                    var cageID = typeof $('#allCageItemsRow' + rndmNum + '_CageID').val() === 'undefined' ? '%' : $('#allCageItemsRow' + rndmNum + '_CageID').val();
//
//                    getOneCageTrnsForm(pKeyID, cageID, 5);
//                });
//                $('#allCageItemsTable tbody')
//                        .on('mouseenter', 'tr', function () {
//                            if ($(this).hasClass('highlight')) {
//                                $(this).removeClass('highlight');
//                            } else {
//                                table1.$('tr.highlight').removeClass('highlight');
//                                $(this).addClass('highlight');
//                            }
//                        });
                $('#myFormsModaly').off('hidden.bs.modal');
            });
        });
    });
}

function rejectLoanApplication(RoutingID, actiontyp, srcDocID)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {

        var apprvdLoanAmount = typeof $("#apprvdLoanAmount").val() === 'undefined' ? 0 : $("#apprvdLoanAmount").val();
        var apprvdLoanTenor = typeof $("#apprvdLoanTenor").val() === 'undefined' ? 0 : $("#apprvdLoanTenor").val();
        var apprvdLoanTenorType = typeof $("#apprvdLoanTenorType").val() === 'undefined' ? '' : $("#apprvdLoanTenorType").val();
        var apprvdInterestRate = typeof $("#apprvdInterestRate").val() === 'undefined' ? 0 : $("#apprvdInterestRate").val();
        var apprvlCmnts = typeof $("#apprvlCmnts").val() === 'undefined' ? '' : $("#apprvlCmnts").val();
        $body = $("body");
        if (apprvdLoanAmount == "" || apprvdLoanAmount <= 0) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Approved Amount must be greater than zero",
                callback: function () { /* your callback code */
                }
            });
            return false;
        } else if (apprvdLoanTenor == "" || Number(apprvdLoanTenor) <= 0) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Approved Tenure must be greater than zero",
                callback: function () { /* your callback code */
                }
            });
            return false;
        } else if (apprvdInterestRate == "" || apprvdInterestRate < 0) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Approved Interest Rate must be a positive value",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }

        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', 1040);
        formData.append('q', 'WORKFLOW');
        formData.append('actyp', 40);
        formData.append('srcDocID', srcDocID);
        formData.append('RoutingID', RoutingID);
        formData.append('actiontyp', actiontyp);
        formData.append('apprvdLoanAmount', apprvdLoanAmount);
        formData.append('apprvdLoanTenor', apprvdLoanTenor);
        formData.append('apprvdLoanTenorType', apprvdLoanTenorType);
        formData.append('apprvdInterestRate', apprvdInterestRate);
        formData.append('apprvlCmnts', apprvlCmnts);
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        bootbox.confirm({
            title: "APPROVE LOAN APPLICATION?",
            message: "Are you sure you want to Reject this Loan Application?",
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    $body = $("body");
                    $body.addClass("mdlloadingDiag");
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            $("#myFormsModalLx").modal('hide');
                            bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                    $("#myFormsModalLg").modal('hide');
                                    getMyInbx('', '#myinbox', 'grp=40&typ=2&pg=0&vtyp=0');
                                }
                            });
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function approveLoanApplication(RoutingID, actiontyp, srcDocID)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {

        var apprvdLoanAmount = typeof $("#apprvdLoanAmount").val() === 'undefined' ? 0 : $("#apprvdLoanAmount").val();
        var apprvdLoanTenor = typeof $("#apprvdLoanTenor").val() === 'undefined' ? 0 : $("#apprvdLoanTenor").val();
        var apprvdLoanTenorType = typeof $("#apprvdLoanTenorType").val() === 'undefined' ? '' : $("#apprvdLoanTenorType").val();
        var apprvdInterestRate = typeof $("#apprvdInterestRate").val() === 'undefined' ? 0 : $("#apprvdInterestRate").val();
        var apprvlCmnts = typeof $("#apprvlCmnts").val() === 'undefined' ? '' : $("#apprvlCmnts").val();
	var grpCustId = typeof $("#custGrpID").val() === 'undefined' ? -1 : $("#custGrpID").val();
	var slctdGrpMembers = "";
        var errCount = 0;
        var rcdCount = 0;        
        
        $body = $("body");
        if (apprvdLoanAmount == "" || apprvdLoanAmount <= 0) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Approved Amount must be greater than zero",
                callback: function () { /* your callback code */
                }
            });
            return false;
        } else if (apprvdLoanTenor == "" || Number(apprvdLoanTenor) <= 0) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Approved Tenure must be greater than zero",
                callback: function () { /* your callback code */
                }
            });
            return false;
        } else if (apprvdInterestRate == "" || apprvdInterestRate < 0) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Approved Interest Rate must be a positive value",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }
        

        if(parseInt(grpCustId) > 0){
            
            $('#grpMembersDetTable').find('tr').each(function (i, el) {
                if (i > 0)
                {
                    if (typeof $(el).attr('id') === 'undefined')
                    {
                        /*Do Nothing*/
                    } else {
                        var rndmNum = $(el).attr('id').split("_")[1];
                        if (typeof $('#grpMembersDetRow' + rndmNum + '_CustID').val() === 'undefined')
                        {
                            /*Do Nothing*/
                        } else {

                            if ($('#grpMembersDetRow' + rndmNum + '_CustID').val() == "" || $('#grpMembersDetRow' + rndmNum + '_CustID').val() == -1) {
                                $('#grpMembersDetRow' + rndmNum + '_CustNm').css('border-color', 'red');
                                $('#grpMembersDetRow' + rndmNum + '_CustNm').css('border-width', '2px');
                                errCount = errCount + 1;
                            } else {
                                $('#grpMembersDetRow' + rndmNum + '_CustNm').css('border-color', '#ccc');
                                $('#grpMembersDetRow' + rndmNum + '_CustNm').css('border-width', '1px');
                            }
                            if ($('#grpMembersDetRow' + rndmNum + '_AprvdAmount').val() == "" || $('#grpMembersDetRow' + rndmNum + '_AprvdAmount').val() == 0.00) {
                                $('#grpMembersDetRow' + rndmNum + '_AprvdAmount').css('border-color', 'red');
                                $('#grpMembersDetRow' + rndmNum + '_AprvdAmount').css('border-width', '2px');
                                errCount = errCount + 1;
                            } else {
                                $('#grpMembersDetRow' + rndmNum + '_AprvdAmount').css('border-color', '#ccc');
                                $('#grpMembersDetRow' + rndmNum + '_AprvdAmount').css('border-width', '1px');
                            }
                            if ($('#grpMembersDetRow' + rndmNum + '_RpmntAcctID').val() == "" || $('#grpMembersDetRow' + rndmNum + '_RpmntAcctID').val() == -1) {
                                $('#grpMembersDetRow' + rndmNum + '_RpmntAcctNm').css('border-color', 'red');
                                $('#grpMembersDetRow' + rndmNum + '_RpmntAcctNm').css('border-width', '2px');
                                errCount = errCount + 1;
                            } else {
                                $('#grpMembersDetRow' + rndmNum + '_RpmntAcctNm').css('border-color', '#ccc');
                                $('#grpMembersDetRow' + rndmNum + '_RpmntAcctNm').css('border-width', '1px');
                            }

                            if (errCount <= 0) {
                                slctdGrpMembers = slctdGrpMembers
                                        + $('#grpMembersDetRow' + rndmNum + '_PkeyID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                        + $('#grpMembersDetRow' + rndmNum + '_CustID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                        + $('#grpMembersDetRow' + rndmNum + '_AprvdAmount').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                        + $('#grpMembersDetRow' + rndmNum + '_RpmntAcctID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                        + $('#grpMembersDetRow' + rndmNum + '_CashColtID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                        + $('#grpMembersDetRow' + rndmNum + '_InvtmntColtID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                        + $('#grpMembersDetRow' + rndmNum + '_PrptyColtID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                                rcdCount = rcdCount + 1;
                            }
                            var lineCnta = lineCnta + 1;
                        }
                    }
                }
            });

            if (errCount > 0) {
                box2 = bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "<span style='color:red;'><b><i>Please complete all highlighted fields</i></b></span>",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
            
        }	        

        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', 1040);
        formData.append('q', 'WORKFLOW');
        formData.append('actyp', 40);
        formData.append('srcDocID', srcDocID);
        formData.append('RoutingID', RoutingID);
        formData.append('actiontyp', actiontyp);
        formData.append('apprvdLoanAmount', apprvdLoanAmount);
        formData.append('apprvdLoanTenor', apprvdLoanTenor);
        formData.append('apprvdLoanTenorType', apprvdLoanTenorType);
        formData.append('apprvdInterestRate', apprvdInterestRate);
        formData.append('apprvlCmnts', apprvlCmnts);
        if(rcdCount > 0){
            formData.append('slctdGrpMembers',slctdGrpMembers);
        }		        
        
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        bootbox.confirm({
            title: "APPROVE LOAN APPLICATION?",
            message: "Are you sure you want to Approve this Loan Application?",
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    $body = $("body");
                    $body.addClass("mdlloadingDiag");
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            $("#myFormsModalLx").modal('hide');
                            bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                    $("#myFormsModalLg").modal('hide');
                                    getMyInbx('', '#myinbox', 'grp=40&typ=2&pg=0&vtyp=0');
                                }
                            });
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function getTblRowsCount(tblElementID) {
    var rowCount = 0;
    $('#' + tblElementID).find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {

            } else {
                rowCount = rowCount + 1;
            }
        }
    });
    return rowCount;
}

function onDsbmntBnkBranchChange() {
    var rowCount = getTblRowsCount("disbmntDetTblAdd");
    if (rowCount <= 0) {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'Sites/Locations New', 'gnrlOrgID', '', '', 'radio', true, '', 'bnkBranchID', 'bnkBranch', 'clear', 1, '');
    } else {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red; font-weight:bold !important;'>To change Branch, delete all the disbursement detail records first!</span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
}

function onDsbmntCrncyChange() {
    var rowCount = getTblRowsCount("disbmntDetTblAdd");
    if (rowCount <= 0) {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'Bank Currencies (LOV)', 'gnrlOrgID', '', '', 'radio', true, '', 'crncyID', 'crncy', 'clear', 1, '');
    } else {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red; font-weight:bold !important;'>To change Currency, delete all the disbursement detail records first!</span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
}

function dspCustGrpOnDisbForm() {
//alert($("#custType option:selected").val());
    var custType = $("#custType option:selected").val();
    if (custType === "Group Members") {
        $('#custGrpDiv').css('display', 'block');
        $('#custGrpID').val(-1);
        $('#custGrp').val('');
    } else {
        $('#custGrpDiv').css('display', 'none');
        $('#custGrpID').val(-1);
        $('#custGrp').val('');
    }

}

function saveCashDenominationForm_LoanRepay(elementID, subPgNo)
{
    var ttlAmount = 0;
    var ttlAmount1 = 0;
    var $tds;
    var val;
    var qty1;
    var rate1;
    var lnTrnsType;
    var curItemVal;
    var isVld = false;
    var crncyNm = $('#mcfPymtCrncyNm').val();
    var errMsg = "";
    $('#cashBreakdownTblEDT').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum1 = $(el).attr('id').split("_")[1];
                qty1 = $("#cashBreakdownRow_" + rndmNum1 + " .cbQty").val();
                rate1 = $("#cashBreakdownRow_" + rndmNum1 + " .cbExchngRate").val().replace(/,/g, "");
                lnTrnsType = $("#cashBreakdownRow_" + rndmNum1 + " .lnTrnsType").val();
                $tds = $("#cashBreakdownRow_" + rndmNum1).find('td');
                //val = $.trim($tds.eq(4).text()); OLD
                val = $.trim($tds.eq(5).text());
                if (lnTrnsType == "Refund") {
                    ttlAmount = ttlAmount - (Number(qty1) * Number(val));
                    ttlAmount1 = ttlAmount1 - (Number(qty1) * Number(val) * Number(rate1));
                } else {
                    ttlAmount = ttlAmount + (Number(qty1) * Number(val));
                    ttlAmount1 = ttlAmount1 + (Number(qty1) * Number(val) * Number(rate1));
                }

                if (isInt(Number(qty1)) === false)
                {
                    errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                            'font-weight:bold;color:red;">Denomination Qty(Pieces) for Row No. ' + i + ' cannot be empty!</span></p>';
                    $("#cashBreakdownRow_" + rndmNum1 + " .cbQty").addClass('rho-error');
                    $("#cashBreakdownRow_" + rndmNum1 + " .cbTTlAmnt").addClass('rho-error');
                } else {
                    $("#cashBreakdownRow_" + rndmNum1 + " .cbQty").removeClass('rho-error');
                    $("#cashBreakdownRow_" + rndmNum1 + " .cbTTlAmnt").removeClass('rho-error');
                }
            }
        }
    });
    if (rhotrim(errMsg, '; ') !== '')
    {
        bootbox.alert({
            title: 'System Alert!',
            /*size: 'small',*/
            message: errMsg});
        return false;
    }
    $('#cashBreakdownLgnd').text(crncyNm + ' ' + addCommas(ttlAmount.toFixed(2)));
    $('#mcfCptrdCbValsTtlBtn').text(addCommas(ttlAmount.toFixed(2)));
    $('#cashDenominationsTtlRaw').val(ttlAmount.toFixed(2));
    $('#cashDenominationsTtlRaw1').val(ttlAmount1.toFixed(2));
    $('#cashDenominationsTtlFmtd').val(addCommas(ttlAmount.toFixed(2)));
    var obj;
    var acctTrnsId = typeof $("#acctTrnsId").val() === 'undefined' ? -1 : $("#acctTrnsId").val();
    var bnkPymtDfltVltID = typeof $("#bnkPymtDfltVltID").val() === 'undefined' ? -1 : $("#bnkPymtDfltVltID").val();
    var bnkPymtDfltCageID = typeof $("#bnkPymtDfltCageID").val() === 'undefined' ? -1 : $("#bnkPymtDfltCageID").val();
    var bnkPymtDfltItemState = typeof $("#bnkPymtDfltItemState").val() === 'undefined' ? '' : $("#bnkPymtDfltItemState").val();
    var cashBrkdwns = "";
    var crncyNm = $('#acctCrncy').val();
    $('#cashBreakdownTblEDT').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#cashBreakdownRow_' + rndmNum).val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {
//var isCrct = typeof $("input[name='srvyQstnAnsRow" + rndmNum + "_IsCrct']:checked").val() === 'undefined' ? 'NO' : 'YES';
                    cashBrkdwns = cashBrkdwns + $('#cashBreakdownRow' + rndmNum + '_denomID').text().replace(/(~)+/g, "{-;-;}").replace(/(\|)+/g, "{:;:;}") + "~"
                            + $('#cashBreakdownRow' + rndmNum + '_denomQty').val().replace(/(~)+/g, "{-;-;}").replace(/(\|)+/g, "{:;:;}") + "~"
                            + $('#cashBreakdownRow' + rndmNum + '_value').text().replace(/(~)+/g, "{-;-;}").replace(/(\|)+/g, "{:;:;}") + "~"
                            + $('#cashBreakdownRow' + rndmNum + '_cashAnalysisID').text().replace(/(~)+/g, "{-;-;}").replace(/(\|)+/g, "{:;:;}") + "~"
                            + $('#cashBreakdownRow' + rndmNum + '_ExchngRate').val().replace(/(~)+/g, "{-;-;}").replace(/(\|)+/g, "{:;:;}") + "~"
                            + $('#cashBreakdownRow' + rndmNum + '_lnTrnsType').val().replace(/(~)+/g, "{-;-;}").replace(/(\|)+/g, "{:;:;}") + "|";
                }
            }
        }
    });
    $('#trnsAmount').val($('#cashDenominationsTtlFmtd').val());
    $('#trnsAmntRaw').val($('#cashDenominationsTtlRaw').val());
    var accntCurCashVal = Number($('#cashDenominationsTtlRaw1').val().replace(/,/g, ""));
    var accntCurChqVal = 0;
    $('#trnsAmntRaw1').val(accntCurCashVal);
    $('#tllrTrnsAmntTtlFld').html(crncyNm + ' ' + addCommas((accntCurCashVal + accntCurChqVal).toFixed(2)));
    $('#ttlDocAmntVal').val(accntCurCashVal + accntCurChqVal);
    var msgsTitle = 'Cash Breakdown';
    var dialog = bootbox.alert({
        title: 'Save ' + msgsTitle,
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> Saving ' + msgsTitle + '...Please Wait...</p>',
        callback: function () {
            $('#' + elementID).modal('hide');
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            var data1 = new FormData();
            data1.append('grp', 17);
            data1.append('typ', 1);
            data1.append('pg', 15);
            data1.append('q', 'UPDATE');
            data1.append('subPgNo', subPgNo);
            data1.append('vtyp', 2);
            data1.append('cashBrkdwns', cashBrkdwns);
            data1.append('PKeyID', acctTrnsId);
            data1.append('bnkPymtDfltVltID', bnkPymtDfltVltID);
            data1.append('bnkPymtDfltCageID', bnkPymtDfltCageID);
            data1.append('bnkPymtDfltItemState', bnkPymtDfltItemState);
            $.ajax({
                url: "index.php",
                method: 'POST',
                data: data1,
                async: true,
                cache: false,
                contentType: false,
                processData: false,
                success: function (result) {
                    setTimeout(function () {
                        var msg = "";
                        var rowValID = -1;
                        if (/^[\],:{}\s]*$/.test(result.replace(/\\["\\\/bfnrtu]/g, '@').
                                replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                            obj = $.parseJSON(result);
                            //SET ROW ID
                            rowValID = obj.rowID;
                            msg = "Json Data";
                        } else {
                            msg = result;
                        }
                        $body.removeClass("mdlloadingDiag");
                        dialog.find('.bootbox-body').html(msg);
                        setTimeout(function () {
                         dialog.modal('hide');
                         $('#' + elementID).modal('hide');
                         }, 100);
                    }, 50);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function calcCashBreadownRowVal_LoanRepay(tblRowID, classNm) {
    var ttlDenomVal = 0;
    var qty;
    var $tds;
    var val;
    var curItemVal;
    if (classNm == "cbQty") {
        qty = $("#" + tblRowID + " .cbQty").val();
        $tds = $('#' + tblRowID).find('td');
        val = $.trim($tds.eq(5).text());
        ttlDenomVal = (Number(qty) * Number(val));
        if ($.trim($tds.eq(0).text()) == 'Coin') {
            $('#' + tblRowID).find("td:eq(3) input[type='text']").val(addCommas(ttlDenomVal.toFixed(2)));
        } else {
            $('#' + tblRowID).find("td:eq(3) input[type='text']").val(addCommas(ttlDenomVal));
        }

        curItemVal = $('#cashDenominationsTtl').val();
    } else if (classNm == "cbTTlAmnt") {
        $tds = $('#' + tblRowID).find('td');
        ttlDenomVal = Number($("#" + tblRowID + " .cbTTlAmnt").val().replace(/,/g, ""));
        $("#" + tblRowID + " .cbTTlAmnt").val(addCommas(ttlDenomVal.toFixed(2)));
        //var val = $.trim($tds.eq(4).text()); OLD
        val = $.trim($tds.eq(5).text());
        qty = (Number(ttlDenomVal) / Number(val));
        //alert('ttlDenomVal '+ttlDenomVal+' val '+val+' qty '+qty);
        $('#' + tblRowID).find("td:eq(2) input[type='number']").val(qty);
        curItemVal = $('#cashDenominationsTtl').val();
    } else if (classNm == "cbExchngRate") {
        $("#" + tblRowID + " .cbExchngRate").val(Number($("#" + tblRowID + " .cbExchngRate").val().replace(/,/g, "")).toFixed(4));
        curItemVal = $('#cashDenominationsTtl').val();
    } else {
        curItemVal = $('#cashDenominationsTtl').val();
    }
    calcAllMcfCbTtl_LoanRepay();
}

function calcAllMcfCbTtl_LoanRepay() {
    var ttlAmount = 0;
    var ttlAmount1 = 0;
    var $tds;
    var val;
    var qty1;
    var rate1;
    var lnTrnsType;
    var crncyNm = $('#mcfPymtCrncyNm').val();
    var mcfTlrTrnsType = $('#mcfTlrTrnsType').val();
    $('#cashBreakdownTblEDT').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                qty1 = $("#cashBreakdownRow_" + rndmNum + " .cbQty").val();
                rate1 = $("#cashBreakdownRow_" + rndmNum + " .cbExchngRate").val().replace(/,/g, "");
                lnTrnsType = $("#cashBreakdownRow_" + rndmNum + " .lnTrnsType").val();
                $tds = $("#cashBreakdownRow_" + rndmNum).find('td');
                //val = $.trim($tds.eq(4).text()); OLD
                val = $.trim($tds.eq(5).text());
                if (lnTrnsType == "Refund") {
                    ttlAmount = ttlAmount - (Number(qty1) * Number(val));
                    ttlAmount1 = ttlAmount1 - (Number(qty1) * Number(val) * Number(rate1));
                } else {
                    ttlAmount = ttlAmount + (Number(qty1) * Number(val));
                    ttlAmount1 = ttlAmount1 + (Number(qty1) * Number(val) * Number(rate1));
                }

                var itemID = $.trim($tds.eq(6).text());
                var rnngBals = typeof $('#cashBreakdownDenom_' + itemID + '').val() === 'undefined' ? '0' : $('#cashBreakdownDenom_' + itemID + '').val();
                if (mcfTlrTrnsType.trim() == "DEPOSIT" || mcfTlrTrnsType.trim() == "LOAN_REPAY") {
                    var newRnngBals = 0;
                    if (lnTrnsType == "Refund") {
                        newRnngBals = Number(rnngBals.replace(/[^-?0-9\.]/g, '')) - (Number(qty1) * Number(val));
                    } else {
                        newRnngBals = Number(rnngBals.replace(/[^-?0-9\.]/g, '')) + (Number(qty1) * Number(val));
                    }

                    $('#cashBreakdownRow' + i + '_RnngBal').val(addCommas(newRnngBals.toFixed(2)));
                } else {
                    var newRnngBals = Number(rnngBals.replace(/[^-?0-9\.]/g, '')) - (Number(qty1) * Number(val));
                    $('#cashBreakdownRow' + i + '_RnngBal').val(addCommas(newRnngBals.toFixed(2)));
                }
            }
        }
    });
    $('#cashBreakdownLgnd').text(crncyNm + ' ' + addCommas(ttlAmount.toFixed(2)));
    $('#mcfCptrdCbValsTtlBtn').text(addCommas(ttlAmount.toFixed(2)));
    $('#cashDenominationsTtlRaw').val(ttlAmount.toFixed(2));
    $('#cashDenominationsTtlRaw1').val(ttlAmount1.toFixed(2));
    $('#cashDenominationsTtlFmtd').val(addCommas(ttlAmount.toFixed(2)));
}

function finalzeMCFTrnsRqst_LoanPymnt(trnsType, vwtype, subPgNo)
{
    var pKeyID = typeof $("#acctTrnsId").val() === 'undefined' ? -1 : $("#acctTrnsId").val();
    var dialog = bootbox.confirm({
        title: 'Finalize Request?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">FINALIZE</span> this Request?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Finalize Request?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Finalizing Request...Please Wait...</p>',
                    callback: function () {
                        if (pKeyID > 0)
                        {
                            getCoreBankingForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', trnsType, 15, subPgNo, 0, 'ADD', pKeyID);
                        }
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 1041,
                                    q: 'FINALIZE',
                                    mcfTrnsHdrID: pKeyID
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            dialog1.find('.bootbox-body').html('<span style="color:red;">Nothing to Withdraw!</span>');
                        }, 500);
                    }
                });
            }
        }
    });
}

function onClickManualPymntLoans(pgNo, subPgNo) {
    var disbmntHdrID = $("#disbmntHdrID").val();
    if (disbmntHdrID == "-1") {
        $("#disbmntHdrNo").css('border-color', 'red');
        $("#disbmntHdrID").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red !important;'>Please Select Disbursement Header No. first!</span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        $("#disbmntHdrNo").css('border-color', '#ccc');
        $("#disbmntHdrID").css('border-width', '1px');
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'MCF Disbursed Loans for Manual Payments', 'gnrlOrgID', 'disbmntHdrID', '', 'radio', true, '', 'disbmntDetID', 'disbmntDetNo', 'clear', 1, '', function () {
            getDisbursedLoanDetsForPymnts(pgNo, subPgNo);
        });
    }

}

function getDisbursedLoanDetsForPymnts(pgNo, subPgNo) {
    var disbmntDetID = $("#disbmntDetID").val();
//function getAcctDetails(pgNo, subPgNo, vtyp, vtypActn)
//{
//    var acctNoFind = $('#acctNoFind').val();
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//$('#' + modalBodyID).html(xmlhttp.responseText);            
            var msg = "";
            var data = xmlhttp.responseText;
            //var rowValID = -1;

            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                json = $.parseJSON(data);
                //alert(json.signatories.length);
                var amnt = json.accountDetails.disbrsdLoanAmnt;
                $('#disbrsdLoanAmnt').val(json.accountDetails.disbrsdLoanAmnt);
                $('#trnsAmntRaw').val(json.accountDetails.disbrsdLoanAmnt);
                $('#trnsAmntRaw1').val(json.accountDetails.disbrsdLoanAmnt);
                $('#trnsAmount').val(addCommas(Number(amnt.replace(/[^-?0-9\.]/g, '')).toFixed(2)));
                $('#mandate').val('Only to sign');
                //$('#trnsPersonName').val(json.accountDetails.trnsPersonName);

                //construct SIGNATORIES table dynamically
                var signCount = json.signatories.length;
                var acctSignatories = '';
                var i = 0;
                var cntr = 0;
                for (i = 0; i < signCount; i++) {
                    cntr++;
                    acctSignatories = acctSignatories + '<tr id="acctSignatoriesTblAddRow_' + cntr + '">' +
                            '<td class="lovtd">' + cntr + '</td>' +
                            '<td  class="lovtd" id="acctSignatoriesTblAddRow' + cntr + '_name">' + json.signatories[i].name + '</td>' +
                            '<td class="lovtd" style="text-align: center !important;"><input type="checkbox" class="form-check-input"></td>' +
                            '<td class="lovtd">' +
                            '<button type="button" class="btn btn-info btn-sm" onclick="viewSignatoryForm(\'myLovModal\', \'myLovModalBody\', \'myLovModalTitle\', \'acctSignatoryForm\', \'\', \'Signatory\', 13, 2.1, 5, \'VIEW\',' + json.signatories[i].id + ',\'LOANPYMNT\');" style="padding:2px !important;">View Signatory</button>' +
                            '</td>' +
                            '<td class="lovtd">' + json.signatories[i].bioData + '</td>' +
                            '<td  class="lovtd" style="display:none;" id="acctSignatoriesTblAddRow' + cntr + '_ID">' + json.signatories[i].id + '</td>' +
                            '<td style="display:none;" id="acctSignatoriesTblAddRow' + cntr + '_MndtrySign">' + json.signatories[i].toSignMndtry + '</td>' +
                            '</tr>';
                }
                $('#acctSignatoriesTblTbody').children('tr').remove();
                $('#acctSignatoriesTblAdd').append(acctSignatories);
            } else {
                msg = data;
                if (msg == "INVALID ID") {

                    $('#disbrsdLoanAmnt').val('');
                    $('#trnsAmntRaw').val('');
                    $('#trnsAmntRaw1').val('');
                    $('#trnsAmount').val('');
                    //$('#trnsPersonType').val('');
                    $('#trnsPersonName').val('');
                    $('#acctSignatoriesTblTbody').children('tr').remove();
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg, //json.signatories[0].id + ' 1.name' + json.signatories[1].name, //json.accountDetails.prsnTypeEntity,
                        callback: function () { /* your callback code */
                        }
                    });
                } else {
                    alert("HelloOOO " + data);
                }
            }

            $body.removeClass("mdlloadingDiag");
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=0&vtypActn=LOANPYMNT&disbmntDetID=" + disbmntDetID);
}

function wthdrwMCFTrnsRqst_CrdtMgmnt(trnsType, vwtype, subPgNo)
{
    var pKeyID = typeof $("#acctTrnsId").val() === 'undefined' ? -1 : $("#acctTrnsId").val();
    var dialog = bootbox.confirm({
        title: 'Withdraw Request?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">WITHDRAW</span> this Request?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Withdraw Request?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Withdrawing Request...Please Wait...</p>',
                    callback: function () {
                        if (pKeyID > 0)
                        {
                            getCoreBankingForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', trnsType, 15, subPgNo, 0, 'ADD', pKeyID);
                        }
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 1040,
                                    q: 'DELETE',
                                    mcfTrnsHdrID: pKeyID
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            dialog1.find('.bootbox-body').html('<span style="color:red;">Nothing to Withdraw!</span>');
                        }, 500);
                    }
                });
            }
        }
    });
}

function authrzeMCFTrnsRqst_CrdtMgmnt(trnsType, vwtype, subPgNo)
{
    var pKeyID = typeof $("#acctTrnsId").val() === 'undefined' ? -1 : $("#acctTrnsId").val();
    var dialog = bootbox.confirm({
        title: 'Authorize Request?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">AUTHORIZE</span> this Request?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Authorize Request?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Authorizing Request...Please Wait...</p>',
                    callback: function () {
                        if (pKeyID > 0)
                        {
                            getCoreBankingForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', trnsType, 15, subPgNo, 0, 'ADD', pKeyID);
                        }
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 1040,
                                    q: 'FINALIZE',
                                    mcfTrnsHdrID: pKeyID
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            dialog1.find('.bootbox-body').html('<span style="color:red;">Nothing to Withdraw!</span>');
                        }, 500);
                    }
                });
            }
        }
    });
}

function finalzeMCFTrnsRqst_CrdtMgmnt(trnsType, vwtype, subPgNo)
{
    var pgNoFnlze = 2041;
    if (trnsType == "LOAN_PYMNT") {
        pgNoFnlze = 1041;
    }
    var pKeyID = typeof $("#acctTrnsId").val() === 'undefined' ? -1 : $("#acctTrnsId").val();
    var dialog = bootbox.confirm({
        title: 'Finalize Request?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">FINALIZE</span> this Request?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Finalize Request?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Finalizing Request...Please Wait...</p>',
                    callback: function () {
                        if (pKeyID > 0)
                        {
                            getCoreBankingForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', trnsType, 15, subPgNo, 0, 'ADD', pKeyID);
                        }
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: pgNoFnlze,
                                    q: 'FINALIZE',
                                    mcfTrnsHdrID: pKeyID
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            dialog1.find('.bootbox-body').html('<span style="color:red;">Nothing to Withdraw!</span>');
                        }, 500);
                    }
                });
            }
        }
    });
}

function delMCFTrnsHdr_LoanRpmnt(rowIDAttrb)
{
    var msg = 'Banking Transaction';
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    var trnsNum = "";
    if (typeof $('#allMcfTrnsHdrsRow' + rndmNum + '_HdrID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#allMcfTrnsHdrsRow' + rndmNum + '_HdrID').val();
        var $tds = $('#' + rowIDAttrb).find('td');
        trnsNum = $.trim($tds.eq(3).text());
    }
    /*alert('#allVmsTrnsHdrsRow' + rndmNum + '_HdrID' + pKeyID + "|" + trnsNum);*/
    var dialog = bootbox.confirm({
        title: 'Delete ' + msg + '?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">DELETE</span> this ' + msg + '?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Delete ' + msg + '?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Deleting ' + msg + '...Please Wait...</p>',
                    callback: function () {
                        $("body").css("padding", "0px 0px 0px 0px");
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 15,
                                    subPgNo: 4.3,
                                    q: 'DELETE',
                                    actyp: 1,
                                    trnsHdrID: pKeyID,
                                    trnsNum: trnsNum
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                        if (result1.indexOf("Success") !== -1) {
                                            $("#" + rowIDAttrb).remove();
                                        }
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            $("#" + rowIDAttrb).remove();
                            dialog1.find('.bootbox-body').html('Row Removed Successfully!');
                        }, 500);
                    }
                });
            }
        }
    });
}
/**END OF NEW FUNCTIONS 07062017 **/

function saveCashDenominationFormLR(elementID, subPgNo)
{
    var ttlAmount = 0;
    var ttlAmount1 = 0;
    var $tds;
    var val;
    var qty1;
    var rate1;
    var curItemVal;
    var isVld = false;
    var crncyNm = $('#mcfPymtCrncyNm').val();
    var errMsg = "";
    $('#cashBreakdownTblEDT').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum1 = $(el).attr('id').split("_")[1];
                qty1 = $("#cashBreakdownRow_" + rndmNum1 + " .cbQty").val();
                rate1 = $("#cashBreakdownRow_" + rndmNum1 + " .cbExchngRate").val().replace(/,/g, "");
                $tds = $("#cashBreakdownRow_" + rndmNum1).find('td');
                //val = $.trim($tds.eq(4).text()); OLD
                val = $.trim($tds.eq(5).text());
                ttlAmount = ttlAmount + (Number(qty1) * Number(val));
                ttlAmount1 = ttlAmount1 + (Number(qty1) * Number(val) * Number(rate1));
                if (isInt(Number(qty1)) === false)
                {
                    errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                            'font-weight:bold;color:red;">Denomination Qty(Pieces) for Row No. ' + i + ' cannot be empty!</span></p>';
                    $("#cashBreakdownRow_" + rndmNum1 + " .cbQty").addClass('rho-error');
                    $("#cashBreakdownRow_" + rndmNum1 + " .cbTTlAmnt").addClass('rho-error');
                } else {
                    $("#cashBreakdownRow_" + rndmNum1 + " .cbQty").removeClass('rho-error');
                    $("#cashBreakdownRow_" + rndmNum1 + " .cbTTlAmnt").removeClass('rho-error');
                }
            }
        }
    });
    if (rhotrim(errMsg, '; ') !== '')
    {
        bootbox.alert({
            title: 'System Alert!',
            /*size: 'small',*/
            message: errMsg});
        return false;
    }
    $('#cashBreakdownLgnd').text(crncyNm + ' ' + addCommas(ttlAmount.toFixed(2)));
    $('#mcfCptrdCbValsTtlBtn').text(addCommas(ttlAmount.toFixed(2)));
    $('#cashDenominationsTtlRaw').val(ttlAmount.toFixed(2));
    $('#cashDenominationsTtlRaw1').val(ttlAmount1.toFixed(2));
    $('#cashDenominationsTtlFmtd').val(addCommas(ttlAmount.toFixed(2)));
    var obj;
    var acctTrnsId = typeof $("#acctTrnsId").val() === 'undefined' ? -1 : $("#acctTrnsId").val();
    var bnkPymtDfltVltID = typeof $("#bnkPymtDfltVltID").val() === 'undefined' ? -1 : $("#bnkPymtDfltVltID").val();
    var bnkPymtDfltCageID = typeof $("#bnkPymtDfltCageID").val() === 'undefined' ? -1 : $("#bnkPymtDfltCageID").val();
    var bnkPymtDfltItemState = typeof $("#bnkPymtDfltItemState").val() === 'undefined' ? '' : $("#bnkPymtDfltItemState").val();
    var cashBrkdwns = "";
    var crncyNm = $('#acctCrncy').val();
    $('#cashBreakdownTblEDT').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#cashBreakdownRow_' + rndmNum).val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {
//var isCrct = typeof $("input[name='srvyQstnAnsRow" + rndmNum + "_IsCrct']:checked").val() === 'undefined' ? 'NO' : 'YES';
                    cashBrkdwns = cashBrkdwns + $('#cashBreakdownRow' + rndmNum + '_denomID').text().replace(/(~)+/g, "{-;-;}").replace(/(\|)+/g, "{:;:;}") + "~"
                            + $('#cashBreakdownRow' + rndmNum + '_denomQty').val().replace(/(~)+/g, "{-;-;}").replace(/(\|)+/g, "{:;:;}") + "~"
                            + $('#cashBreakdownRow' + rndmNum + '_value').text().replace(/(~)+/g, "{-;-;}").replace(/(\|)+/g, "{:;:;}") + "~"
                            + $('#cashBreakdownRow' + rndmNum + '_cashAnalysisID').text().replace(/(~)+/g, "{-;-;}").replace(/(\|)+/g, "{:;:;}") + "~"
                            + $('#cashBreakdownRow' + rndmNum + '_ExchngRate').val().replace(/(~)+/g, "{-;-;}").replace(/(\|)+/g, "{:;:;}") + "|";
                }
            }
        }
    });
    $('#trnsAmount').val($('#cashDenominationsTtlFmtd').val());
    $('#trnsAmntRaw').val($('#cashDenominationsTtlRaw').val());
    var accntCurCashVal = Number($('#cashDenominationsTtlRaw1').val().replace(/,/g, ""));
    var accntCurChqVal = 0;
    $('#trnsAmntRaw1').val(accntCurCashVal);
    $('#tllrTrnsAmntTtlFld').html(crncyNm + ' ' + addCommas((accntCurCashVal + accntCurChqVal).toFixed(2)));
    $('#ttlDocAmntVal').val(accntCurCashVal + accntCurChqVal);
    var msgsTitle = 'Cash Breakdown';
    var dialog = bootbox.alert({
        title: 'Save ' + msgsTitle,
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> Saving ' + msgsTitle + '...Please Wait...</p>',
        callback: function () {
            $('#' + elementID).modal('hide');
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            var data1 = new FormData();
            data1.append('grp', 17);
            data1.append('typ', 1);
            data1.append('pg', 15);
            data1.append('q', 'UPDATE');
            data1.append('subPgNo', subPgNo);
            data1.append('vtyp', 2);
            data1.append('cashBrkdwns', cashBrkdwns);
            data1.append('PKeyID', acctTrnsId);
            data1.append('bnkPymtDfltVltID', bnkPymtDfltVltID);
            data1.append('bnkPymtDfltCageID', bnkPymtDfltCageID);
            data1.append('bnkPymtDfltItemState', bnkPymtDfltItemState);
            $.ajax({
                url: "index.php",
                method: 'POST',
                data: data1,
                async: true,
                cache: false,
                contentType: false,
                processData: false,
                success: function (result) {
                    setTimeout(function () {
                        var msg = "";
                        var rowValID = -1;
                        if (/^[\],:{}\s]*$/.test(result.replace(/\\["\\\/bfnrtu]/g, '@').
                                replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                            obj = $.parseJSON(result);
                            //SET ROW ID
                            rowValID = obj.rowID;
                            msg = "Json Data";
                        } else {
                            msg = result;
                        }
                        $body.removeClass("mdlloadingDiag");
                        dialog.find('.bootbox-body').html(msg);
                        /*setTimeout(function () {
                         dialog.modal('hide');
                         $('#' + elementID).modal('hide');
                         }, 100);*/
                    }, 50);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function deleteLoanDisbursement(disbmntHdrID, disbStatus)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Disbursement?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                if (!(disbStatus == "Incomplete" || disbStatus == "Rejected" || disbStatus == "Withdrawn")) {
                    mnBox.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Sorry! Only Disbursements with Status <b>Incomplete</b>, <b>Rejected</b> or <b>Withdrawn</b> can be deleted.",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        getCustData('', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.2')
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.2&q=DELETE&PKeyID=" + disbmntHdrID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function deleteLoanDisbursementDet(disbmntDetID, disbmntHdrID)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to remove this loan from the Disbursement List?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        getDisbursementForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Disbursement', 15, 4.2, 0, 'EDIT', disbmntHdrID, 'indCustTable', 'indCustTableRow1', function () {

                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        });
                        //$('table#disbmntDetTblAdd tbody tr#disbmntDetTblAddRow_' + disbmntDetID).remove();
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.2&q=DELETE&actyp=1&PKeyID=" + disbmntDetID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function deleteLoanApplication(loanRqstID, loanStatus)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this product?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                if (!(loanStatus == "Incomplete" || loanStatus == "Rejected" || loanStatus == "Withdrawn")) {
                    mnBox.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Sorry! Only Loan Applications with Status <b>Incomplete</b>, <b>Rejected</b> or <b>Withdrawn</b> can be deleted.",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        getCustData('', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.1')
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.1&q=DELETE&PKeyID=" + loanRqstID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function onChangeCrdtType() {
    var crdtType = typeof $("#crdtType").val() === 'undefined' ? '' : $("#crdtType").val();
    var isAccountRqrd = typeof $("#isAccountRqrd").val() === 'undefined' ? '' : $("#isAccountRqrd").val();
    $('#prdtTypeID').val(-1);
    $('#prdtType').val('');
    if (isAccountRqrd == 'Yes') {
        if (crdtType == "Overdraft") {
            $("#rpmntSrcAcctDiv").css("display", "table-cell");
            $("#rpmntSrcType").val("Account Deductions");
            $("#rpmntSrcType").attr("disabled", true);
        }
    } else {

        if (crdtType == "Overdraft") {
            $("#rpmntSrcAcctDiv").css("display", "table-cell");
            $("#rpmntSrcType").val("Account Deductions");
            $("#rpmntSrcType").attr("disabled", true);
        } else {
            $("#rpmntSrcType").attr("disabled", false);
        }

    }
}

function onChangeRpymntType() {
    var rpmntSrcType = typeof $("#rpmntSrcType").val() === 'undefined' ? '' : $("#rpmntSrcType").val();
    if (rpmntSrcType == "Manual Payments") {
        $("#rpmntSrcAcctDiv").css("display", "none");
        $("#rpmntSrcAcctID").val(-1);
        $("#rpmntSrcAcct").val("");
    } else {
        $("#rpmntSrcAcctDiv").css("display", "table-cell");
    }
}

function getLoanPrdtDetsForApplctn(pgNo, subPgNo)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var json;
        var prdtTypeID = typeof $("#prdtTypeID").val() === 'undefined' ? -1 : $("#prdtTypeID").val();
        var crdtType = typeof $("#crdtType").val() === 'undefined' ? '' : $("#crdtType").val();
        var rpmntSrcType = typeof $("#rpmntSrcType").val() === 'undefined' ? '' : $("#rpmntSrcType").val();
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', 4);
        formData.append('PKeyID', prdtTypeID);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    json = $.parseJSON(data);
                    //$("#loanRqstID").val(json.loanProductId);
                    //$("#currencyId").val(json.loanPrdtDetArry.currencyId);
                    $("#isAccountRqrd").val(json.loanPrdtDetArry.isAccountRqrd);
                    $("#loanMaxAmount").val(json.loanPrdtDetArry.loanMaxAmount);
                    $("#loanMinAmount").val(json.loanPrdtDetArry.loanMinAmount);
                    $("#maxLoanTenor").val(json.loanPrdtDetArry.maxLoanTenor);
                    $("#maxLoanTenorType").val(json.loanPrdtDetArry.maxLoanTenorType);
                    $("#guarantorRequired").val(json.loanPrdtDetArry.guarantorRequired);
                    $("#guarantorNo").val(json.loanPrdtDetArry.guarantorNo);
                    $("#productType").val(json.loanPrdtDetArry.productType);
                    $("#custTypeCustgrp").val(json.loanPrdtDetArry.custTypeCustgrp);
                    $("#custTypeCorp").val(json.loanPrdtDetArry.custTypeCorp);
                    $("#custTypeInd").val(json.loanPrdtDetArry.custTypeInd);
                    $("#cashCollateralRqrd").val(json.loanPrdtDetArry.cashCollateralRqrd);
                    $("#valueFlatCashColt").val(json.loanPrdtDetArry.valueFlatCashColt);
                    $("#valuePrcntCashColt").val(json.loanPrdtDetArry.valuePrcntCashColt);
                    $("#prptyCollateralRqrd").val(json.loanPrdtDetArry.prptyCollateralRqrd);
                    $("#valueFlatPrptyColt").val(json.loanPrdtDetArry.valueFlatPrptyColt);
                    $("#valuePrcntPrptyColt").val(json.loanPrdtDetArry.valuePrcntPrptyColt);
                    $("#invstmntCollateralRqrd").val(json.loanPrdtDetArry.invstmntCollateralRqrd);
                    $("#valueInvstmntCashColt").val(json.loanPrdtDetArry.valueInvstmntCashColt);
                    $("#valueInvstmntPrcntColt").val(json.loanPrdtDetArry.valueInvstmntPrcntColt);
                    $("#minLoanTenor").val(json.loanPrdtDetArry.minLoanTenor);
                    $("#minLoanTenorType").val(json.loanPrdtDetArry.minLoanTenorType);
                    $("#baseIntRate").val(json.loanPrdtDetArry.baseIntRate);
                    $("#interestRate").val(json.loanPrdtDetArry.baseIntRate);
                    $("#crncyIsoCode").text(json.loanPrdtDetArry.crncyIsoCode);
                    if (json.loanPrdtDetArry.isAccountRqrd == "Yes") {
                        $("#rpmntSrcAcctDiv").css("display", "table-cell");
                        $("#rpmntSrcType").val("Account Deductions");
                        $("#rpmntSrcType").attr("disabled", true);
                    } else {
                        $("#rpmntSrcType").attr("disabled", false);
                    }

                    if (crdtType == "Overdraft") {
                        $("#rpmntSrcAcctDiv").css("display", "table-cell");
                        $("#rpmntSrcType").val("Account Deductions");
                        $("#rpmntSrcAcctID").val(-1);
                        $("#rpmntSrcAcct").val("");
                        $("#rpmntSrcType").attr("disabled", true);
                    } else {
                        if (rpmntSrcType == "Account Deductions") {
                            $("#rpmntSrcAcctDiv").css("display", "table-cell");
                            $("#rpmntSrcAcctID").val(-1);
                            $("#rpmntSrcAcct").val("");
                        } else {
                            $("#rpmntSrcAcctID").val(-1);
                            $("#rpmntSrcAcct").val("");
                        }
                    }

                    if (json.loanPrdtDetArry.cashCollateralRqrd == "Yes") {
                        $("#cashColtDiv").css("display", "table-cell");
                    } else {
                        $("#cashColtDiv").css("display", "none");
                        $("#cashCollateralID").val(-1);
                        $("#cashCollateral").val("");
                    }

                    if (json.loanPrdtDetArry.invstmntCollateralRqrd == "Yes") {
                        $("#investmentColtDiv").css("display", "table-cell");
                    } else {
                        $("#investmentColtDiv").css("display", "none");
                        $("#invstmntCollateralID").val(-1);
                        $("#invstmntCollateral").val("");
                    }

                    if (json.loanPrdtDetArry.prptyCollateralRqrd == "Yes") {
                        $("#propertyColtDiv").css("display", "table-cell");
                    } else {
                        $("#propertyColtDiv").css("display", "none");
                        $("#prptyCollateralID").val(-1);
                        $("#prptyCollateral").val("");
                    }


                } else {
                    alert(data + "hiii");
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function clearROLovField(elementNm, elementID) {
    $("#" + elementNm).val("");
    $("#" + elementID).val(-1);
}

function validateApplctnForm(applctnDate, bnkBranchID, prpsOfLoan, rcvryOfficerID, custType, grpCustId, bnkCustomerID,
        prdtTypeID, rqstType, refLoanrqstID, loanAmount, loanMaxAmount, loanMinAmount, loanTenor, maxLoanTenorType, loanTenorType,
        maxLoanTenor, minLoanTenorType, minLoanTenor, isAccountRqrd, rpmntSrcAcctID, interestRate, baseIntRate, rpmntSrcType,
        sctrMjrID, sctrMnrID) {

    var p_applctnDate;
    var pday_SD;
    var pmonth_SD;
    var pyear_SD;
    var today = new Date();
    var pday_TD = today.getDate();
    var pmonth_TD = today.getMonth() + 1;
    var pyear_TD = today.getFullYear();
    //alert(pyear_TD + "-" + pmonth_TD + "-" + pday_TD);

    if (applctnDate != "") {
        p_applctnDate = new Date(applctnDate);
        pday_SD = p_applctnDate.getDate();
        pmonth_SD = p_applctnDate.getMonth() + 1;
        pyear_SD = p_applctnDate.getFullYear();
    }

    if (applctnDate == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#applctnDate").css('border-color', 'red');
        $("#applctnDate").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide the Loan Application Date!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (applctnDate != "" && (pyear_TD + "-" + pmonth_TD + "-" + pday_TD < pyear_SD + "-" + pmonth_SD + "-" + pday_SD)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#applctnDate").css('border-color', 'red');
        $("#applctnDate").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide a valid Loan Application Date which is not greater than today!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (bnkBranchID == "" || bnkBranchID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#bnkBranch").css('border-color', 'red');
        $("#bnkBranch").css('border-width', '2px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select your Branch!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prpsOfLoan == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#prpsOfLoan").css('border-color', 'red');
        $("#prpsOfLoan").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide the Purpose of Loan!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if ((rcvryOfficerID == "" || rcvryOfficerID == -1) && (rpmntSrcType === "Manual Payments")) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#rcvryOfficer").css('border-color', 'red');
        $("#rcvryOfficer").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a Recovery Officer;</br><b>Recovery Officer is required for Manual Loan Repayments!</b>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (custType == "" || custType == "--Please Select--") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#custType").css('border-color', 'red');
        $("#custType").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select Customer Type!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (custType == "Group" && grpCustId == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#custGrp").css('border-color', 'red');
        $("#custGrp").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a Group's Name!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (bnkCustomerID == "" || bnkCustomerID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#bnkCustomer").css('border-color', 'red');
        $("#bnkCustomer").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please Provide Applicant Name!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prdtTypeID == "" || prdtTypeID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#prdtType").css('border-color', 'red');
        $("#prdtType").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "No Product selected!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rqstType != "New Request" && refLoanrqstID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#refLoanrqst").css('border-color', 'red');
        $("#refLoanrqst").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide a reference Loan Request No. for Loan/Overdraft Top-Up/Reschedule!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (loanAmount == "" || loanAmount <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanAmount").css('border-color', 'red');
        $("#loanAmount").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Loan amount must be greater than Zero!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (parseFloat(loanAmount) > parseFloat(loanMaxAmount)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanAmount").css('border-color', 'red');
        $("#loanAmount").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Maximum applicable loan amount is " + formatAsMoney(loanMaxAmount),
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (parseFloat(loanAmount) < parseFloat(loanMinAmount)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanAmount").css('border-color', 'red');
        $("#loanAmount").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Mimimum applicable loan amount is " + formatAsMoney(loanMinAmount),
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (loanTenor == "" || Number(loanTenor) <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Loan Tenor must be greater than Zero!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if ((maxLoanTenorType == "Month(s)" || maxLoanTenorType == "Year(s)") && (loanTenorType == maxLoanTenorType)
            && (Number(loanTenor) > Number(maxLoanTenor))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Maximum Loan Tenor is " + maxLoanTenor + " " + maxLoanTenorType,
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (maxLoanTenorType == "Year(s)" && loanTenorType == "Month(s)" && (Number(loanTenor) > (Number(maxLoanTenor) * 12))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Maximum Loan Tenor is " + (Number(maxLoanTenor) * 12) + " Month(s)",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (maxLoanTenorType == "Month(s)" && loanTenorType == "Year(s)" && ((Number(loanTenor) * 12) > Number(maxLoanTenor))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Maximum Loan Tenor is " + (Number(maxLoanTenor) / 12) + " Year(s)",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if ((minLoanTenorType == "Month(s)" || minLoanTenorType == "Year(s)") && (loanTenorType == minLoanTenorType)
            && (Number(loanTenor) < Number(minLoanTenor))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Minimum Loan Tenor is " + minLoanTenor + " " + minLoanTenorType,
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (minLoanTenorType == "Year(s)" && loanTenorType == "Month(s)" && (Number(loanTenor) < (Number(minLoanTenor) * 12))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Mimimum Loan Tenor is " + (Number(minLoanTenor) * 12) + " Month(s)",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (minLoanTenorType == "Month(s)" && loanTenorType == "Year(s)" && ((Number(loanTenor) * 12) < Number(minLoanTenor))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loanTenor").css('border-color', 'red');
        $("#loanTenor").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Minimum Loan Tenor is " + (Number(minLoanTenor) / 12) + " Year(s)",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (interestRate == "" || interestRate <= 0 || (parseFloat(interestRate) < parseFloat(baseIntRate))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#interestRate").css('border-color', 'red');
        $("#interestRate").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        $("#loanTenor").css('border-color', '#ccc');
        $("#loanTenor").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Interest Rate must be greater than the Base Rate of <b>" + baseIntRate + "% Per Anum</b>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if ((isAccountRqrd === "Yes" || rpmntSrcType === "Account Deductions") && (rpmntSrcAcctID == -1 || rpmntSrcAcctID == "")) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#rpmntSrcAcct").css('border-color', 'red');
        $("#rpmntSrcAcct").css('border-width', '2px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        $("#loanTenor").css('border-color', '#ccc');
        $("#loanTenor").css('border-width', '1px');
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide an Account for Loan deduction!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (sctrMjrID.trim() == "" || sctrMjrID == "-1") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#sctrMjr").css('border-color', 'red');
        $("#sctrMjr").css('border-width', '2px');
        $("#rpmntSrcAcct").css('border-color', '#ccc');
        $("#rpmntSrcAcct").css('border-width', '1px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        $("#loanTenor").css('border-color', '#ccc');
        $("#loanTenor").css('border-width', '1px');
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');        
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide a Major Sector!",
            callback: function () { /* your callback code */
            }
        });
        return false;        
    } else if (sctrMnrID == "" || sctrMnrID == "-1") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#sctrMnr").css('border-color', 'red');
        $("#sctrMnr").css('border-width', '2px');
        $("#sctrMjr").css('border-color', '#ccc');
        $("#sctrMjr").css('border-width', '1px');
        $("#rpmntSrcAcct").css('border-color', '#ccc');
        $("#rpmntSrcAcct").css('border-width', '1px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        $("#loanTenor").css('border-color', '#ccc');
        $("#loanTenor").css('border-width', '1px');
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');        
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please provide a Minor Sector!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else { 
        $("#sctrMnr").css('border-color', '#ccc');
        $("#sctrMnr").css('border-width', '1px');    
        $("#sctrMjr").css('border-color', '#ccc');
        $("#sctrMjr").css('border-width', '1px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#prpsOfLoan").css('border-color', '#ccc');
        $("#prpsOfLoan").css('border-width', '1px');
        $("#rcvryOfficer").css('border-color', '#ccc');
        $("#rcvryOfficer").css('border-width', '1px');
        $("#custType").css('border-color', '#ccc');
        $("#custType").css('border-width', '1px');
        $("#custGrp").css('border-color', '#ccc');
        $("#custGrp").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#refLoanrqst").css('border-color', '#ccc');
        $("#refLoanrqst").css('border-width', '1px');
        $("#loanAmount").css('border-color', '#ccc');
        $("#loanAmount").css('border-width', '1px');
        $("#loanTenor").css('border-color', '#ccc');
        $("#loanTenor").css('border-width', '1px');
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');
        $("#rpmntSrcAcct").css('border-color', '#ccc');
        $("#rpmntSrcAcct").css('border-width', '1px');
        return true;
    }
}

function saveLoanApplication(pgNo, subPgNo, vtyp)
{

    var box;
    var box2;
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        //$body = $("body");
        //$body.addClass("mdlloadingDiag");

        var obj;
        var loanRqstID = typeof $("#loanRqstID").val() === 'undefined' ? -1 : $("#loanRqstID").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
        var custType = typeof $("#custType").val() === 'undefined' ? '' : $("#custType").val();
        var acctID = typeof $("#acctID").val() === 'undefined' ? -1 : $("#acctID").val().trim().length === 0 ? -1 : $("#acctID").val();
        var acctNumber = typeof $("#acctNumber").val() === 'undefined' ? '' : $("#acctNumber").val();
        var rcvryOfficerID = typeof $("#rcvryOfficerID").val() === 'undefined' ? -1 : $("#rcvryOfficerID").val();
        var bnkCustomerID = typeof $("#bnkCustomerID").val() === 'undefined' ? -1 : $("#bnkCustomerID").val();
        var prdtTypeID = typeof $("#prdtTypeID").val() === 'undefined' ? -1 : $("#prdtTypeID").val();
        var loanAmount = typeof $("#loanAmount").val() === 'undefined' ? -1 : $("#loanAmount").val().trim().length === 0 ? 0 : $("#loanAmount").val();
        var loanTenor = typeof $("#loanTenor").val() === 'undefined' ? -1 : $("#loanTenor").val().trim().length === 0 ? 0 : $("#loanTenor").val();
        var loanTenorType = typeof $("#loanTenorType").val() === 'undefined' ? '' : $("#loanTenorType").val();
        var applctnDate = typeof $("#applctnDate").val() === 'undefined' ? '' : $("#applctnDate").val();
        var prpsOfLoan = typeof $("#prpsOfLoan").val() === 'undefined' ? '' : $("#prpsOfLoan").val();
        var rpmntSrcAcctID = typeof $("#rpmntSrcAcctID").val() === 'undefined' ? -1 : $("#rpmntSrcAcctID").val();
        var cashCollateralID = typeof $("#cashCollateralID").val() === 'undefined' ? -1 : $("#cashCollateralID").val();
        var invstmntCollateralID = typeof $("#invstmntCollateralID").val() === 'undefined' ? -1 : $("#invstmntCollateralID").val();
        var prptyCollateralID = typeof $("#prptyCollateralID").val() === 'undefined' ? -1 : $("#prptyCollateralID").val();
        var grpCustId = typeof $("#custGrpID").val() === 'undefined' ? -1 : $("#custGrpID").val();
        var status = typeof $("#status").val() === 'undefined' ? '' : $("#status").val();
        var interestRate = typeof $("#interestRate").val() === 'undefined' ? -1 : $("#interestRate").val();
        var rqstType = typeof $("#rqstType").val() === 'undefined' ? '' : $("#rqstType").val();
        var refLoanrqstID = typeof $("#refLoanrqstID").val() === 'undefined' ? -1 : $("#refLoanrqstID").val();
        var crdtType = typeof $("#crdtType").val() === 'undefined' ? '' : $("#crdtType").val();
        var rpmntSrcType = typeof $("#rpmntSrcType").val() === 'undefined' ? '' : $("#rpmntSrcType").val();
        var currencyId = typeof $("#currencyId").val() === 'undefined' ? -1 : $("#currencyId").val();
        var isAccountRqrd = typeof $("#isAccountRqrd").val() === 'undefined' ? -1 : $("#isAccountRqrd").val();
        var loanMaxAmount = typeof $("#loanMaxAmount").val() === 'undefined' ? -1 : $("#loanMaxAmount").val();
        var loanMinAmount = typeof $("#loanMinAmount").val() === 'undefined' ? -1 : $("#loanMinAmount").val();
        var maxLoanTenor = typeof $("#maxLoanTenor").val() === 'undefined' ? -1 : $("#maxLoanTenor").val();
        var maxLoanTenorType = typeof $("#maxLoanTenorType").val() === 'undefined' ? -1 : $("#maxLoanTenorType").val();
        var guarantorRequired = typeof $("#guarantorRequired").val() === 'undefined' ? -1 : $("#guarantorRequired").val();
        var guarantorNo = typeof $("#guarantorNo").val() === 'undefined' ? -1 : $("#guarantorNo").val();
        //var productType = typeof $("#productType").val() === 'undefined' ? -1 : $("#productType").val();

        //var custTypeCustgrp = typeof $("#custTypeCustgrp").val() === 'undefined' ? -1 : $("#custTypeCorp").val();
        //var custTypeCorp = typeof $("#custTypeCorp").val() === 'undefined' ? -1 : $("#custTypeCorp").val();
        //var custTypeInd = typeof $("#custTypeInd").val() === 'undefined' ? -1 : $("#custTypeInd").val();

        var cashCollateralRqrd = typeof $("#cashCollateralRqrd").val() === 'undefined' ? -1 : $("#cashCollateralRqrd").val();
        var valueFlatCashColt = typeof $("#valueFlatCashColt").val() === 'undefined' ? -1 : $("#valueFlatCashColt").val();
        var valuePrcntCashColt = typeof $("#valuePrcntCashColt").val() === 'undefined' ? -1 : $("#valuePrcntCashColt").val();
        var prptyCollateralRqrd = typeof $("#prptyCollateralRqrd").val() === 'undefined' ? -1 : $("#prptyCollateralRqrd").val();
        var valueFlatPrptyColt = typeof $("#valueFlatPrptyColt").val() === 'undefined' ? -1 : $("#valueFlatPrptyColt").val();
        var valuePrcntPrptyColt = typeof $("#valuePrcntPrptyColt").val() === 'undefined' ? -1 : $("#valuePrcntPrptyColt").val();
        var invstmntCollateralRqrd = typeof $("#invstmntCollateralRqrd").val() === 'undefined' ? -1 : $("#invstmntCollateralRqrd").val();
        var valueInvstmntCashColt = typeof $("#valueInvstmntCashColt").val() === 'undefined' ? -1 : $("#valueInvstmntCashColt").val();
        var valueInvstmntPrcntColt = typeof $("#valueInvstmntPrcntColt").val() === 'undefined' ? -1 : $("#valueInvstmntPrcntColt").val();
        var minLoanTenor = typeof $("#minLoanTenor").val() === 'undefined' ? -1 : $("#minLoanTenor").val();
        var minLoanTenorType = typeof $("#minLoanTenorType").val() === 'undefined' ? -1 : $("#minLoanTenorType").val();
        var baseIntRate = typeof $("#baseIntRate").val() === 'undefined' ? -1 : $("#baseIntRate").val();
        
        var sctrMjrID = typeof $("#sctrMjrID").val() === 'undefined' ? -1 : $("#sctrMjrID").val();
        var sctrMnrID = typeof $("#sctrMnrID").val() === 'undefined' ? -1 : $("#sctrMnrID").val();        
        //alert(Number($('table#loanGuarantorsTblAdd tbody tr:last').index() + 1));
        
        var grpApplicantType = typeof $("#grpApplicantType").val() === 'undefined' ? '' : $("#grpApplicantType").val();
        var slctdGrpMembers = "";
        var errCount = 0;
        var rcdCount = 0;

        var rslt = validateApplctnForm(applctnDate, bnkBranchID, prpsOfLoan, rcvryOfficerID, custType, grpCustId, bnkCustomerID,
                prdtTypeID, rqstType, refLoanrqstID, loanAmount, loanMaxAmount, loanMinAmount, loanTenor, maxLoanTenorType, loanTenorType,
                maxLoanTenor, minLoanTenorType, minLoanTenor, isAccountRqrd, rpmntSrcAcctID, interestRate, baseIntRate, rpmntSrcType,
            sctrMjrID, sctrMnrID);
        if (!rslt) {
            return false;
        }
        
        if(parseInt(grpCustId) > 0){
            
            $('#grpMembersDetTable').find('tr').each(function (i, el) {
                if (i > 0)
                {
                    if (typeof $(el).attr('id') === 'undefined')
                    {
                        /*Do Nothing*/
                    } else {
                        var rndmNum = $(el).attr('id').split("_")[1];
                        if (typeof $('#grpMembersDetRow' + rndmNum + '_CustID').val() === 'undefined')
                        {
                            /*Do Nothing*/
                        } else {

                            if ($('#grpMembersDetRow' + rndmNum + '_CustID').val() == "" || $('#grpMembersDetRow' + rndmNum + '_CustID').val() == -1) {
                                $('#grpMembersDetRow' + rndmNum + '_CustNm').css('border-color', 'red');
                                $('#grpMembersDetRow' + rndmNum + '_CustNm').css('border-width', '2px');
                                errCount = errCount + 1;
                            } else {
                                $('#grpMembersDetRow' + rndmNum + '_CustNm').css('border-color', '#ccc');
                                $('#grpMembersDetRow' + rndmNum + '_CustNm').css('border-width', '1px');
                            }
                            if ($('#grpMembersDetRow' + rndmNum + '_RqstdAmount').val() == "" || $('#grpMembersDetRow' + rndmNum + '_RqstdAmount').val() == 0.00) {
                                $('#grpMembersDetRow' + rndmNum + '_RqstdAmount').css('border-color', 'red');
                                $('#grpMembersDetRow' + rndmNum + '_RqstdAmount').css('border-width', '2px');
                                errCount = errCount + 1;
                            } else {
                                $('#grpMembersDetRow' + rndmNum + '_RqstdAmount').css('border-color', '#ccc');
                                $('#grpMembersDetRow' + rndmNum + '_RqstdAmount').css('border-width', '1px');
                            }
                            if ($('#grpMembersDetRow' + rndmNum + '_RpmntAcctID').val() == "" || $('#grpMembersDetRow' + rndmNum + '_RpmntAcctID').val() == -1) {
                                $('#grpMembersDetRow' + rndmNum + '_RpmntAcctNm').css('border-color', 'red');
                                $('#grpMembersDetRow' + rndmNum + '_RpmntAcctNm').css('border-width', '2px');
                                errCount = errCount + 1;
                            } else {
                                $('#grpMembersDetRow' + rndmNum + '_RpmntAcctNm').css('border-color', '#ccc');
                                $('#grpMembersDetRow' + rndmNum + '_RpmntAcctNm').css('border-width', '1px');
                            }

                            if (errCount <= 0) {
                                slctdGrpMembers = slctdGrpMembers
                                        + $('#grpMembersDetRow' + rndmNum + '_PkeyID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                        + $('#grpMembersDetRow' + rndmNum + '_CustID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                        + $('#grpMembersDetRow' + rndmNum + '_RqstdAmount').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                        + $('#grpMembersDetRow' + rndmNum + '_RpmntAcctID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                        + $('#grpMembersDetRow' + rndmNum + '_CashColtID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                        + $('#grpMembersDetRow' + rndmNum + '_InvtmntColtID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                        + $('#grpMembersDetRow' + rndmNum + '_PrptyColtID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                                rcdCount = rcdCount + 1;
                            }
                            var lineCnta = lineCnta + 1;
                        }
                    }
                }
            });

            if (errCount > 0) {
                box2 = bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "<span style='color:red;'><b><i>Please complete all highlighted fields</i></b></span>",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
            
        }

        $body.removeClass("mdlloading");
        $body.removeClass("mdlloadingDiag");
        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('actyp', 1);
        formData.append('loanRqstID', loanRqstID);
        formData.append('bnkBranchID', bnkBranchID);
        formData.append('custType', custType);
        formData.append('acctID', acctID);
        formData.append('acctNumber', acctNumber);
        formData.append('rcvryOfficerID', rcvryOfficerID);
        formData.append('bnkCustomerID', bnkCustomerID);
        formData.append('prdtTypeID', prdtTypeID);
        formData.append('loanAmount', loanAmount);
        formData.append('loanTenor', loanTenor);
        formData.append('loanTenorType', loanTenorType);
        formData.append('applctnDate', applctnDate);
        formData.append('prpsOfLoan', prpsOfLoan);
        formData.append('rpmntSrcAcctID', rpmntSrcAcctID);
        formData.append('cashCollateralID', cashCollateralID);
        formData.append('invstmntCollateralID', invstmntCollateralID);
        formData.append('prptyCollateralID', prptyCollateralID);
        formData.append('grpCustId', grpCustId);
        formData.append('status', status);
        formData.append('rqstType', rqstType);
        formData.append('refLoanrqstID', refLoanrqstID);
        formData.append('crdtType', crdtType);
        formData.append('interestRate', interestRate);
        formData.append('rpmntSrcType', rpmntSrcType);
        formData.append('sctrMjrID', sctrMjrID);
        formData.append('sctrMnrID', sctrMnrID); 
        formData.append('grpApplicantType',grpApplicantType);
        if(rcdCount > 0){
            formData.append('slctdGrpMembers',slctdGrpMembers);
        }
        //formData.append('optn',optn);



        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                //$body.removeClass("mdlloadingDiag");
                //$body.removeClass("mdlloading");

                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    $("#loanRqstID").val(obj.loanRqstID);
                    $("#lnRqstID").val(obj.loanRqstID);
                    $("#rqsNumber").val(obj.trnsctnID);
                    box.modal('hide');
                    getLoanRqstForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Loan Request', 15, subPgNo, 0, 'EDIT', obj.loanRqstID, 'indCustTable', 'indCustTableRow1', function () {

                        //SHOW EXTRA TABS
                        $("#standardEvtns").css("display", "block");
                        msg = "Loan Application Successfully Saved!";
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                            }
                        });
                    });
                } else {

                    msg = data;
                    box.modal('hide');
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}


function getLoanGrntaForm(elementID, modalBodyID, titleElementID, formElementID, tRowElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID)
{
    var loanRqstID = $('#loanRqstID').val();
    var custType = $('#custType').val();
    var loanGurntaID = pKeyID; //$('#acctSignID').val();
    var srcType = typeof $("#srcType").val() === 'undefined' ? '' : $("#srcType").val();
    if (loanRqstID === 'undefined' || loanRqstID === '' || loanRqstID === -1) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please save Account first!",
            callback: function () {
            }
        });
        return false;
    } else {


        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var xmlhttp;
        if (window.XMLHttpRequest)
        {
            /*code for IE7+, Firefox, Chrome, Opera, Safari*/
            xmlhttp = new XMLHttpRequest();
        } else
        {
            /*code for IE6, IE5*/
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
        xmlhttp.onreadystatechange = function ()
        {
            if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
            {
//alert("Hello");
                $('#' + titleElementID).html(formTitle);
                $('#' + modalBodyID).html(xmlhttp.responseText);
                $('#' + elementID).off('hidden.bs.modal');
                $('#' + elementID).one('hidden.bs.modal', function (e) {
                    $('#' + titleElementID).html('');
                    $('#' + modalBodyID).html('');
                    $(e.currentTarget).unbind();
                });
                /*$('.modal-content').resizable({
                 //alsoResize: ".modal-dialog",
                 minHeight: 600,
                 minWidth: 300
                 });*/
                /*$('.modal-dialog').draggable();*/
                $(function () {
                    $('.form_date').datetimepicker({
                        format: "d-M-yyyy",
                        language: 'en',
                        weekStart: 0,
                        todayBtn: true,
                        autoclose: true,
                        todayHighlight: true,
                        keyboardNavigation: true,
                        startView: 2,
                        minView: 2,
                        maxView: 4,
                        forceParse: true
                    });
                });
                if (vtyp === 5 && vtypActn === 'EDIT')
                {
                    /*Get various field element IDs and populate values*/
                    var $tds = $('#' + tRowElementID).find('td');
                    $('#lowRange').val($.trim($tds.eq(2).text()));
                    $('#highRange').val($.trim($tds.eq(3).text()));
                    $('#amountFlat').val($.trim($tds.eq(4).text()));
                    $('#amountPrcnt').val($.trim($tds.eq(5).text()));
                    $('#remarks').val($.trim($tds.eq(6).text()));
                    $('#tblRowElementID').val(tRowElementID);
                }

                $('#' + elementID).on('show.bs.modal', function (e) {
                    $(this).find('.modal-body').css({
                        'max-height': '100%'
                    });
                });
                $body.removeClass("mdlloadingDiag");
                $('#' + elementID).modal({backdrop: 'static',keyboard:false});
                //$body.removeClass("mdlloading");
                //$body = $("body");
                $(document).ready(function () {
                    $('#' + formElementID).submit(function (e) {
                        e.preventDefault();
                        return false;
                    });
                    if (custType == "Corporate" || custType == "Individual") {
                        $("#srcTypeDiv").css("display", "block");
                    } else {
                        $("#srcTypeDiv").css("display", "none");
                    }
                });
            }
        };
        xmlhttp.open("POST", "index.php", true);
        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn +
                "&loanRqstID=" + loanRqstID +
                "&rowID=" + loanGurntaID);
    }
}

function getLoanGuarantors() {
    var custType = $('#custType').val();
    var srcType = $('#srcType').val();
    var lovName = "Bank Individual Customers";
    var extraWhere = " AND 1 = 1";
    var criteriaID2 = "custTypeIndividual";
    switch (custType) {
        case 'Corporate':
            if (srcType === "Other Persons") {
                lovName = "Bank Other Persons - Guarantors";
                //criteriaID2 = "relation";
                //getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'gnrlOrgID', criteriaID2, '', 'radio', true, '', 'guarantorID', 'guarantor', 'clear', 1, extraWhere);                
                getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'gnrlOrgID', '', '', 'radio', true, '', 'guarantorID', 'guarantor', 'clear', 1, extraWhere);
            } else {
                getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'gnrlOrgID', criteriaID2, '', 'radio', true, '', 'guarantorID', 'guarantor', 'clear', 1, extraWhere);
            }
            break;
        case 'Individual':
            if (srcType === "Other Persons") {
                lovName = "Bank Other Persons - Guarantors";
                //criteriaID2 = "relation";
                //getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'gnrlOrgID', criteriaID2, '', 'radio', true, '', 'guarantorID', 'guarantor', 'clear', 1, extraWhere);
                getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'gnrlOrgID', '', '', 'radio', true, '', 'guarantorID', 'guarantor', 'clear', 1, extraWhere);
            } else {
                getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'gnrlOrgID', criteriaID2, '', 'radio', true, '', 'guarantorID', 'guarantor', 'clear', 1, extraWhere);
            }
            break;
        case 'Group':
            //criteriaID2 = "custTypeIndividual";
            lovName = "MCF Customer Group Members";
            getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'gnrlOrgID', 'custGrpID', '', 'radio', true, '', 'guarantorID', 'guarantor', 'clear', 1, extraWhere);
            break;
    }


}

function saveLoanGuarantorForm(elementID, rowID)
{
    var obj;
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var loanRqstID = typeof $("#loanRqstID").val() === 'undefined' ? -1 : $("#loanRqstID").val();
    var srcType = typeof $("#srcType").val() === 'undefined' ? '' : $("#srcType").val();
    var guarantorID = typeof $("#guarantorID").val() === 'undefined' ? -1 : $("#guarantorID").val();
    var guarantor = typeof $("#guarantor").val() === 'undefined' ? -1 : $("#guarantor").val();
    //var tRowElementID = typeof $("#tblRowElementID").val() === 'undefined' ? -1 : $("#tblRowElementID").val();

    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            var msg = "";
            var data = xmlhttp.responseText;
            var rowValID = -1;
            var localIDNo = '';
            $('#' + elementID).modal('hide');
            getLoanRqstForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Loan Request', 15, 4.1, 0, 'EDIT', loanRqstID, 'indCustTable', 'indCustTableRow1', function () {
                $body.removeClass("mdlloadingDiag");
            });
//            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
//                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
//                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
//
//                obj = $.parseJSON(data);
//
//                //SET ROW ID
//                rowValID = obj.rowID;
//                localIDNo = obj.localIDNo;
//
//                //alert("rowValID " + rowValID + " localIDNo" + localIDNo);
//
//            }
//            
//            
//            //alert(data);
//            if (rowID <= 0) {
//                $('#loanGuarantorsTblAdd').append('<tr id="loanGuarantorsTblAddRow' + rowValID + '"><td>' +
//                        '<button type="button" class="btn btn-default btn-sm" onclick="getLoanGrntaForm(\'myFormsModalx\', \'myFormsModalxBody\', \'myFormsModalxTitle\', \'acctSignatoryForm\', \'\', \'Edit Guarantor\', 15, 4.1, 5, \'EDIT\',' + rowValID +');" style="padding:2px !important;">' +
//                        '<img src="cmn_images/edit32.png" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
//                        '</button>' +
//                        '</td><td>New</td><td>' + guarantor +
//                        '</td><td>' + localIDNo +
//                        '</td><td>' +
//                        '<button type="button" class="btn btn-default btn-sm" onclick="getLoanGrntaForm(\'myFormsModalx\', \'myFormsModalxBody\', \'myFormsModalxTitle\', \'acctSignatoryForm\', \'\', \'Edit Guarantor\', 15, 4.1, 5, \'VIEW\',' + rowValID +');" style="padding:2px !important;">' +
//                        '<img src="cmn_images/kghostview.png" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
//                        '</button>' +
//                        '</td><td style="display:none;">' + srcType +
//                        '</td><td style="display:none;">' + guarantorID +
//                        '</td></tr>');
//            } else {
//
//                var $tds = $('#loanGuarantorsTblAddRow' + rowID).find('td');
//                $.trim($tds.eq(2).text(guarantor));
//                $.trim($tds.eq(3).text(localIDNo));
//                $.trim($tds.eq(5).text(srcType));
//                $.trim($tds.eq(6).text(guarantorID));
//            }
//            $body.removeClass("mdlloadingDiag");
//            $('#' + elementID).modal('hide');

        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.1&vtyp=5&q=UPDATE" +
            "&srcType=" + srcType +
            "&guarantorID=" + guarantorID +
            "&rowID=" + rowID +
            "&loanRqstID=" + loanRqstID);
}

function newLoanRequestOpenATab1(slctr, linkArgs) {
    openATab(slctr, linkArgs + "&lnprflFctrId=" + $("#lnprflFctrId").val() + "&lnRqstID=" + $("#lnRqstID").val() +
            "&optn=" + $("#optn").val() + "&status=" + $("#status").val() + "&assmntCmnts=" + $("#assmntCmnts").val());
}

function getCreditAssessmentQstn(pgNo, subPgNo, vtyp, optn, vtypActn, src)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var obj;
        var lnRqstID = typeof $("#lnRqstID").val() === 'undefined' ? -1 : $("#lnRqstID").val();
        var lnprflFctrId = typeof $("#lnprflFctrId").val() === 'undefined' ? -1 : $("#lnprflFctrId").val();
        var chkedAssmntID = typeof $("input[name='assmntID']:checked").val() === 'undefined' ? '' : $("input[name='assmntID']:checked").val();
        var qstnNo = typeof $("#qstnNoId").text() === 'undefined' ? -1 : $("#qstnNoId").text();
        var qstnTtlNo = typeof $("#qstnTtlNoId").text() === 'undefined' ? -1 : $("#qstnTtlNoId").text();
        //var qstnNoId
        //alert('chkedAssmntID'+chkedAssmntID)

        //alert("qstnNo="+ qstnNo + " qstnTtlNo=" + qstnTtlNo);

        var rqstStatus = typeof $("#status").text() === 'undefined' ? 'Incomplete' : $("#status").text();
        if (rqstStatus == 'Initiated') {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "To proceed, WITHDRAW request first!",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }


        if (src == 0) {
            if (typeof $("input[name='assmntID']:checked").val() === 'undefined') {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "No Option Selected</br>Please select an option first!",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
        } else {
            vtypActn = 'ADD';
        }/* else if (src == 2) {
         $body.removeClass("mdlloadingDiag");
         $body.removeClass("mdlloading");
         return false;
         }*/
        /*openATab('#prflAddPrsnDataEDT', 'grp=17&typ=1&pg='+pgNo+'&subPgNo='+subPgNo+
         '&vtyp='+vtyp+'&vtypActn='+vtypActn+ "&loanRqstID=" + loanRqstID+ "&lnprflFctrId=" + lnprflFctrId +
         "&chkedAssmntID=" + chkedAssmntID + '&optn='+ optn);  */
//alert('qstnNo'+qstnNo+' qstnTtlNo'+qstnTtlNo);
        if ((optn == 'NEXT' || optn == 'LAST') && (qstnNo == qstnTtlNo) && (qstnNo != '0')) {
            vtypActn = 'SMRYPAGE';
        }


        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('lnRqstID', lnRqstID);
        formData.append('lnprflFctrId', lnprflFctrId);
        formData.append('chkedAssmntID', chkedAssmntID);
        formData.append('optn', optn);
        formData.append('vtypActn', vtypActn);
        formData.append('qstnNo', qstnNo);
        formData.append('qstnTtlNo', qstnTtlNo);
        formData.append('statusTitle', rqstStatus)

        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    $("#svngsAccntnEvntId").val(obj.svngsAccntnEvntId);
                    //SHOW EXTRA TABS
                    $("#standardEvtns").css("display", "block");
                    $("#customEvnts").css("display", "block");
                    msg = "Savings Product Event Accounting Successfully Saved!";
                } else {
                    $('#prflCMDataEDT').html(data);
                }


                /*if ((optn == 'NEXT' || optn == 'LAST') && (qstnNo == qstnTtlNo) && (qstnNo != '0')) {
                 vtypActn = 'SMRYPAGE';
                 getCreditAssessmentQstn(pgNo, subPgNo, vtyp, optn, vtypActn, 2);
                 }*/

                //obj =  JSON.parse(data); //$.parseJSON(data);//

                /*bootbox.alert({
                 size: "small",
                 title: "Rhomicom Message",
                 message: msg,
                 callback: function () {
                 }
                 });*/

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}


function submitWithdrawLoanRqstActn(pgNo, subPgNo, vtyp, actn)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var lnRqstID = typeof $("#lnRqstID").val() === 'undefined' ? -1 : $("#lnRqstID").val();
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        var assmntScoreCmnts = typeof $("#assmntScoreCmnts").val() === 'undefined' ? -1 : $("#assmntScoreCmnts").val();
        var ttlScore = typeof $("#ttlScoreId").text() === 'undefined' ? -1 : $("#ttlScoreId").text();
        var crncyIsoCode = typeof $("#crncyIsoCode").text() === 'undefined' ? -1 : $("#crncyIsoCode").text();
        var rvrslCmnts = typeof $("#rvrslCmnts").val() === 'undefined' ? '' : $("#rvrslCmnts").val();
        var cashCollateralID = -1;
        var xptdCashColtValue = 0.00;
        var prptyCollateralID = -1
        var xptdPrptyColtValue = 0.00;
        var invstmntCollateralID = -1;
        var xptdInvstmntColtValue = 0.00
        
        var grpApplicantType = typeof $("#grpApplicantType").val() === 'undefined' ? '' : $("#grpApplicantType").val();
        var grpCustId = typeof $("#custGrpID").val() === 'undefined' ? -1 : $("#custGrpID").val();
        var slctdGrpMembers = "";
        var errCount = 0;
        var rcdCount = 0;
        
        var actnTyp;
        var prmtMsg = "Are you sure you want to submit loan for Approval?";
        if (actn == 'SUBMIT')
        {
            actnTyp = 2;
            var guarantorRequired = typeof $("#guarantorRequired").val() === 'undefined' ? -1 : $("#guarantorRequired").val();
            var guarantorNo = typeof $("#guarantorNo").val() === 'undefined' ? -1 : $("#guarantorNo").val();
            var loanAmount = typeof $("#loanAmount").val() === 'undefined' ? 0 : $("#loanAmount").val();
            cashCollateralID = typeof $("#cashCollateralID").val() === 'undefined' ? -1 : $("#cashCollateralID").val();
            var cashCollateralRqrd = typeof $("#cashCollateralRqrd").val() === 'undefined' ? 'No' : $("#cashCollateralRqrd").val();
            var valueFlatCashColt = typeof $("#valueFlatCashColt").val() === 'undefined' ? 0 : $("#valueFlatCashColt").val();
            var valuePrcntCashColt = typeof $("#valuePrcntCashColt").val() === 'undefined' ? 0 : $("#valuePrcntCashColt").val();
            xptdCashColtValue = parseFloat(valueFlatCashColt) + ((parseFloat(valuePrcntCashColt / 100) * parseFloat(loanAmount)));
            var actualCashCollateralValue = typeof $("#cashCollateralValue").val() === 'undefined' ? 0 : $("#cashCollateralValue").val();
            var cashColHasLien = typeof $("#cashColHasLien").val() === 'undefined' ? 'No' : $("#cashColHasLien").val();
            prptyCollateralID = typeof $("#prptyCollateralID").val() === 'undefined' ? -1 : $("#prptyCollateralID").val();
            var prptyCollateralRqrd = typeof $("#prptyCollateralRqrd").val() === 'undefined' ? 'No' : $("#prptyCollateralRqrd").val();
            var valueFlatPrptyColt = typeof $("#valueFlatPrptyColt").val() === 'undefined' ? 0 : $("#valueFlatPrptyColt").val();
            var valuePrcntPrptyColt = typeof $("#valuePrcntPrptyColt").val() === 'undefined' ? 0 : $("#valuePrcntPrptyColt").val();
            xptdPrptyColtValue = parseFloat(valueFlatPrptyColt) + ((parseFloat(valuePrcntPrptyColt / 100) * parseFloat(loanAmount)));
            var actualPrptyCollateralValue = typeof $("#prptyCollateralValue").val() === 'undefined' ? 0 : $("#prptyCollateralValue").val();
            var prptyColHasLien = typeof $("#prptyColHasLien").val() === 'undefined' ? 'No' : $("#prptyColHasLien").val();
            invstmntCollateralID = typeof $("#invstmntCollateralID").val() === 'undefined' ? -1 : $("#invstmntCollateralID").val();
            var invstmntCollateralRqrd = typeof $("#invstmntCollateralRqrd").val() === 'undefined' ? 'No' : $("#invstmntCollateralRqrd").val();
            var valueInvstmntCashColt = typeof $("#valueInvstmntCashColt").val() === 'undefined' ? 0 : $("#valueInvstmntCashColt").val();
            var valueInvstmntPrcntColt = typeof $("#valueInvstmntPrcntColt").val() === 'undefined' ? 0 : $("#valueInvstmntPrcntColt").val();
            xptdInvstmntColtValue = parseFloat(valueInvstmntCashColt) + ((parseFloat(valueInvstmntPrcntColt / 100) * parseFloat(loanAmount)));
            var actualInvstmntCollateralValue = typeof $("#invstmntCollateralValue").val() === 'undefined' ? 0 : $("#invstmntCollateralValue").val();
            var invstmntColHasLien = typeof $("#invstmntColHasLien").val() === 'undefined' ? 'No' : $("#invstmntColHasLien").val();
            var msg = "";
            var cnta = 0;
            if (guarantorRequired == "Yes" && (Number($('table#loanGuarantorsTblAdd tbody tr:last').index() + 1) < Number(guarantorNo))) {
                $("#guarantorsLgnd").css('color', 'red');
                cnta = cnta + 1;
                msg = msg + "Please provide at least " + guarantorNo + " Guarantor before submitting this application!</br>";
            } else {
                $("#guarantorsLgnd").css('color', '#333');
            }

            if(Number($('table#grpMembersDetTable tbody tr:last').index() + 1) <= 0){
                if (cashCollateralRqrd == "Yes") {
                    if (cashCollateralID == "" || cashCollateralID == -1) {
                        $("#cashCollateral").css('border-color', 'red');
                        cnta = cnta + 1;
                        msg = msg + "Please provide a CASH COLLATERAL for this application!</br>";
                    } else if (parseFloat(actualCashCollateralValue) < parseFloat(xptdCashColtValue)) {
                        $("#cashCollateral").css('border-color', 'red');
                        cnta = cnta + 1;
                        msg = msg + "Please provide a CASH COLLATERAL with an available balance of <b>" + crncyIsoCode + "" + formatAsMoney(xptdCashColtValue.toFixed(2)) + "</b>!</br>";
                    } else {
                        $("#cashCollateral").css('border-color', '#ccc');
                    }
                }

                if (prptyCollateralRqrd == "Yes") {
                    if (prptyCollateralID == "" || prptyCollateralID == -1) {
                        $("#prptyCollateral").css('border-color', 'red');
                        cnta = cnta + 1;
                        msg = msg + "Please provide a PROPERTY COLLATERAL for this application!</br>";
                    } else if (parseFloat(actualPrptyCollateralValue) < parseFloat(xptdPrptyColtValue)) {
                        $("#prptyCollateral").css('border-color', 'red');
                        cnta = cnta + 1;
                        msg = msg + "Please provide a PROPERTY COLLATERAL with a net value of <b>" + crncyIsoCode + "" + formatAsMoney(xptdPrptyColtValue.toFixed(2)) + "</b></br>";
                    } else {
                        $("#prptyCollateral").css('border-color', '#ccc');
                    }
                }

                if (invstmntCollateralRqrd == "Yes") {
                    if (invstmntCollateralID == "" || invstmntCollateralID == -1) {
                        $("#invstmntCollateral").css('border-color', 'red');
                        cnta = cnta + 1;
                        msg = msg + "Please provide an INVESTMENT COLLATERAL for this application!</br>";
                    } else if (parseFloat(actualInvstmntCollateralValue) < parseFloat(xptdInvstmntColtValue)) {
                        $("#invstmntCollateral").css('border-color', 'red');
                        cnta = cnta + 1;
                        msg = msg + "Please provide an INVESTMENT COLLATERAL with a net value of <b>" + crncyIsoCode + "" + formatAsMoney(xptdInvstmntColtValue.toFixed(2)) + "</b></br>";
                    } else {
                        $("#invstmntCollateral").css('border-color', '#ccc');
                    }
                }


                if (cnta > 0) {
                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloading");
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "<span style='color:red; font-weight:bold !important!'><i>" + msg + "</i></span>",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }
            }
            
            if(parseInt(grpCustId) > 0){
                $('#grpMembersDetTable').find('tr').each(function (i, el) {
                    if (i > 0)
                    {
                        if (typeof $(el).attr('id') === 'undefined')
                        {
                            /*Do Nothing*/
                        } else {
                            var rndmNum = $(el).attr('id').split("_")[1];
                            if (typeof $('#grpMembersDetRow' + rndmNum + '_CustID').val() === 'undefined')
                            {
                                /*Do Nothing*/
                            } else {

                                if ($('#grpMembersDetRow' + rndmNum + '_CustID').val() == "" || $('#grpMembersDetRow' + rndmNum + '_CustID').val() == -1) {
                                    $('#grpMembersDetRow' + rndmNum + '_CustNm').css('border-color', 'red');
                                    $('#grpMembersDetRow' + rndmNum + '_CustNm').css('border-width', '2px');
                                    errCount = errCount + 1;
                                } else {
                                    $('#grpMembersDetRow' + rndmNum + '_CustNm').css('border-color', '#ccc');
                                    $('#grpMembersDetRow' + rndmNum + '_CustNm').css('border-width', '1px');
                                }
                                if ($('#grpMembersDetRow' + rndmNum + '_RqstdAmount').val() == "" || $('#grpMembersDetRow' + rndmNum + '_RqstdAmount').val() == 0.00) {
                                    $('#grpMembersDetRow' + rndmNum + '_RqstdAmount').css('border-color', 'red');
                                    $('#grpMembersDetRow' + rndmNum + '_RqstdAmount').css('border-width', '2px');
                                    errCount = errCount + 1;
                                } else {
                                    $('#grpMembersDetRow' + rndmNum + '_RqstdAmount').css('border-color', '#ccc');
                                    $('#grpMembersDetRow' + rndmNum + '_RqstdAmount').css('border-width', '1px');
                                }
                                if ($('#grpMembersDetRow' + rndmNum + '_RpmntAcctID').val() == "" || $('#grpMembersDetRow' + rndmNum + '_RpmntAcctID').val() == -1) {
                                    $('#grpMembersDetRow' + rndmNum + '_RpmntAcctNm').css('border-color', 'red');
                                    $('#grpMembersDetRow' + rndmNum + '_RpmntAcctNm').css('border-width', '2px');
                                    errCount = errCount + 1;
                                } else {
                                    $('#grpMembersDetRow' + rndmNum + '_RpmntAcctNm').css('border-color', '#ccc');
                                    $('#grpMembersDetRow' + rndmNum + '_RpmntAcctNm').css('border-width', '1px');
                                }
                                
                                if (cashCollateralRqrd == "Yes") {
                                    if ($('#grpMembersDetRow' + rndmNum + '_CashColtID').val() == "" || $('#grpMembersDetRow' + rndmNum + '_CashColtID').val() == -1) {
                                        $('#grpMembersDetRow' + rndmNum + '_CashColtNm').css('border-color', 'yellow');
                                        $('#grpMembersDetRow' + rndmNum + '_CashColtNm').css('border-width', '2px');
                                        errCount = errCount + 1;
                                    } else {
                                        $('#grpMembersDetRow' + rndmNum + '_CashColtNm').css('border-color', '#ccc');
                                        $('#grpMembersDetRow' + rndmNum + '_CashColtNm').css('border-width', '1px');
                                    }
                                } 
                                
                                
                                if (prptyCollateralRqrd == "Yes") {
                                    if ($('#grpMembersDetRow' + rndmNum + '_PrptyColtID').val() == "" || $('#grpMembersDetRow' + rndmNum + '_PrptyColtID').val() == -1) {
                                        $('#grpMembersDetRow' + rndmNum + '_PrptyColtNm').css('border-color', 'yellow');
                                        $('#grpMembersDetRow' + rndmNum + '_PrptyColtNm').css('border-width', '2px');
                                        errCount = errCount + 1;
                                    } else {
                                        $('#grpMembersDetRow' + rndmNum + '_PrptyColtNm').css('border-color', '#ccc');
                                        $('#grpMembersDetRow' + rndmNum + '_PrptyColtNm').css('border-width', '1px');
                                    }
                                } 
                                
                                if (invstmntCollateralRqrd == "Yes") {
                                    if ($('#grpMembersDetRow' + rndmNum + '_InvtmntColtID').val() == "" || $('#grpMembersDetRow' + rndmNum + '_InvtmntColtID').val() == -1) {
                                        $('#grpMembersDetRow' + rndmNum + '_InvtmntColtNm').css('border-color', 'yellow');
                                        $('#grpMembersDetRow' + rndmNum + '_InvtmntColtNm').css('border-width', '2px');
                                        errCount = errCount + 1;
                                    } else {
                                        $('#grpMembersDetRow' + rndmNum + '_InvtmntColtNm').css('border-color', '#ccc');
                                        $('#grpMembersDetRow' + rndmNum + '_InvtmntColtNm').css('border-width', '1px');
                                    }
                                }                                 

                                if (errCount <= 0) {
                                    slctdGrpMembers = slctdGrpMembers
                                            + $('#grpMembersDetRow' + rndmNum + '_PkeyID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                            + $('#grpMembersDetRow' + rndmNum + '_CustID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                            + $('#grpMembersDetRow' + rndmNum + '_RqstdAmount').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                            + $('#grpMembersDetRow' + rndmNum + '_RpmntAcctID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                            + $('#grpMembersDetRow' + rndmNum + '_CashColtID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                            + $('#grpMembersDetRow' + rndmNum + '_InvtmntColtID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                            + $('#grpMembersDetRow' + rndmNum + '_PrptyColtID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                                    
                                    rcdCount = rcdCount + 1;
                                }
                                var lineCnta = lineCnta + 1;
                            }
                        }
                    }
                });

                if (errCount > 0) {
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "<span style='color:red;'><b><i>Please complete all red-highlighted fields and provide appropriate Collaterals for yellow-highlighted fields</i></b></span>",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }            
            }            

        } 
        else if (actn == 'WITHDRAW') {
            actnTyp = 3;
            prmtMsg = "Are you sure you want to withdraw Loan Request from Approval?";
        } 
        else {

            if (rvrslCmnts.trim() == "" || rvrslCmnts.trim() == undefined) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "<span style='color:red; font-weight:bold !important!'><i>Provide a reason for reversing this Loan Request Approval.</i></span>",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }

            actnTyp = 4;
            prmtMsg = "Are you sure you want to REVERSE this Loan Request Approval?";
        }


        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('q', 'UPDATE');
        formData.append('vtyp', vtyp);
        formData.append('actyp', actnTyp);
        formData.append('lnRqstID', lnRqstID);
        formData.append('assmntScoreCmnts', assmntScoreCmnts);
        formData.append('ttlScore', ttlScore);
        formData.append('cashCollateralAcctID', cashCollateralID);
        formData.append('xptdCashColtValue', xptdCashColtValue);
        formData.append('prptyCollateralAcctID', prptyCollateralID);
        formData.append('xptdPrptyColtValue', xptdPrptyColtValue);
        formData.append('invstmntCollateralAcctID', invstmntCollateralID);
        formData.append('xptdInvstmntColtValue', xptdInvstmntColtValue);
        formData.append('rvrslCmnts', rvrslCmnts);
        if(rcdCount > 0){
            formData.append('slctdGrpMembers',slctdGrpMembers);
        }
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    $body = $("body");
                    $body.addClass("mdlloadingDiag");
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                var json = $.parseJSON(data);
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: "<div><span style=\"color:red; font-weight:bold !important;\">Please complete ALL <b>" + json.TTL_COUNT + "</b> ASSESSMENT QUESTIONS before proceeding!<br/></span></div>",
                                    callback: function () { /* your callback code */
                                    }
                                });
                                return false;
                            } else {
                                if (actn == "SUBMIT") {
                                    $("#assmntScoreCmnts").attr("readonly", true);
                                    $("#withdrawLoanRqst").css("display", "inline-block");
                                    $("#withdrawLoanRqst1").css("display", "inline-block");
                                    $("#submitLoanRqst").css("display", "none");
                                    $("#submitLoanRqst1").css("display", "none");
                                    $("#withdrawLoanRqstMn").css("display", "inline-block");
                                    //$("#divSW1").css("text-align", "right");
                                    //$("#divSW").css("text-align", "right");
                                    $("#saveLoanRqstMn").css("display", "none");
                                    $('#statusTitle').html("Initiated");
                                    $('#status').val("Initiated");
                                } else if (actn == "WITHDRAW" || actn == "REVERSE") {
                                    $("#assmntScoreCmnts").attr("readonly", false);
                                    $("#withdrawLoanRqst").css("display", "none");
                                    $("#withdrawLoanRqst1").css("display", "none");
                                    $("#submitLoanRqst").css("display", "inline-block");
                                    $("#submitLoanRqst1").css("display", "inline-block");
                                    $("#withdrawLoanRqstMn").css("display", "none");
                                    //$("#divSW1").css("text-align", "right");
                                    //$("#divSW").css("text-align", "right");
                                    $("#saveLoanRqstMn").css("display", "inline-block");
                                    $('#statusTitle').html("Withdrawn");
                                    $('#status').val("Withdrawn");
                                }

                                getLoanRqstForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Loan Request', 15, subPgNo, 0, 'EDIT', lnRqstID, 'indCustTable', 'indCustTableRow1', function () {
                                    if (actnTyp == 4) {
                                        $("#myFormsModaly").modal("hide");
                                    }
                                    bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: data,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });
                            }


//                            bootbox.alert({
//                                size: "small",
//                                title: "Rhomicom Message",
//                                message: data,
//                                callback: function () {
//                                }
//                            });

                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function saveDisbursementHdr(pgNo, subPgNo, vtyp)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var obj;
        var disbmntHdrID = typeof $("#disbmntHdrID").val() === 'undefined' ? -1 : $("#disbmntHdrID").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
        var description = typeof $("#description").val() === 'undefined' ? '' : $("#description").val();
        var crncyID = typeof $("#crncyID").val() === 'undefined' ? -1 : $("#crncyID").val();
        //var custType = typeof $("input[name='custType']:checked").val() === 'undefined' ? '' : $("input[name='custType']:checked").val();

        //alert("bnkBranchID "+$("#bnkBranchID").val());

        if (bnkBranchID == "" || bnkBranchID == -1) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "No Branch selected!",
                callback: function () { /* your callback code */
                }
            });
            return false;
        } else if (crncyID == "" || crncyID == -1) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please select Currency First!",
                callback: function () { /* your callback code */
                }
            });
            return false;
        } else if (description == "") {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide a Naration for the Disbursement!",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }

        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('disbmntHdrID', disbmntHdrID);
        formData.append('bnkBranchID', bnkBranchID);
        formData.append('crncyID', crncyID);
        formData.append('description', description);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    $("#batchNo").val(obj.batchNo);
                    $("#disbmntHdrID").val(obj.disbmntHdrID);
                    $("#status").val(obj.status);
                    $("#disbmntDate").val(obj.disbmntDate)

                    //SHOW EXTRA TABS
                    $("#standardEvtns").css("display", "block");
                    //$("#customEvnts").css("display", "block");

                    msg = "Disbursement Header Successfully Saved!";
                } else {

                    msg = data;
                }

                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: msg,
                    callback: function () { /* your callback code */
                    }
                });
            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function autoLoadApprovedLoans(pgNo, subPgNo, vtyp) {
    var disbmntHdrID = typeof $("#disbmntHdrID").val() === 'undefined' ? -1 : $("#disbmntHdrID").val();
    var disbmntDetId = typeof $("#disbmntDetId").val() === 'undefined' ? -1 : $("#disbmntDetId").val();
    var custType = typeof $("#custType option:selected").val() === 'undefined' ? '' : $("#custType option:selected").val();
    var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
    var crncyID = typeof $("#crncyID").val() === 'undefined' ? -1 : $("#crncyID").val();
    var custGrpID = typeof $("#custGrpID").val() === 'undefined' ? -1 : $("#custGrpID").val();
    var description = typeof $("#description").val() === 'undefined' ? '' : $("#description").val();
    /*if (loadApprvdLoans == "Man Load" || loadApprvdLoans == "") {
     $body.removeClass("mdlloadingDiag");
     $body.removeClass("mdlloading");
     return false;
     } else if (custType == "") {
     $body.removeClass("mdlloadingDiag");
     $body.removeClass("mdlloading");
     return
     } else */
    if (bnkBranchID == "" || bnkBranchID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a Branch First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (disbmntHdrID == "" || disbmntHdrID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please save Header First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (custType === "--Please Select--") {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select Customer Type First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (custType === "Group Members" && custGrpID == -1) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select Customer Group First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    bootbox.confirm({
        title: "Rhomicom Message",
        message: "Are you sure you want to auto-load all approved but undisbursed loans?",
        buttons: {
            confirm: {
                label: 'Yes',
                className: 'btn-success'
            },
            cancel: {
                label: 'No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result) {
                $body = $("body");
                $body.addClass("mdlloadingDiag");
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {
                        var msg = "";
                        var data = xmlhttp.responseText;
                        if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                            json = $.parseJSON(data);
                            getDisbursementForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Disbursement', 15, subPgNo, 0, 'EDIT', disbmntHdrID, 'indCustTable', 'indCustTableRow1', function () {

                                $('#myFormsModaly').modal('hide');
                                $body.removeClass("mdlloadingDiag");
                                $body.removeClass("mdlloading");
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: "Approved Loans Successfully Loaded!",
                                    callback: function () { /* your callback code */
                                    }
                                });
                            });
                            if (1 == 2) {
                                var disbDetCount = json.disbDetArray.length;
                                var disbDet = '';
                                var j = 0;
                                var cntr1 = 0;
                                for (j = 0; j < disbDetCount; j++) {
                                    cntr1++;
                                    disbDet = disbDet + '<tr id="disbmntDetTblAddRow_' + json.disbDetArray[j].disbmntDetId + '">' +
                                            '<td><button type="button" title="View Loan Request" class="btn btn-default btn-sm" onclick="getSvngsWtdwlForm(\'myLovModal\', \'myLovModalBody\', \'myLovModalTitle\', \'loanDisbmntDetForm\', \'disbmntDetTblAddRow' + json.disbDetArray[j].disbmntDetId + '\', \'Edit Withdrawal Commission\', 15,4.2, 5, \'EDIT\',' + json.disbDetArray[j].disbmntDetId + ');" style="padding:2px !important;">' +
                                            '<img src="cmn_images/kghostview.png" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
                                            '</button></td>' +
                                            '<td>' + cntr1 + '</td>' +
                                            '<td>' + json.disbDetArray[j].customer + '</td>' +
                                            '<td>' + json.disbDetArray[j].custType + '</td>' +
                                            '<td>' + json.disbDetArray[j].trnsctnId + '</td>' +
                                            '<td style="color:blue !important;font-weight: bold; font-size: 14px !important;">' + formatAsMoney(json.disbDetArray[j].approvedAmount) + '</td>' +
                                            '<td>' + json.disbDetArray[j].tenorDisp + '</td>' +
                                            '<td>' + formatAsMoney(json.disbDetArray[j].interestRate) + '</td>' +
                                            '<td>' + json.disbDetArray[j].loanType + '</td>' +
                                            '<td>...</td>' +
                                            '<td><button type="button" title="Clear Loan Request" class="btn btn-default btn-sm" onclick="deleteLoanDisbursementDet(' + json.disbDetArray[j].disbmntDetId + ',' + disbmntHdrID + ');" style="padding:2px !important;">' +
                                            '<img src="cmn_images/delete_img.gif" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
                                            '</button></td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].loanRqstId + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].chargeInterest + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].loanTenor + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].loanTenorType + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].loanRepaymentType + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].compoundingPeriod + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].gracePeriodNo + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].gracePeriodType + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].disbmntDetId + '</td>' +
                                            '</tr>';
                                }

                                $('#disbmntDetTblTbody').children('tr').remove();
                                $('#disbmntDetTblAdd').append(disbDet);
                            }


                        } else {

                            msg = data;
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: msg,
                                callback: function () { /* your callback code */
                                }
                            });
                        }
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=1&q=UPDATE" +
                        "&disbmntHdrID=" + disbmntHdrID +
                        "&disbmntDetId=" + disbmntDetId +
                        "&bnkBranchID=" + bnkBranchID +
                        "&custGrpID=" + custGrpID +
                        "&custType=" + custType +
                        "&crncyID=" + crncyID +
                        "&description=" + description);
            }
        }
    });
}

function disburseApprovedLoans(pgNo, subPgNo, optn) {
    var disbmntHdrID = typeof $("#disbmntHdrID").val() === 'undefined' ? -1 : $("#disbmntHdrID").val();
    var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
    var rcdCount = 0;
    var box;
    var box2;
    var mnBox;
    var wtMsg = "Disbursing";
    var rtnMsg = "Disbursed";
    var prmptMsg = "Are you sure you want to DISBURSE all these Loans?";
    if (optn == 1) {//VOID DISBURSEMENT
        wtMsg = "Voiding";
        rtnMsg = "Voided";
        prmptMsg = "Are you sure you want to VOID this disbursement?";
    }

    if (disbmntHdrID == "" || disbmntHdrID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please save Header First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (bnkBranchID == "" || bnkBranchID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please Select Branch First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    mnBox = bootbox.confirm({
        title: "Rhomicom Message",
        message: prmptMsg,
        buttons: {
            confirm: {
                label: 'Yes',
                className: 'btn-success'
            },
            cancel: {
                label: 'No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> '+wtMsg+' Selected Loans. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {
                        var msg = "";
                        var data = xmlhttp.responseText;
                        if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                            var json = $.parseJSON(data);
                            msg = "Loans Successfully "+rtnMsg; //json.finMsg;
                            box.modal('hide');
                            getDisbursementForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Disbursement', 15, 4.2, 0, 'EDIT', disbmntHdrID, 'indCustTable', 'indCustTableRow1', function () {

                                box2 = bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { 
                                    }
                                });
                                box2.find('.modal-content').css({
                                    'margin-top': function () {
                                        var w = $(window).height();
                                        var b = $(".modal-dialog").height();
                                        // should not be (w-h)/2
                                        var h = (w - b - 150) / 2;
                                        return h + "px";
                                    }
                                });
                            });
                            if (1 == 2) {
                                var disbDetCount = json.disbDetArray.length;
                                var disbDet = '';
                                var j = 0;
                                var cntr1 = 0;
                                for (j = 0; j < disbDetCount; j++) {
                                    cntr1++;
                                    disbDet = disbDet + '<tr id="disbmntDetTblAddRow_' + cntr1 + '">' +
                                            '<td><button type="button" title="View Loan Request" class="btn btn-default btn-sm" onclick="getSvngsWtdwlForm(\'myLovModal\', \'myLovModalBody\', \'myLovModalTitle\', \'loanDisbmntDetForm\', \'disbmntDetTblAddRow' + json.disbDetArray[j].disbmntDetId + '\', \'Edit Withdrawal Commission\', 15,4.2, 5, \'EDIT\',' + json.disbDetArray[j].disbmntDetId + ');" style="padding:2px !important;">' +
                                            '<img src="cmn_images/kghostview.png" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
                                            '</button></td>' +
                                            '<td>' + cntr1 + '</td>' +
                                            '<td>' + json.disbDetArray[j].customer + '</td>' +
                                            '<td>' + json.disbDetArray[j].custType + '</td>' +
                                            '<td>' + json.disbDetArray[j].trnsctnId + '</td>' +
                                            '<td style="color:blue !important;font-weight: bold; font-size: 14px !important;">' + formatAsMoney(json.disbDetArray[j].approvedAmount) + '</td>' +
                                            '<td>' + json.disbDetArray[j].tenorDisp + '</td>' +
                                            '<td>' + formatAsMoney(json.disbDetArray[j].interestRate) + '</td>' +
                                            '<td>' + json.disbDetArray[j].loanType + '</td>' +
                                            '<td><button type="button" title="View Schedule" class="btn btn-default btn-sm" onclick="showAmo(' + json.disbDetArray[j].newPrincipalBal + ',' + json.disbDetArray[j].interestRatePerPeriod +
                                            ', ' + json.disbDetArray[j].ttlLoanTermTimes + ', ' + json.disbDetArray[j].scheduledPrdcPaymntAmnt + ', \'' + json.disbDetArray[j].loanRepaymentType + '\', \'' + json.disbDetArray[j].repayStartDate +
                                            '\', \'' + json.disbDetArray[j].repayEndDate + '\',\'myFormsModalBodyLgz\',' + json.disbDetArray[j].disbmntDetId + ',\'' + json.disbDetArray[j].interestRateType + '\', \'' + json.disbDetArray[j].crdtType + '\')"; style="padding:2px !important;">' +
                                            '<img src="cmn_images/kghostview.png" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
                                            '</button></td>' +
                                            '<td><button type="button" title="Clear Loan Request" class="btn btn-default btn-sm" onclick="getSvngsWtdwlForm(\'myLovModal\', \'myLovModalBody\', \'myLovModalTitle\', \'svngsWtdwlCmsnForm\', \'disbmntDetTblAddRow' + json.disbDetArray[j].disbmntDetId + '\', \'Edit Withdrawal Commission\', 12,7.1, 5, \'EDIT\',' + json.disbDetArray[j].disbmntDetId + ');" style="padding:2px !important;">' +
                                            '<img src="cmn_images/delete_img.gif" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
                                            '</button></td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].loanRqstId + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].chargeInterest + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].loanTenor + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].loanTenorType + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].loanRepaymentType + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].compoundingPeriod + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].gracePeriodNo + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].gracePeriodType + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].disbmntDetId + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].interestRatePerPeriod + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].ttlLoanTermTimes + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].scheduledPrdcPaymntAmnt + '</td>' +
                                            '<td style="display:none;">' + json.disbDetArray[j].interestRateType + '</td>' +
                                            '</tr>';
                                }

                                $('#disbmntDetTblTbody').children('tr').remove();
                                $('#disbmntDetTblAdd').append(disbDet);
                            }


                        } else {

                            msg = data;
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: msg,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        }
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=2&q=UPDATE" +
                        "&disbmntHdrID=" + disbmntHdrID + "&optn=" + optn + "&bnkBranchID=" + bnkBranchID);
            }
        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function getLoanApplicant() {
//alert('Him');
    var custType = $('#custType').val();
    //alert("Hit "+custType);
    //var custGrpID = $('#custGrpID').val();
    if (custType === "" || custType === undefined) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select Customer Type First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    var lovName = "";
    var extraWhere = " AND 1 = 1";
    switch (custType) {
        case 'Individual':
            lovName = "MCF Corporate/Individual Loans TBD";
            getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'bnkBranchID', 'crncyID', 'custType', 'radio', true, '', 'loanRqstId', 'loanRqst', 'clear', 1, extraWhere);
            break;
        case 'Corporate':
            lovName = "MCF Corporate/Individual Loans TBD";
            getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'bnkBranchID', 'crncyID', 'custType', 'radio', true, '', 'loanRqstId', 'loanRqst', 'clear', 1, extraWhere);
            break;
        case 'Individual and Corporate':
            lovName = "MCF Corporate N Individual Loans TBD";
            getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'gnrlOrgID', 'bnkBranchID', 'crncyID', 'radio', true, '', 'loanRqstId', 'loanRqst', 'clear', 1, extraWhere);
            break;
        case 'Group Members':
            lovName = "MCF Group Members Loans TBD";
            getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovName, 'bnkBranchID', 'crncyID', 'custGrpID', 'radio', true, '', 'loanRqstId', 'loanRqst', 'clear', 1, extraWhere);
            break;
    }


}

function getAddLoanLinesForm(elementID, modalBodyID, titleElementID, formElementID, tRowElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID)
{
    var disbmntHdrID = typeof $("#disbmntHdrID").val() === 'undefined' ? -1 : $("#disbmntHdrID").val();
    var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
    var crncyID = typeof $("#crncyID").val() === 'undefined' ? -1 : $("#crncyID").val();
    var disbmntDetId = pKeyID; //$('#acctSignID').val();

    if (disbmntHdrID === 'undefined' || disbmntHdrID === '' || disbmntHdrID === -1) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please save Disbursement first!",
            callback: function () {
            }
        });
        return false;
    } else if (parseInt(crncyID) === -1 || crncyID === undefined) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select Disbursement Currency First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {


        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var xmlhttp;
        if (window.XMLHttpRequest)
        {
            /*code for IE7+, Firefox, Chrome, Opera, Safari*/
            xmlhttp = new XMLHttpRequest();
        } else
        {
            /*code for IE6, IE5*/
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
        xmlhttp.onreadystatechange = function ()
        {
            if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
            {
//alert("Hello");
                $('#' + titleElementID).html(formTitle);
                $('#' + modalBodyID).html(xmlhttp.responseText);
                /*$('.modal-content').resizable({
                 //alsoResize: ".modal-dialog",
                 minHeight: 600,
                 minWidth: 300
                 });*/
                /*$('.modal-dialog').draggable();*/
                $(function () {
                    $('.form_date').datetimepicker({
                        format: "d-M-yyyy",
                        language: 'en',
                        weekStart: 0,
                        todayBtn: true,
                        autoclose: true,
                        todayHighlight: true,
                        keyboardNavigation: true,
                        startView: 2,
                        minView: 2,
                        maxView: 4,
                        forceParse: true
                    });
                });
                if (vtyp === 5 && vtypActn === 'EDIT')
                {
                    /*Get various field element IDs and populate values*/
                    var $tds = $('#' + tRowElementID).find('td');
                    $('#lowRange').val($.trim($tds.eq(2).text()));
                    $('#highRange').val($.trim($tds.eq(3).text()));
                    $('#amountFlat').val($.trim($tds.eq(4).text()));
                    $('#amountPrcnt').val($.trim($tds.eq(5).text()));
                    $('#remarks').val($.trim($tds.eq(6).text()));
                    $('#tblRowElementID').val(tRowElementID);
                }

                $('#' + elementID).on('show.bs.modal', function (e) {
                    $(this).find('.modal-body').css({
                        'max-height': '100%'
                    });
                });
                $body.removeClass("mdlloadingDiag");
                $('#' + elementID).modal({backdrop: 'static',keyboard:false});
                $('#' + elementID).off('hidden.bs.modal');
                $('#' + elementID).one('hidden.bs.modal', function (e) {
                    $('#' + titleElementID).html('');
                    $('#' + modalBodyID).html('');
                    $(e.currentTarget).unbind();
                });
                $(document).ready(function () {
                    $('#' + formElementID).submit(function (e) {
                        e.preventDefault();
                        return false;
                    });
                    if (custType == "Corporate" || custType == "Individual") {
                        $("#srcTypeDiv").css("display", "block");
                    } else {
                        $("#srcTypeDiv").css("display", "none");
                    }
                });
            }
        };
        xmlhttp.open("POST", "index.php", true);
        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn +
                "&disbmntHdrID=" + disbmntHdrID +
                "&bnkBranchID=" + bnkBranchID +
                "&rowID=" + disbmntDetId +
                "&crncyID=" + crncyID);
    }
}

function saveLoanRqstForm(pgNo, subPgNo) {
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var disbmntHdrID = typeof $("#disbmntHdrID").val() === 'undefined' ? -1 : $("#disbmntHdrID").val();
    var disbmntDetId = typeof $("#disbmntDetId").val() === 'undefined' ? -1 : $("#disbmntDetId").val();
    var custType = typeof $("#custType option:selected").val() === 'undefined' ? '' : $("#custType option:selected").val();
    var loanRqstId = typeof $("#loanRqstId").val() === 'undefined' ? -1 : $("#loanRqstId").val();
    var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
    var crncyID = typeof $("#crncyID").val() === 'undefined' ? -1 : $("#crncyID").val();
    var custGrpID = typeof $("#custGrpID").val() === 'undefined' ? -1 : $("#custGrpID").val();
    var description = typeof $("#description").val() === 'undefined' ? '' : $("#description").val();
    /*if (loadApprvdLoans == "Man Load" || loadApprvdLoans == "") {
     $body.removeClass("mdlloadingDiag");
     $body.removeClass("mdlloading");
     return false;
     } else if (custType == "") {
     $body.removeClass("mdlloadingDiag");
     $body.removeClass("mdlloading");
     return
     } else */
    if (bnkBranchID == "" || bnkBranchID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a Branch First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (disbmntHdrID == "" || disbmntHdrID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please save Header First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (custType == "--Please Select--") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select Customer Type first!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (custType === "Group Members" && custGrpID == -1) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select Customer Group First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            var msg = "";
            var data = xmlhttp.responseText;
            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                json = $.parseJSON(data);
                //msg = "Loans Successfully Saved!";
                getDisbursementForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Disbursement', 15, subPgNo, 0, 'EDIT', disbmntHdrID, 'indCustTable', 'indCustTableRow1', function () {

                    $('#myFormsModaly').modal('hide');
                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloading");
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Approved Loan Successfully Loaded!",
                        callback: function () { /* your callback code */
                        }
                    });
                });
                if (1 == 2) {


                    var disbDetCount = json.disbDetArray.length;
                    var disbDet = '';
                    var j = 0;
                    var cntr1 = 0;
                    for (j = 0; j < disbDetCount; j++) {
                        cntr1++;
                        disbDet = disbDet + '<tr id="disbmntDetTblAddRow_' + cntr1 + '">' +
                                '<td><button type="button" title="View Loan Request" class="btn btn-default btn-sm" onclick="getSvngsWtdwlForm(\'myLovModal\', \'myLovModalBody\', \'myLovModalTitle\', \'loanDisbmntDetForm\', \'disbmntDetTblAddRow' + json.disbDetArray[j].disbmntDetId + '\', \'Edit Withdrawal Commission\', 15,4.2, 5, \'EDIT\',' + json.disbDetArray[j].disbmntDetId + ');" style="padding:2px !important;">' +
                                '<img src="cmn_images/kghostview.png" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
                                '</button></td>' +
                                '<td>' + cntr1 + '</td>' +
                                '<td>' + json.disbDetArray[j].customer + '</td>' +
                                '<td>' + json.disbDetArray[j].custType + '</td>' +
                                '<td>' + json.disbDetArray[j].trnsctnId + '</td>' +
                                '<td>' + json.disbDetArray[j].approvedAmount + '</td>' +
                                '<td>' + json.disbDetArray[j].tenorDisp + '</td>' +
                                '<td>' + json.disbDetArray[j].interestRate + '</td>' +
                                '<td>' + json.disbDetArray[j].applicationDate + '</td>' +
                                '<td>...</td>' +
                                '<td><button type="button" title="Clear Loan Request" class="btn btn-default btn-sm" onclick="getSvngsWtdwlForm(\'myLovModal\', \'myLovModalBody\', \'myLovModalTitle\', \'svngsWtdwlCmsnForm\', \'disbmntDetTblAddRow' + json.disbDetArray[j].disbmntDetId + '\', \'Edit Withdrawal Commission\', 12,7.1, 5, \'EDIT\',' + json.disbDetArray[j].disbmntDetId + ');" style="padding:2px !important;">' +
                                '<img src="cmn_images/delete_img.gif" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
                                '</button></td>' +
                                '<td style="display:none;">' + json.disbDetArray[j].loanRqstId + '</td>' +
                                '<td style="display:none;">' + json.disbDetArray[j].chargeInterest + '</td>' +
                                '<td style="display:none;">' + json.disbDetArray[j].loanTenor + '</td>' +
                                '<td style="display:none;">' + json.disbDetArray[j].loanTenorType + '</td>' +
                                '<td style="display:none;">' + json.disbDetArray[j].loanRepaymentType + '</td>' +
                                '<td style="display:none;">' + json.disbDetArray[j].compoundingPeriod + '</td>' +
                                '<td style="display:none;">' + json.disbDetArray[j].gracePeriodNo + '</td>' +
                                '<td style="display:none;">' + json.disbDetArray[j].gracePeriodType + '</td>' +
                                '<td style="display:none;">' + json.disbDetArray[j].disbmntDetId + '</td>' +
                                '</tr>';
                    }

                    $('#disbmntDetTblTbody').children('tr').remove();
                    $('#disbmntDetTblAdd').append(disbDet);
                }

            } else {

                msg = data;
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: msg,
                    callback: function () { /* your callback code */
                    }
                });
            }

        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=1&q=UPDATE" +
            "&disbmntHdrID=" + disbmntHdrID +
            "&disbmntDetId=" + disbmntDetId +
            "&bnkBranchID=" + bnkBranchID +
            "&custGrpID=" + custGrpID +
            "&loanRqstId=" + loanRqstId +
            "&custType=" + custType +
            "&crncyID=" + crncyID +
            "&description=" + description);
}

function saveLoanSchedule(pgNo, subPgNo, disbmntDetId) {
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var loanSchedule = "";
    var scheduleEndDte = typeof $("#schdlEndDte").text() === 'undefined' ? '' : $("#schdlEndDte").text();
    //alert(scheduleEndDte);
    //$body.removeClass("mdlloadingDiag");
    //return false;
    
    $('#amrtztnSchedule').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {

                var rndmNum = $(el).attr('id').split("_")[1];
                var elmntNm = $(el).attr('id').split("_")[0];
                if (elmntNm === 'headers') {

                } else {

                    if (typeof $('#lines_' + rndmNum).val() === 'undefined')
                    {
                        /*Do Nothing*/
                    } else {
                        loanSchedule = loanSchedule
                                + $('#lines' + rndmNum + '_pDate').text() + "~"
                                + fmtAsNumberLcl($('#lines' + rndmNum + '_begBal').text()) + "~"
                                + fmtAsNumberLcl($('#lines' + rndmNum + '_intrst').text()) + "~"
                                + fmtAsNumberLcl($('#lines' + rndmNum + '_prncpl').text()) + "~"
                                + fmtAsNumberLcl($('#lines' + rndmNum + '_endnBal').text()) + "|";
                    }
                }
            }
        }
    });
    //alert("hp "+loanSchedule);
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            var msg = "";
            var data = xmlhttp.responseText;
            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                json = $.parseJSON(data);
                msg = "Loans Schedule Saved!";
                $('#myFormsModalTitleLgz').modal('hide');
            } else {

                msg = data;
            }

            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: msg,
                callback: function () { /* your callback code */
                }
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=3&q=UPDATE" +
            "&loanSchedule=" + loanSchedule +
            "&disbmntDetId=" + disbmntDetId +
            "&scheduleEndDte=" + scheduleEndDte);
}

function saveLoanSchedule1() {
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var loanSchedule = "";
    $('#amrtztnSchedule').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {

                var rndmNum = $(el).attr('id').split("_")[1];
                var elmntNm = $(el).attr('id').split("_")[0];
                if (elmntNm === 'headers') {

                } else {

                    if (typeof $('#lines_' + rndmNum).val() === 'undefined')
                    {
                        /*Do Nothing*/
                    } else {
                        loanSchedule = loanSchedule
                                + $('#lines' + rndmNum + '_pDate').text() +
                                +fmtAsNumberLcl($('#lines' + rndmNum + '_begBal').text()) +
                                +fmtAsNumberLcl($('#lines' + rndmNum + '_intrst').text()) +
                                +fmtAsNumberLcl($('#lines' + rndmNum + '_prncpl').text()) +
                                +fmtAsNumberLcl($('#lines' + rndmNum + '_endnBal').text()) + "|";
                    }
                }
            }
        }
    });
    $body.removeClass("mdlloadingDiag");
    $body.removeClass("mdlloading");
}

function onChangeOfCustType() {
    var custTypSltd = typeof $("#custType").val() === 'undefined' ? '' : $("#custType").val(); //$("#custType option:selected").val();
    resetLoanRqstDetls();
    if (custTypSltd == "Group") {
        $('#custGrpDiv').css('display', 'block');
    } else {
        $('#custGrpDiv').css('display', 'none');
        $('#custGrpID').val(-1);
        $('#custGrp').val('');
        $('#bnkCustomerLbl').css('display', '');
    }

}

function onChangeOfRqstType() {
    var rqstTypeSltd = $("#rqstType option:selected").val();
    $('#refLoanrqstID').val(-1);
    $('#refLoanrqst').val('');
    if (rqstTypeSltd === "Top-Up Request") {
        $('#rqstIdForTopupDiv').css('display', 'block');
        $("#loanAmount").attr("disabled", false);
        $("#loanTenor").attr("disabled", true);
        $('#loanTenor').val('');
        $("#loanTenorType").attr("disabled", true);
    } else if (rqstTypeSltd === "Reschedule Request") {
        $('#rqstIdForTopupDiv').css('display', 'block');
        $("#loanAmount").attr("disabled", true);
        $('#loanAmount').val('');
        $("#loanTenor").attr("disabled", false);
        $("#loanTenorType").attr("disabled", false);
    } else {
        $('#rqstIdForTopupDiv').css('display', 'none');
        $('#refLoanrqstID').val(-1);
        $('#refLoanrqst').val('');
        $("#loanAmount").attr("disabled", false);
        $("#loanTenor").attr("disabled", false);
        $("#loanTenorType").attr("disabled", false);
    }

//$("#loanAmount").attr("readonly", "readonly");

}

function onClickrefLoanrqst1() {

    var custTypSltd = $("#custType option:selected").val();
    var lovNm = "All Bank Customers";
    if (custTypSltd === "Group") {
        if (nm == 0) {
            lovNm = "MCF Corporate/Group Customers";
            getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custType', '', 'radio', true, '', 'custGrpID', 'custGrp', 'clear', 1, '');
        } else {
            lovNm = "MCF Customer Group Members";
            getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custGrpID', '', 'radio', true, '', 'bnkCustomerID', 'bnkCustomer', 'clear', 1, '');
        }

    } else {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custType', '', 'radio', true, '', 'bnkCustomerID', 'bnkCustomer', 'clear', 1, '');
    }

}

function resetLoanRqstDetls() {
    $('#custGrpID').val(-1);
    $('#custGrp').val('');
    $('#bnkCustomerID').val(-1);
    $('#bnkCustomer').val('');
    $('#prdtTypeID').val(-1);
    $('#prdtType').val('');
    $('#loanAmount').val('');
    $('#loanTenor').val('');
    $('#rpmntSrcAcctID').val(-1);
    $('#rpmntSrcAcct').val('');
    $('#cashCollateralID').val(-1);
    $('#cashCollateral').val('');
    $('#invstmntCollateralID').val(-1);
    $('#invstmntCollateral').val('');
    $('#prptyCollateralID').val(-1);
    $('#prptyCollateral').val('');
    $('#rqstType').val('New Request');
    $('#refLoanrqstID').val(-1);
    $('#refLoanrqst').val('');
    $('#crdtType').val('Loan');
}

function resetLoanTopUpRschddlRqstDetls() {

    $('#rpmntSrcAcctID').val(-1);
    $('#rpmntSrcAcct').val('');
    $('#cashCollateralID').val(-1);
    $('#cashCollateral').val('');
    $('#invstmntCollateralID').val(-1);
    $('#invstmntCollateral').val('');
    $('#prptyCollateralID').val(-1);
    $('#prptyCollateral').val('');
    $('#refLoanrqstID').val(-1);
    $('#refLoanrqst').val('');
    $('#loanAmount').val('');
    $('#loanTenor').val('');
    $('#crdtType').val('Loan');
}

function onClickGroupNmOrCust(nm) {

    var custTypSltd = $("#custType option:selected").val();
    var grpApplicantTypeSltd = $("#grpApplicantType option:selected").val();
    //var lovNm = "All Bank Customers";
    var lovNm = "All Bank Customers - Account Holders";

    var rqstTypeSltd = $("#rqstType option:selected").val();
    if (rqstTypeSltd == "Top-Up Request" || rqstTypeSltd == "Reschedule Request") {
        resetLoanTopUpRschddlRqstDetls();
    }

    if (custTypSltd === "Group") {
        if (nm == 0) {
            lovNm = "MCF Corporate/Group Customers";
            getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custType', 'bnkBranchID', 'radio', true, '', 'custGrpID', 'custGrp', 'clear', 1, '');
        } else {
            if(grpApplicantTypeSltd === "Individual"){
                lovNm = "MCF Customer Group Members";
                getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custGrpID', 'bnkBranchID', 'radio', true, '', 'bnkCustomerID', 'bnkCustomer', 'clear', 1, '');
            }
        }

    } else {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custType', 'bnkBranchID', 'radio', true, '', 'bnkCustomerID', 'bnkCustomer', 'clear', 1, '');
    }

}

function onClickProduct(pgNo, subPgNo) {
    var custTypSltd = $("#custType option:selected").val();
    var lovNm = "MCF Loan Products - Individual";
    if (custTypSltd === "Corporate") {
        lovNm = "MCF Loan Products - Corporate";
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custTypeYes', 'crdtType', 'radio', true, '', 'prdtTypeID', 'prdtType', 'clear', 1, '', function () {
            getLoanPrdtDetsForApplctn(pgNo, subPgNo);
        });
    } else if (custTypSltd === "Group") {

        lovNm = "MCF Loan Products - Group";
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custTypeYes', 'crdtType', 'radio', true, '', 'prdtTypeID', 'prdtType', 'clear', 1, '', function () {
            getLoanPrdtDetsForApplctn(pgNo, subPgNo);
        });
    } else if (custTypSltd === "Individual") {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custTypeYes', 'crdtType', 'radio', true, '', 'prdtTypeID', 'prdtType', 'clear', 1, '', function () {
            getLoanPrdtDetsForApplctn(pgNo, subPgNo);
        });
    } else {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please Select Customer Type first!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

}

function onClickCollateral(pgNo, subPgNo, No) {

    if (No === 1) {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'All Bank Accounts (For Loan Repayment)', 'gnrlOrgID', 'bnkCustomerID', '', 'radio', true, '', 'cashCollateralID', 'cashCollateral', 'clear', 1, '', function () {
            getCollateralValue(pgNo, subPgNo, No);
        });
    } else if (No === 2) {

        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'Investment Collaterals', 'bnkBranchID', 'custType', 'bnkCustomerID', 'radio', true, '', 'invstmntCollateralID', 'invstmntCollateral', 'clear', 1, '', function () {
            getCollateralValue(pgNo, subPgNo, No);
        });
    } else if (No === 3) {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'Property Collaterals', 'gnrlOrgID', 'custType', 'bnkCustomerID', 'radio', true, '', 'prptyCollateralID', 'prptyCollateral', 'clear', 1, '', function () {
            getCollateralValue(pgNo, subPgNo, No);
        });
    }

}

function getCollateralValue(pgNo, subPgNo, No)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var json;
        var cashCollateralID = typeof $("#cashCollateralID").val() === 'undefined' ? -1 : $("#cashCollateralID").val();
        var invstmntCollateralID = typeof $("#invstmntCollateralID").val() === 'undefined' ? -1 : $("#invstmntCollateralID").val();
        var prptyCollateralID = typeof $("#prptyCollateralID").val() === 'undefined' ? -1 : $("#prptyCollateralID").val();
        var refLoanrqstID = typeof $("#refLoanrqstID").val() === 'undefined' ? -1 : $("#refLoanrqstID").val();
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', 8);
        if (No == 1) {
            formData.append('cashCollateralAcctID', cashCollateralID);
        } else if (No == 2) {
            formData.append('invstmntCollateralID', invstmntCollateralID);
        } else if (No == 3) {
            formData.append('prptyCollateralID', prptyCollateralID);
        }
        formData.append('coltTypeOptn', No);
        formData.append('refLoanrqstID', refLoanrqstID);        
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    json = $.parseJSON(data);
                    if (No == 1) {
                        $("#cashCollateralValue").val(json.coltValue);
                        $("#cashColHasLien").val(json.hasColtLien);
                    } else if (No == 2) {
                        $("#invstmntCollateralValue").val(json.coltValue);
                        $("#invstmntColHasLien").val(json.hasColtLien);
                    } else if (No == 3) {
                        $("#prptyCollateralValue").val(json.coltValue);
                        $("#prptyColHasLien").val(json.hasColtLien);
                    }

                } else {
                    bootbox.alert({
                        size: "small",
                        title: "ERROR!",
                        message: "Error: " + data,
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function onClickRefLoanRqst(pgNo, subPgNo) {
    var rqstTypeSltd = $("#rqstType option:selected").val();
//    if (rqstTypeSltd === "Reschedule Request") {
    
    getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'MCF Approved Customer Loans Per Product', 'gnrlOrgID', 'prdtTypeID', 'bnkCustomerID', 'radio', true, '', 'refLoanrqstID', 'refLoanrqst', 'clear', 1, '', function () {
        getRefLoanRqstDetsForApplctn(pgNo, subPgNo);
    });
//    } else {
//        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'MCF Approved Customer Loans Per Product', 'gnrlOrgID', 'prdtTypeID', 'bnkCustomerID', 'radio', true, '', 'refLoanrqstID', 'refLoanrqst', 'clear', 1, '');
//    }

}

function getRefLoanRqstDetsForApplctn(pgNo, subPgNo)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var json;
        var refLoanrqstID = typeof $("#refLoanrqstID").val() === 'undefined' ? -1 : $("#refLoanrqstID").val();
        var baseIntRate = typeof $("#baseIntRate").val() === 'undefined' ? -1 : $("#baseIntRate").val();
        var rqstType = typeof $("#rqstType").val() === 'undefined' ? '' : $("#rqstType").val();
        //alert("refLoanrqstID ="+ $("#refLoanrqstID").val());

        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', 6);
        formData.append('refLoanrqstID', refLoanrqstID);
        formData.append('rqstType', rqstType);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    json = $.parseJSON(data);
                    if (rqstType === "Reschedule Request") {
                        $("#loanAmount").val(json.refLoanRqstDetArry.principalAmountBal);
                        $("#loanTenorType").val(json.refLoanRqstDetArry.loanRepaymentType);
                        $("#loanTenor").val(json.refLoanRqstDetArry.ttlTenorBal);
                    } else {
                        $("#loanAmount").val("0.00");
                        $("#loanTenorType").val(json.refLoanRqstDetArry.apprvdLoanTenorType);
                        $("#loanTenor").val(json.refLoanRqstDetArry.apprvdLoanTenor);
                    }
                    $("#interestRate").val(baseIntRate);
                } else {
                    alert(data + " Error!");
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function getLoanRqstForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, listTableID, rowID, callBackFunc)
{
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }
//alert('Hello');
    if (!$.fn.DataTable.isDataTable('#' + listTableID)) {
        var table1 = $('#' + listTableID).DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#' + listTableID + ' tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table1.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
        $('#' + listTableID + ' tbody').on('mouseenter', 'tr', function () {
            if ($(this).hasClass('highlight')) {
                $(this).removeClass('highlight');
            } else {
                table1.$('tr.highlight').removeClass('highlight');
                $(this).addClass('highlight');
            }
        });
    }

//var p_statusTitle = "Incomplete";

    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
            $('#' + modalBodyID).html(xmlhttp.responseText);
            var p_statusTitle = $('#status').val();
            //$('#' + titleElementID).html(formTitle + "<span style='color:red;font-weight: bold;float:right;width:50%;' id='statusTitle'>" + p_statusTitle + "</span>");
            $('#' + titleElementID).html(formTitle);
            /*$('.modal-content').resizable({
             //alsoResize: ".modal-dialog",
             minHeight: 600,
             minWidth: 300
             });*/

            if (p_statusTitle == "Initiated") {
                $("#saveLoanRqstMn").css("display", "none");
                $("#withdrawLoanRqstMn").css("display", "inline-block");
            } else {
                $("#saveLoanRqstMn").css("display", "inline-block");
                $("#withdrawLoanRqstMn").css("display", "none");
            }



            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $('#myFormsModalLg').off('hidden.bs.modal');
            $('#myFormsModalLg').one('hidden.bs.modal', function (e) {
                if(vtypActn !== "VIEW"){
                    getCustData('', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.1');
                    $('#' + modalBodyID).html('');
                    $(e.currentTarget).unbind();
                }
            });
            $body.removeClass("mdlloadingDiag");
            //$body.removeClass("mdlloading");

            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + elementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/

                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + pKeyID);
}

function getDisbursementForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, listTableID, rowID, callBackFunc)
{
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }

    if (!$.fn.DataTable.isDataTable('#' + listTableID)) {
        var table1 = $('#' + listTableID).DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#' + listTableID + ' tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table1.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
        $('#' + listTableID + ' tbody').on('mouseenter', 'tr', function () {
            if ($(this).hasClass('highlight')) {
                $(this).removeClass('highlight');
            } else {
                table1.$('tr.highlight').removeClass('highlight');
                $(this).addClass('highlight');
            }
        });
    }

    var p_statusTitle = "Incomplete";
    if (vtypActn == "EDIT") {

    }


    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
//$('#' + titleElementID).html(formTitle + "<span style='color:red;font-weight: bold;float:right;width:50%;' id='statusTitle'>" + p_statusTitle + "</span>");
            $('#' + titleElementID).html(formTitle);
            $('#' + modalBodyID).html(xmlhttp.responseText);
            /*$('.modal-content').resizable({
             //alsoResize: ".modal-dialog",
             minHeight: 600,
             minWidth: 300
             });*/
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $('#myFormsModalLg').off('hidden.bs.modal');
            $('#myFormsModalLg').one('hidden.bs.modal', function (e) {
                $('#' + modalBodyID).html('');
                getCustData('', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.2')
                $(e.currentTarget).unbind();
            });
            $body.removeClass("mdlloadingDiag");
            //$('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + formElementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/

                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + pKeyID);
}

function getCustProfileForm(elementID, modalBodyID, titleElementID, formElementID,
        formTitle, custID, vtyp, pgNo, addOrEdit)
{
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            $('#' + titleElementID).html(formTitle);
            $('#' + modalBodyID).html(xmlhttp.responseText);
            /*$('.modal-dialog').draggable();*/
            if (pgNo == 1)
            {
                var table1 = $('#nationalIDTblRO').DataTable({
                    "paging": false,
                    "ordering": false,
                    "info": false,
                    "bFilter": false,
                    "scrollX": false
                });
                $('#nationalIDTblRO').wrap('<div class="dataTables_scroll" />');
                $('[data-toggle="tabajxprflro"]').click(function (e) {
                    var $this = $(this);
                    var targ = $this.attr('href');
                    var dttrgt = $this.attr('data-rhodata');
                    var linkArgs = 'grp=8&typ=1' + dttrgt;
                    return openATab(targ, linkArgs);
                });
            } else if (pgNo == 2)
            {
                var table1 = $('#nationalIDTblEDT').DataTable({
                    "paging": false,
                    "ordering": false,
                    "info": false,
                    "bFilter": false,
                    "scrollX": false
                });
                $('#nationalIDTblEDT').wrap('<div class="dataTables_scroll" />');
                $('[data-toggle="tabajxprfledt"]').click(function (e) {
                    var $this = $(this);
                    var targ = $this.attr('href');
                    var dttrgt = $this.attr('data-rhodata');
                    var linkArgs = 'grp=8&typ=1' + dttrgt;
                    return openATab(targ, linkArgs);
                });
            }
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            
            ;
            $(document).ready(function () {
                $('#' + formElementID).submit(function (e) {
                    e.preventDefault();
                    return false;
                });
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&vtyp=" + vtyp + "&custID=" + custID + "&addOrEdit=" + addOrEdit);
}


function getPersonsForm(elementID, modalBodyID, titleElementID, formElementID, tRowElementID, formTitle, vtyp, addOrEdit, pKeyID)
{
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            $('#' + titleElementID).html(formTitle);
            $('#' + modalBodyID).html(xmlhttp.responseText);
            /*$('.modal-content').resizable({
             //alsoResize: ".modal-dialog",
             minHeight: 600,
             minWidth: 300
             });*/
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            if (addOrEdit === 'EDIT')
            {
                /*Get various field element IDs and populate values*/
                var $tds = $('#' + tRowElementID).find('td');
                $('#ntnlIDCardsCountry').val($.trim($tds.eq(1).text()));
                $('#ntnlIDCardsIDTyp').val($.trim($tds.eq(2).text()));
                $('#ntnlIDCardsIDNo').val($.trim($tds.eq(3).text()));
                $('#ntnlIDCardsDateIssd').val($.trim($tds.eq(4).text()));
                $('#ntnlIDCardsExpDate').val($.trim($tds.eq(5).text()));
                $('#ntnlIDCardsOtherInfo').val($.trim($tds.eq(6).text()));
            }
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            ;
            $(document).ready(function () {
                $('#' + formElementID).submit(function (e) {
                    e.preventDefault();
                    return false;
                });
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=10&vtyp=" + vtyp + "&ntnlIDpKey=" + pKeyID);
}

function getAddtnlDataForm(elementID, modalBodyID, titleElementID, formElementID,
        tRowElementID, formTitle, vtyp, addOrEdit, pKeyID, pipeSprtdFieldIDs, extDtColNum, tableElmntID)
{
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            $('#' + titleElementID).html(formTitle);
            $('#' + modalBodyID).html(xmlhttp.responseText);
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            if (addOrEdit === 'EDIT')
            {
                var str_flds_array = pipeSprtdFieldIDs.split('|');
                var $tds = $('#' + tRowElementID).find('td');
                for (var i = 0; i < str_flds_array.length; i++) {
// Trim the excess whitespace.
                    var fldID = str_flds_array[i].replace(/^\s*/, "").replace(/\s*$/, "");
                    $('#' + fldID).val($.trim($tds.eq(i + 1).text()));
                }
            }
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            ;
            $(document).ready(function () {
                $('#' + formElementID).submit(function (e) {
                    e.preventDefault();
                    return false;
                });
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=2&vtyp=" + vtyp + "&addtnlPrsPkey=" + pKeyID +
            "&extDtColNum=" + extDtColNum
            + "&pipeSprtdFieldIDs=" + pipeSprtdFieldIDs +
            "&tableElmntID=" + tableElmntID + "&tRowElementID=" + tRowElementID
            + "&addOrEdit=" + addOrEdit);
}

function saveAddtnlDataForm(modalBodyID, addtnlPrsPkey, pipeSprtdFieldIDs, extDtColNum, tableElmntID, tRowElementID, addOrEdit)
{
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var str_flds_array = pipeSprtdFieldIDs.split('|');
    var str_flds_array_val = pipeSprtdFieldIDs.split('|');
    var lnkArgs = "";
    var tdsAppend = "";
    var $tds = $('#' + tRowElementID).find('td');
    var rndmNum = Math.floor((Math.random() * 99999) + parseInt(extDtColNum));
    for (var i = 0; i < str_flds_array.length; i++) {
// Trim the excess whitespace.
        var fldID = str_flds_array[i].replace(/^\s*/, "").replace(/\s*$/, "");
        str_flds_array[i] = fldID;
        str_flds_array_val[i] = typeof $('#' + fldID).val() === 'undefined' ? '%' : $('#' + fldID).val();
        lnkArgs = lnkArgs + "&" + fldID + "=" + str_flds_array_val[i];
        if (addOrEdit === 'EDIT')
        {
            $tds.eq(i + 1).html(str_flds_array_val[i]);
        } else
        {
            tdsAppend = tdsAppend + "<td>" + str_flds_array_val[i] + "</td>";
        }
    }
    if (addOrEdit === 'ADD')
    {
        var btnHtml = '<td><button type="button" class="btn btn-default btn-sm" onclick="getAddtnlDataForm(\'myFormsModal\', \'myFormsModalBody\', \'myFormsModalTitle\', \'addtnlPrsnTblrDataForm\',' +
                '\'prsExtrTblrDtCol_' + extDtColNum + '_Row' + rndmNum + '\', \'Add/Edit Data\', 12, \'EDIT\', ' + addtnlPrsPkey + ', \'' + pipeSprtdFieldIDs + '\', ' + extDtColNum + ', \'extDataTblCol_' + extDtColNum + '\');">' +
                '<img src="cmn_images/edit32.png" style="height:20px; width:auto; position: relative; vertical-align: middle;"></button></td>';
        $('#' + tableElmntID).append('<tr id="prsExtrTblrDtCol_' + extDtColNum + '_Row' + rndmNum + '">' + btnHtml + tdsAppend + '</tr>');
    }
    var allTblValues = "";
    $('#' + tableElmntID).find('tr').each(function (i, el) {
        var $tds1 = $(this).find('td');
        for (var i = 0; i < str_flds_array.length; i++) {
            if (i == str_flds_array.length - 1)
            {
                allTblValues = allTblValues + $tds1.eq(i + 1).text();
            } else {
                allTblValues = allTblValues + $tds1.eq(i + 1).text() + "~";
            }
        }
        allTblValues = allTblValues + "|";
    });
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            $body.removeClass("mdlloadingDiag");
            $('#' + modalBodyID).html(xmlhttp.responseText);
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=2&q=UPDATE&actyp=3&addtnlPrsPkey=" + addtnlPrsPkey
            + "&extDtColNum=" + extDtColNum + "&tableElmntID=" + tableElmntID + "&allTblValues=" + allTblValues);
}

function getMonthMon(mnthNo) {

    var monthMon;
    switch (mnthNo) {
        case 1:
            monthMon = "Jan";
            break;
        case 2:
            monthMon = "Feb";
            break;
        case 3:
            monthMon = "Mar";
            break;
        case 4:
            monthMon = "Apr";
            break;
        case 5:
            monthMon = "May";
            break;
        case 6:
            monthMon = "Jun";
            break;
        case 7:
            monthMon = "Jul";
            break;
        case 8:
            monthMon = "Aug";
            break;
        case 9:
            monthMon = "Sep";
            break;
        case 10:
            monthMon = "Oct";
            break;
        case 11:
            monthMon = "Nov";
            break;
        case 12:
            monthMon = "Dec";
            break;
    }

    return monthMon;
}

function getDayDsp(dayNo) {

    var dayDsp;
    switch (dayNo) {
        case 0:
            dayDsp = "SUNDAY";
            break;
        case 1:
            dayDsp = "MONDAY"
            break;
        case 2:
            dayDsp = "TUESDAY";
            break;
        case 3:
            dayDsp = "WEDNESDAY";
            break;
        case 4:
            dayDsp = "THURSDAY";
            break;
        case 5:
            dayDsp = "FRIDAY";
            break;
        case 6:
            dayDsp = "SATURDAY";
            break;
    }

    return dayDsp;
}

function showAmo_OLD(jcloanamount, jinterestRatePerPeriod, jtotalloantermtimes, jpaymentPerperiod, jcpayback, jrepayStartDate, jrepayEndDate, jdivid) {
    var outputStrBuilder = [];
    outputStrBuilder.push("<table border=0 cellpadding=3 width='100%'>");
    outputStrBuilder.push("<tr align=right bgcolor='#E0F0FE'><td>&nbsp;</td><td><b>Beginning Balance</b></td><td><b>Interest</b></td><td><b>Principal</b></td><td><b>Ending Balance</b></td></tr>");
    var saBeginningBalance = jcloanamount;
    var intTerm = Math.floor(jtotalloantermtimes);
    var remainingTerm = jtotalloantermtimes - intTerm;
    for (i = 0; i < intTerm; i++) {
        var thisInterest = saBeginningBalance * jinterestRatePerPeriod;
        var thisPrincipal = jpaymentPerperiod - thisInterest;
        var thisEndingBalance = saBeginningBalance - thisPrincipal;
        if ((i % 2) == 1) {
            outputStrBuilder.push("<tr align=right><td>" + (i + 1));
        } else {
            outputStrBuilder.push("<tr align=right bgcolor='#dddddd'><td>" + (i + 1));
        }
        if (jcpayback == "halfyear") {
            var thisYear = Math.floor((i + 2) / 2);
            outputStrBuilder.push(". Year #" + thisYear);
        }
        outputStrBuilder.push("</td><td>" + formatAsMoney(saBeginningBalance));
        outputStrBuilder.push("</td><td>" + formatAsMoney(thisInterest));
        outputStrBuilder.push("</td><td>" + formatAsMoney(thisPrincipal));
        outputStrBuilder.push("</td><td>" + formatAsMoney(thisEndingBalance) + "</td></tr>");
        saBeginningBalance = thisEndingBalance;
        if (i > 0) {
            if (jcpayback == "halfmonth") {
                if (((i + 1) % 24) == 0) {
                    var thisYear = Math.floor((i + 1) / 24);
                    outputStrBuilder.push("<tr align=center bgcolor='#E0F0FE'><td colspan='5'><b>Year #" + thisYear + " End</b></td></tr>");
                }
            } else if (jcpayback == "month") {
                if (((i + 1) % 12) == 0) {
                    var thisYear = Math.floor((i + 1) / 12);
                    outputStrBuilder.push("<tr align=center bgcolor='#E0F0FE'><td colspan='5'><b>Year #" + thisYear + " End</b></td></tr>");
                }
            } else if (jcpayback == "quarter") {
                if (((i + 1) % 4) == 0) {
                    var thisYear = Math.floor((i + 1) / 4);
                    outputStrBuilder.push("<tr align=center bgcolor='#E0F0FE'><td colspan='5'><b>Year #" + thisYear + " End</b></td></tr>");
                }
            }
        }
    }
    if (remainingTerm > 0.0001) {
        var thisInterest = saBeginningBalance * jinterestRatePerPeriod;
        outputStrBuilder.push("<tr align=right bgcolor='#E0F0FE'><td>" + (intTerm + 1));
        outputStrBuilder.push(" (Partial)</td><td>" + formatAsMoney(saBeginningBalance) + "</td><td>" + formatAsMoney(thisInterest) + "</td><td>" + formatAsMoney(saBeginningBalance) + "</td><td>" + formatAsMoney(0) + "</td></tr>");
    }
    outputStrBuilder.push("</table>");
    var outPutString = outputStrBuilder.join("");
    //$('#' + jdivid).html("<br><h3>Periodic Payment: "+ formatAsMoney(jpaymentPerperiod) +"</h3><div style=\"text-align:right;margin-top:-10px;\"><a href=\"#\" onClick=\"gObj('" + jdivid + "').innerHTML='';return false;\"><img src=\"cmn_images/lovButton.png\" width=\"18\" height=\"18\" border=\"0\"></a></div>" + outPutString);
    $('#' + jdivid).html("<br><table><tr><td><span style='font-size:25px !important;margin-right:100px !important;'>Periodic Payment: " + formatAsMoney(jpaymentPerperiod) + "</span></td><td><span style='font-size:20px !important;margin-right:30px !important; text-align:right;'>Start Date: " + jrepayStartDate + "</span></td><td><span style='font-size:20px !important; text-align:rignt;'>End Date: " + jrepayEndDate + "</span></td></tr></table><div style=\"text-align:right;margin-top:-10px;\"><a href=\"#\" onClick=\"gObj('" + jdivid + "').innerHTML='';return false;\"><img src=\"cmn_images/lovButton.png\" width=\"18\" height=\"18\" border=\"0\"></a></div>" + outPutString);
    $('#myFormsModalTitleLgz').html("Amortization Schedule");
    $('#myFormsModalLgz').modal('show');
    return false;
}

function showAmo(jcloanamount, jinterestRatePerPeriod, jtotalloantermtimes, jpaymentPerperiod, jcpayback, jrepayStartDate, jrepayEndDate, jdivid, disbmntDetId, intRateType, crdtType, compoundType, disbmntHdrID, isSchdlSvd) {

    isSchdlSvdBtnDsply = " display:block !important;";
    if(isSchdlSvd == "YES"){
        isSchdlSvdBtnDsply = " display:none !important;";
    }
    var p = 0;
    $("#trnsNtAllwdDysSlt1 option").each(function ()
    {
        trnsNtAllwdDys[p] = $(this).val();
        p = p + 1;
    });
    var q = 0;
    $("#trnsNtAllwdDtsSlt1 option").each(function ()
    {
        trnsNtAllwdDts[q] = $(this).val();
        q = q + 1;
    });

    if (crdtType === "Overdraft") {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<b>Start Date: "+jrepayStartDate +"</b></br>"+
                    "<b>End Date: "+jrepayEndDate +"</b></br>"+
                    "<b><span style='color:red !important;'>No Repayment Schedule for Overdraft Facilities</span></b>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
    var outputStrBuilder = [];
    outputStrBuilder.push("<table id='amrtztnSchedule' border=0 cellpadding=3 width='100%'>");
    outputStrBuilder.push("<tr id='headers_0' align=right bgcolor='#E0F0FE'><td>&nbsp;</td><td><b>Payment Date</b></td><td><b>Beginning Balance</b></td><td><b>Interest</b></td><td><b>Principal</b></td><td><b>Ending Balance</b></td></tr>");
    var currentDate = new Date(jrepayStartDate);
    var pday = "";//currentDate.getDate();
    var pmonth = "";// currentDate.getMonth() + 1;
    var pyear = "";//currentDate.getFullYear();
    var monthMon;
    var repayFrqncy = jcpayback;
    var saBeginningBalance = jcloanamount;
    var intTerm = Math.floor(jtotalloantermtimes);
    var remainingTerm = jtotalloantermtimes - intTerm;
    var dateDsply = "";
    var pdayDsp = "";
    var monthMonDsp = "";
    //alert(remainingTerm);
    for (var i = 0; i < intTerm; i++) {
        
        pday = currentDate.getDate();
        pmonth = currentDate.getMonth() + 1;
        pyear = currentDate.getFullYear();        

        monthMon = getMonthMon(pmonth);              
        
        var thisInterest;
        var thisPrincipal;
        var thisPrincipal1;
        var thisEndingBalance;
        if (intRateType === "Flat Rate" || compoundType ===  "simple") {
            thisInterest = jcloanamount * jinterestRatePerPeriod//((jpaymentPerperiod * jtotalloantermtimes) - jcloanamount) / jtotalloantermtimes;
            thisPrincipal = jcloanamount / jtotalloantermtimes;
            thisEndingBalance = saBeginningBalance - thisPrincipal;
        } else {
            thisInterest = saBeginningBalance * jinterestRatePerPeriod;
            thisPrincipal = jpaymentPerperiod - thisInterest;
            thisEndingBalance = saBeginningBalance - thisPrincipal;
            //thisEndingBalance = saBeginningBalance - thisPrincipal;
            
        }

        if(remainingTerm > 0.0001){
            
        } else {
            if (parseInt(i) === (parseInt(intTerm) - 1) && parseFloat(thisEndingBalance) !== 0.00) {
                if (parseFloat(saBeginningBalance) < parseFloat(thisPrincipal)) {
                    thisPrincipal = saBeginningBalance;
                    if (parseFloat(thisEndingBalance) < 0) {
                        thisInterest = thisInterest + (-1 * thisEndingBalance);
                    } else {
                        thisInterest = thisInterest + thisEndingBalance;
                    }
                } else {
                    thisInterest = thisInterest + thisEndingBalance;
                }
                thisEndingBalance = 0.00;
            }
        }


        if ((i % 2) == 1) {
            outputStrBuilder.push("<tr id='lines_" + (i + 1) + "' align=right><td>" + (i + 1));
        } else {
            outputStrBuilder.push("<tr id='lines_" + (i + 1) + "' align=right bgcolor='#dddddd'><td>" + (i + 1));
        }
        if (jcpayback == "halfyear") {
            var thisYear = Math.floor((i + 2) / 2);
            outputStrBuilder.push(". Year #" + thisYear);
        }
        outputStrBuilder.push("</td><td id='lines" + (i + 1) + "_pDate'>" + pday + "-" + monthMon + "-" + pyear);
        outputStrBuilder.push("</td><td id='lines" + (i + 1) + "_begBal'>" + formatAsMoney(saBeginningBalance));
        outputStrBuilder.push("</td><td id='lines" + (i + 1) + "_intrst'>" + formatAsMoney(thisInterest));
        outputStrBuilder.push("</td><td id='lines" + (i + 1) + "_prncpl'>" + formatAsMoney(thisPrincipal));
        outputStrBuilder.push("</td><td id='lines" + (i + 1) + "_endnBal'>" + formatAsMoney(thisEndingBalance) + "</td></tr>");
        saBeginningBalance = thisEndingBalance;
        if (i > 0) {
            if (jcpayback == "halfmonth") {
                if (((i + 1) % 24) == 0) {
                    var thisYear = Math.floor((i + 1) / 24);
                    outputStrBuilder.push("<tr id='headers_" + (i + 1) + "' align=center bgcolor='#E0F0FE'><td colspan='5'><b>Year #" + thisYear + " End</b></td></tr>");
                }
            } else if (jcpayback == "month") {
                if (((i + 1) % 12) == 0) {
                    var thisYear = Math.floor((i + 1) / 12);
                    outputStrBuilder.push("<tr id='headers_" + (i + 1) + "' align=center bgcolor='#E0F0FE'><td colspan='6'><b>Year #" + thisYear + " End</b></td></tr>");
                }
            } else if (jcpayback == "quarter") {
                if (((i + 1) % 4) == 0) {
                    var thisYear = Math.floor((i + 1) / 4);
                    outputStrBuilder.push("<tr id='headers_" + (i + 1) + "' align=center bgcolor='#E0F0FE'><td colspan='6'><b>Year #" + thisYear + " End</b></td></tr>");
                }
            }
        }

        /* CALCULATION OF REPAY DATE*/
        if (repayFrqncy == "daily") {
            currentDate.setDate(pday + 1);
            pday = currentDate.getDate();
            pmonth = currentDate.getMonth() + 1;
            pyear = currentDate.getFullYear();
        } else if (repayFrqncy == "weekly") {
            currentDate.setDate(pday + 7);
            pday = currentDate.getDate();
            pmonth = currentDate.getMonth() + 1;
            pyear = currentDate.getFullYear();
        } else if (repayFrqncy == "biweekly") {
            currentDate.setDate(pday + 14);
            pday = currentDate.getDate();
            pmonth = currentDate.getMonth() + 1;
            pyear = currentDate.getFullYear();
        } else if (repayFrqncy == "halfmonth") {
            currentDate.setDate(pday + 15);
            pday = currentDate.getDate();
            pmonth = currentDate.getMonth() + 1;
            pyear = currentDate.getFullYear();
        } else if (repayFrqncy == "month") {
            currentDate.setMonth(currentDate.getMonth() + 1);
            pday = currentDate.getDate();
            pmonth = currentDate.getMonth() + 1;
            pyear = currentDate.getFullYear();
        } else if (repayFrqncy == "quarter") {
            currentDate.setMonth(currentDate.getMonth() + 3);
            pday = currentDate.getDate();
            pmonth = currentDate.getMonth() + 1;
            pyear = currentDate.getFullYear();
        } else if (repayFrqncy == "halfyear") {
            currentDate.setMonth(currentDate.getMonth() + 6);
            pday = currentDate.getDate();
            pmonth = currentDate.getMonth() + 1;
            pyear = currentDate.getFullYear();
        } else if (repayFrqncy == "year") {
            currentDate.setFullYear(pyear + 1);
            pday = currentDate.getDate();
            pmonth = currentDate.getMonth() + 1;
            pyear = currentDate.getFullYear();
        }
        
        monthMonDsp = getMonthMon(pmonth);
        if(pday < 10){
            pdayDsp = '0'+pday;
          } else {
            pdayDsp =pday;
          }
        dateDsply = excludeHolidaysFromDate(pdayDsp+'-'+monthMonDsp+'-'+pyear);
        currentDate = new Date(dateDsply);
        
        
        
    }
    if (remainingTerm > 0.0001) {
        var thisInterest;
        if (intRateType !== "Flat Rate") {
            thisInterest = saBeginningBalance * jinterestRatePerPeriod;
        }
        
//var thisInterest = saBeginningBalance * jinterestRatePerPeriod;
        outputStrBuilder.push("<tr id='lines_" + (intTerm + 1) + "' align=right bgcolor='#E0F0FE'><td>" + (intTerm + 1));
        //outputStrBuilder.push(" (Partial)</td><td id='lines" + (intTerm + 1) + "_pDate'>" + pday + "-" + monthMon + "-" + pyear +
        outputStrBuilder.push(" (Partial)</td><td id='lines" + (intTerm + 1) + "_pDate'>" + dateDsply +        
                "</td><td id='lines" + (intTerm + 1) + "_begBal'>" + formatAsMoney(saBeginningBalance) +
                "</td><td id='lines" + (intTerm + 1) + "_intrst'>" + formatAsMoney(thisInterest) +
                "</td><td id='lines" + (intTerm + 1) + "_prncpl'>" + formatAsMoney(saBeginningBalance) +
                "</td><td id='lines" + (intTerm + 1) + "_endnBal'>" + formatAsMoney(0) + "</td></tr>");
    }
    outputStrBuilder.push("</table>");
    var outPutString = outputStrBuilder.join("");
    var saveScheduleBtn = "<button type='button' title='Save Loan Schedule' class='btn btn-default btn-sm' onclick='saveLoanSchedule(15, 4.2," + disbmntDetId + ");' style='padding:2px !important;'>" +
            "<img src='cmn_images/FloppyDisk.png' style='height:20px; width:auto; position: relative; vertical-align: middle;'>SAVE SCHEDULE</button>";
    if (disbmntDetId <= 0) {
        saveScheduleBtn = "";
    }
//alert("Hi");
//$('#' + jdivid).html("<br><h3>Periodic Payment: "+ formatAsMoney(jpaymentPerperiod) +"</h3><div style=\"text-align:right;margin-top:-10px;\"><a href=\"#\" onClick=\"gObj('" + jdivid + "').innerHTML='';return false;\"><img src=\"cmn_images/lovButton.png\" width=\"18\" height=\"18\" border=\"0\"></a></div>" + outPutString);
    $('#' + jdivid).html("<br><div style='margin-bottom:10px !important;'>\n\
        <table style='width:100% !important;'><tr><td><span style='font-size:25px !important;margin-right:70px !important;'>Periodic Payment: " + formatAsMoney(jpaymentPerperiod) +
            "</span></td><td><span style='font-size:20px !important;margin-right:30px !important; text-align:right;'>Start Date: " + jrepayStartDate +
            "</span></td><td><span style='font-size:20px !important; text-align:rignt;'>End Date: <span id='schdlEndDte'>" + dateDsply /*jrepayEndDate*/ +
            "</span></span></td><td style='text-align: right;"+isSchdlSvdBtnDsply+"'>" + saveScheduleBtn +
            "</td></tr>\n\
        </table></div>" + outPutString);
    $('#myFormsModalTitleLgz').html("Amortization Schedule");
    $('#myFormsModalLgz').modal('show');
    
    $('#myFormsModalLgz').off('hidden.bs.modal');
    $('#myFormsModalLgz').one('hidden.bs.modal', function (e) {
        if(disbmntHdrID > 0){
            getDisbursementForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Disbursement', 15, 4.2, 0, 'EDIT', disbmntHdrID, 'indCustTable', 'indCustTableRow1');
        }
        $('#myFormsModalTitleLgz').html('');
        $('#myFormsModalBodyLgz').html('');
        //$(e.currentTarget).unbind();
    });    

    return false;
}

function showSch(jcloanamount, jinterestRatePerPeriod, jtotalloantermtimes, jcpayback, jdivid) {
    jinterestRatePerPeriod = jinterestRatePerPeriod - 1;
    var outputStrBuilder = [];
    outputStrBuilder.push("<table border=0 cellpadding=3 width='100%'>");
    outputStrBuilder.push("<tr align=right bgcolor='#E0F0FE'><td>&nbsp;</td><td><b>Beginning Balance</b></td><td><b>Interest</b></td><td><b>Ending Balance</b></td></tr>");
    var saBeginningBalance = jcloanamount;
    var intTerm = Math.floor(jtotalloantermtimes);
    var remainingTerm = jtotalloantermtimes - intTerm;
    if (remainingTerm > 0.9999) {
        intTerm = intTerm + 1;
        remainingTerm = 0;
    }
    for (i = 0; i < intTerm; i++) {
        var thisInterest = saBeginningBalance * jinterestRatePerPeriod;
        var thisEndingBalance = saBeginningBalance + thisInterest;
        if ((i % 2) == 1) {
            outputStrBuilder.push("<tr align=right><td>" + (i + 1));
        } else {
            outputStrBuilder.push("<tr align=right bgcolor='#dddddd'><td>" + (i + 1));
        }
        outputStrBuilder.push("</td><td>" + formatAsMoney(saBeginningBalance));
        outputStrBuilder.push("</td><td>" + formatAsMoney(thisInterest));
        outputStrBuilder.push("</td><td>" + formatAsMoney(thisEndingBalance) + "</td></tr>");
        saBeginningBalance = thisEndingBalance;
        if (i > 0) {
            if (jcpayback == "month") {
                if (((i + 1) % 12) == 0) {
                    var thisYear = Math.floor((i + 1) / 12);
                    outputStrBuilder.push("<tr align=center bgcolor='#E0F0FE'><td colspan='5'><b>Year #" + thisYear + " End</b></td></tr>");
                }
            }
        }
    }
    if (remainingTerm > 0.0001) {
        var thisInterest = Math.pow((jinterestRatePerPeriod + 1), remainingTerm) * saBeginningBalance - saBeginningBalance;
        outputStrBuilder.push("<tr align=right bgcolor='#E0F0FE'><td>" + (intTerm + 1));
        outputStrBuilder.push(" (Partial)</td><td>" + formatAsMoney(saBeginningBalance) + "</td><td>" + formatAsMoney(thisInterest) + "</td><td>" + formatAsMoney(thisInterest + saBeginningBalance) + "</td></tr>");
    }
    outputStrBuilder.push("</table>");
    h2value = "";
    menuvalue = "";
    if (jcpayback == 'year') {
        h2value = "Annual Schedule";
        jinterestRatePerPeriod = Math.pow((jinterestRatePerPeriod + 1), 1 / 12);
        menuvalue = "<div id='topmenu'><ul><li id='menuon'><a href='#' onclick='return false;'>Annual Schedule</a></li> <li><a href='#' onclick=\"return showSch(" + jcloanamount + ", " + jinterestRatePerPeriod + ", " + (jtotalloantermtimes * 12) + ", 'month', '" + jdivid + "');\">Monthly Schedule</a></li></ul></div>";
    } else {
        h2value = "Monthly Schedule";
        jinterestRatePerPeriod = Math.pow((1 + jinterestRatePerPeriod), 12);
        menuvalue = "<div id='topmenu'><ul><li><a href='#' onclick=\"return showSch(" + jcloanamount + ", " + jinterestRatePerPeriod + ", " + (jtotalloantermtimes / 12) + ", 'year', '" + jdivid + "');\">Annual Schedule</a></li> <li id='menuon'><a href='#' onclick='return false;'>Monthly Schedule</a></li></ul></div>";
    }
    var outPutString = outputStrBuilder.join("");
    gObj(jdivid).innerHTML = "<br><h2>" + h2value + "</h2><div style=\"text-align:right;margin-top:-10px;\"><a href=\"#\" onClick=\"gObj('" + jdivid + "').innerHTML='';return false;\"><img src=\"cmn_images/lovButton.png\" width=\"18\" height=\"18\" border=\"0\"></a></div>" + menuvalue + outPutString;
    return false;
}

function excludeHolidaysFromDate(curDte){
    var currentDate = new Date(curDte);
    var pday = "";
    var pmonth = "";
    var pyear = "";

    //alert("trnsNtAllwdDts1.length ="+trnsNtAllwdDts.length);
//    
//      for(var j=0; j<trnsNtAllwdDts.length; j++){
//          alert("alert(trnsNtAllwdDys[j])");
//
//          alert(trnsNtAllwdDts[j]);
//
//      }    
//      
//      return false;    
    
    //var trnsNtAllwdDts = ['03-NOV-2017','02-NOV-2017','04-NOV-2017','06-NOV-2017','09-NOV-2017'];
    //var trnsNtAllwdDys = ['MONDAY','SUNDAY','TUESDAY','WEDNESDAY','FRIDAY','SATURDAY'];
    var pMnthDsp = "";
    var pdayDsp ="";
    
    var nextDteDsp = "";
    var i=0;
    var j=1;
    var k=1;
    var cnt=0;
    var nextDteDay = "";
    var nextDteDayDsp = "";
    var x = 0;
    
    do{
       pday = currentDate.getDate();
       pmonth = currentDate.getMonth() + 1;
       pyear = currentDate.getFullYear(); 
       
       pMnthDsp = getMonthMon(pmonth);
       
        if(pday < 10){
            pdayDsp = '0'+pday;
        }
    
        nextDteDsp = pdayDsp+'-'+pMnthDsp+'-' + pyear;  
        //alert(nextDteDsp);

	while(j>0){
          if(trnsNtAllwdDts.indexOf(nextDteDsp.toUpperCase()) > -1){
              currentDate.setDate(pday + 1);

               //alert("J Date Chnge ="+currentDate.getDate());

              pday = currentDate.getDate(); 
              pmonth = currentDate.getMonth() + 1;
              pyear = currentDate.getFullYear(); 

              pMnthDsp = getMonthMon(pmonth);
              if(pday < 10){
                pdayDsp = '0'+pday;
              } else {
              	pdayDsp =pday;
              }
              
              nextDteDsp = pdayDsp+'-'+pMnthDsp+'-' + pyear;
              //alert(nextDteDsp);
              j=1;
              i=1;
          } else {
            j=0;
            x=0;
            k=1;
          }
        }
        
	var cnt = 0;
        while(k>0){
        cnt = cnt +1;
          nextDteDay = currentDate.getDay();
          //alert(nextDteDay);
          nextDteDayDsp = getDayDsp(nextDteDay);
          //alert(nextDteDayDsp);
          
          if(trnsNtAllwdDys.indexOf(nextDteDayDsp.toUpperCase()) > -1){
            currentDate.setDate(pday + 1);
            
            //alert("K Day change="+currentDate.getDate());
              k=0;
              i=1;
              x=1;
          } else {
            if(trnsNtAllwdDys.length <= 0 || cnt == trnsNtAllwdDys.length){
            	k=0;
              x=0;
            } else {
          	  k=1;
            }
          }
        }        
        
        if((x) == 0){
        	i = 0;
        } else {
        	j=1;
        }
        
    } while(i>0)
    
    
    pday = currentDate.getDate();
    pmonth = currentDate.getMonth() + 1;
    pyear = currentDate.getFullYear();
    
    pMnthDsp = getMonthMon(pmonth);
    if(pday < 10){
      pdayDsp = '0'+pday;
    } else {
    	pdayDsp =pday;
    }    
    
    nextDteDsply = pdayDsp+'-'+pMnthDsp+'-' + pyear;  
    return nextDteDsply;
}

function formatAsMoney(num) {
    num = num.toString().replace(/\$|\,/g, '');
    if (isNaN(num))
        num = "0";
    sign = (num == (num = Math.abs(num)));
    num = Math.floor(num * 100 + 0.50000000001);
    cents = num % 100;
    num = Math.floor(num / 100).toString();
    if (cents < 10)
        cents = "0" + cents;
    for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++)
        num = num.substring(0, num.length - (4 * i + 3)) + ',' + num.substring(num.length - (4 * i + 3));
    //return (((sign) ? '' : '-') + 'GH₵' + num + '.' + cents);
    return (((sign) ? '' : '-') + num + '.' + cents);
}

function fmtAsNumberLcl(amntFrmt)
{
    return Number(amntFrmt.replace(/[^-?0-9\.]/g, ''));
}

/** LATEST FUNCTIONS **/
function deleteCustPerson(custPrsnID, custStatus, subPgNo)
{
    var custPrsn = "Customers";
    var title = "Edit Customer Profile";
    if (subPgNo == 1.1) {
        title = "EDIT CORPORATE CUSTOMER PROFILE";
    } else if (subPgNo == 1.2) {
        title = "EDIT CORPORATE CUSTOMER PROFILE";
    } else if (subPgNo == 1.3) {
        title = "EDIT CUSTOMER GROUP PROFILE";
    } else if (subPgNo == 1.4) {
        custPrsn = "Persons";
        title = "Edit Person Profile";
    }


    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this record?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                if (!(custStatus == "Incomplete" || custStatus == "Rejected" || custStatus == "Withdrawn")) {
                    mnBox.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Sorry! Only " + custPrsn + " with Status <b>Incomplete</b>, <b>Rejected</b> or <b>Withdrawn</b> can be deleted.",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        if (subPgNo == 1.1 && (!(data == "Failed to Delete Customer" || data == "SORRY! CUSTOMER DELETION FAILED"))) {
                            getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.1', 'mcfIndCstmr')
                        } else if (subPgNo == 1.2 && (!(data == "Failed to Delete Customer" || data == "SORRY! CUSTOMER DELETION FAILED"))) {
                            getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.2', 'mcfCorpCstmr');
                        } else if (subPgNo == 1.3 && (!(data == "Failed to Delete Customer" || data == "SORRY! CUSTOMER DELETION FAILED"))) {
                            getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.3', 'mcfGrpCstmr')
                        } else if (subPgNo == 1.4 && (!(data == "Failed to Delete Person" || data == "SORRY! PERSON DELETION FAILED"))) {
                            getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.4', 'mcfOthPCstmr')
                        }

                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=11&subPgNo=" + subPgNo + "&q=DELETE&actyp=2&PKeyID=" + custPrsnID + "&custStatus=" + custStatus);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function deleteNationalID(ntnltyID, custStatus, subPgNo, isApproved)
{
    var custPrsnID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
    var custPrsn = "Customers";
    var title = "Edit Customer Profile";
    if (subPgNo == 1.4) {
        custPrsn = "Persons";
        custPrsnID = typeof $("#personID").val() === 'undefined' ? -1 : $("#personID").val();
        title = "Edit Person Profile";
    }

    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this record?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                if (!(custStatus == "Incomplete" || custStatus == "Rejected" || custStatus == "Withdrawn")) {
                    mnBox.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Sorry! Only National IDs for " + custPrsn + " with Status <b>Incomplete</b>, <b>Rejected</b> or <b>Withdrawn</b> can be deleted.",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', title, 11, subPgNo, 0, 'EDIT', custPrsnID, 'EDIT', 'indCustTableRow1', -1, function () {

                        });
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=11&subPgNo=" + subPgNo + "&q=DELETE&actyp=1&PKeyID=" + ntnltyID + 
                        "&custStatus=" + custStatus + "&custPrsnID="+custPrsnID + "&rvsnTtl="+rvsnTtl+"&isApproved="+isApproved);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}


function wthdrwRjctAutrzCustDataRqst(wthdrwRjct, pgNo, subPgNo, vtyp)
{
    var box;
    var box2;
    var p_actyp = 1;
    var svOrsbmt = "Withdrawing.";
    var prmtMsg = "Are you sure you want to " + wthdrwRjct + " this Change Request?"

    if (wthdrwRjct == "REJECT") {
        svOrsbmt = "Rejecting.";
        p_actyp = 2;
    } else if (wthdrwRjct == "AUTHORIZE") {
        svOrsbmt = "Authorizing.";
        p_actyp = 3;
    }

    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var custID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">' + svOrsbmt + '. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('custID', custID);
                    formData.append('actyp', p_actyp);
                    formData.append('rvsnTtl', rvsnTtl);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                if (wthdrwRjct == "REJECT") {
                                    msg = "Change Request Successfully REJECTED!";
                                } else if (wthdrwRjct == "AUTHORIZE") {
                                    msg = "Change Request Successfully AUTHORIZED!";
                                } else {
                                    msg = "Change Request successfully WITHDRAWN";
                                }

                                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Customer Profile', 11, subPgNo, 0, 'EDIT', custID, '', 'indCustTableRow1', -1, function () {
                                    box.modal('hide');
                                    bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: msg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });
                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function modifyAutrzCustDataRqst(pgNo, subPgNo, vtyp)
{
    var box;
    var prmtMsg = "Are you sure you want MODIFY this AUTHORIZED DATA?";
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var custID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">Preparing Data. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('custID', custID);
                    formData.append('actyp', 4);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Customer Profile', 11, subPgNo, 0, 'EDIT', custID, '', 'indCustTableRow1', -1, function () {
                                    box.modal('hide');
                                });
                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function dsplyAuthrzdData(data) {

    bootbox.alert({
        size: "small",
        title: "Authorized Data",
        message: "<span style='color:red; font-weight:bold !important;text-align:centre;'>" + data + "</span>",
        callback: function () { /* your callback code */
        }
    });
    return false;
}


function getRiskFactorForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, subVwtyp, vtyp, vtypActn, pKeyID, listTableID, rowID, callBackFunc)
{
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }
//alert('Hello');
    if (!$.fn.DataTable.isDataTable('#' + listTableID)) {
        var table1 = $('#' + listTableID).DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#' + listTableID + ' tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table1.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
        $('#' + listTableID + ' tbody').on('mouseenter', 'tr', function () {
            if ($(this).hasClass('highlight')) {
                $(this).removeClass('highlight');
            } else {
                table1.$('tr.highlight').removeClass('highlight');
                $(this).addClass('highlight');
            }
        });
    }

//var p_statusTitle = "Incomplete";

    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
            $('#' + modalBodyID).html(xmlhttp.responseText);
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=2', 'riskFactors');
                $('#' + modalBodyID).html('');
                $('#' + titleElementID).html('');
                $(e.currentTarget).unbind();
            });
            $('#' + titleElementID).html(formTitle);
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            //$body.removeClass("mdlloading");

            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + elementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/

                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&subVwtyp=" + subVwtyp + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + pKeyID);
}

function deleteRiskFactor(riskFactorID)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Risk Factor?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        if (data == "SORRY") {
                            $msg = "SORRY! Can't Delete an Risk Factor that is in active Use.";
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: $msg,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        } else {

                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                            getCustData('', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=2', 'riskFactors');
                        }
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.6&subVwtyp=2&q=DELETE&PKeyID=" + riskFactorID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function saveRiskFactor(pgNo, subPgNo, subVwtyp, vtyp)
{

    var box;
    var box2;
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var riskFactorId = typeof $("#riskFactorId").val() === 'undefined' ? -1 : $("#riskFactorId").val();
        var riskFactorCode = typeof $("#riskFactorCode").val() === 'undefined' ? '' : $("#riskFactorCode").val();
        var riskFactorDesc = typeof $("#riskFactorDesc").val() === 'undefined' ? '' : $("#riskFactorDesc").val();
        var isEnabled = typeof $("#isEnabled").val() === 'undefined' ? 'No' : $("#isEnabled").val();
        if (riskFactorCode.trim() == "" || riskFactorCode == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide Risk Factor",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }

        $body.removeClass("mdlloading");
        $body.removeClass("mdlloadingDiag");
        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('subVwtyp', subVwtyp);
        formData.append('vtyp', vtyp);
        formData.append('riskFactorId', riskFactorId);
        formData.append('riskFactorCode', riskFactorCode);
        formData.append('riskFactorDesc', riskFactorDesc);
        formData.append('isEnabled', isEnabled);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                //$body.removeClass("mdlloadingDiag");
                //$body.removeClass("mdlloading");

                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    $("#riskFactorId").val(obj.riskFactorId);
                    box.modal('hide');
                    getRiskFactorForm('myFormsModalx', 'myFormsModalxBody', 'myFormsModalxTitle', 'Edit Risk Factor', 15, subPgNo, subVwtyp, 0, 'EDIT', obj.riskFactorId, 'indCustTable', 'indCustTableRow1', function () {

                        msg = "Risk Factor Successfully Saved!";
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                            }
                        });
                    });
                } else {

                    msg = data;
                    box.modal('hide');
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

//RISK PROFILES
function deleteRiskProfile(riskProfileID)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        title: 'Delete Risk Profile?',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">DELETE</span> this Risk Profile?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        if (data == "SORRY") {
                            $msg = "SORRY! Can't Delete an Risk Profile that is in active Use.";
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: $msg,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        } else {

                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                            getAllRiskProfiles('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3");
                        }
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.6&subVwtyp=3&q=DELETE&PKeyID=" + riskProfileID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function saveRiskProfile(pgNo, subPgNo, subVwtyp, vtyp)
{

    var box;
    var box2;
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var riskProfileId = typeof $("#oneRiskProfileDetID").val() === 'undefined' ? '-1' : $("#oneRiskProfileDetID").val();
        var profileName = typeof $("#oneRiskProfileDetName").val() === 'undefined' ? '' : $("#oneRiskProfileDetName").val();
        var profileDesc = typeof $("#oneRiskProfileDetDesc").val() === 'undefined' ? '' : $("#oneRiskProfileDetDesc").val();
        var isEnabled = typeof $("#oneRiskProfileDetIsEnbld").val() === 'undefined' ? 'Yes' : $("#oneRiskProfileDetIsEnbld").val();
        var ttlScore = typeof $("#oneRiskProfileDetTtlScore").val() === 'undefined' ? 0 : $("#oneRiskProfileDetTtlScore").val().trim().length === 0 ? 0 : $("#oneRiskProfileDetTtlScore").val();
        if (profileName.trim() == "" || profileName == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide Risk Profile Name",
                callback: function () { /* your callback code */
                }
            });
            return false;
        } else if (ttlScore == "" || parseFloat(ttlScore) < 0 || ttlScore == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Total Profile Score must be zero or greater",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }

        $body.removeClass("mdlloading");
        $body.removeClass("mdlloadingDiag");
        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', 15);
        formData.append('subPgNo', subPgNo);
        formData.append('subVwtyp', subVwtyp);
        formData.append('vtyp', vtyp);
        formData.append('riskProfileId', riskProfileId);
        formData.append('profileName', profileName);
        formData.append('profileDesc', profileDesc);
        formData.append('isEnabled', isEnabled);
        formData.append('ttlScore', ttlScore);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                //$body.removeClass("mdlloadingDiag");
                //$body.removeClass("mdlloading");

                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    box.modal('hide');
                    getAllRiskProfiles('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3");
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Risk Profile Saved Successfully",
                        callback: function () { /* your callback code */
                        }
                    });
                } else {

                    msg = data;
                    box.modal('hide');
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function getOneRiskProfileDetail(pKeyID, vwtype)
{
//alert('Hi');
    var lnkArgs = 'grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3.1&vtyp=0&sbmtdRiskProfileID=' + pKeyID;
    doAjaxWthCallBck(lnkArgs, 'allRiskProfilesDetailInfo', 'PasteDirect', '', '', '', function () {
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();
            var table2 = $('#allRiskProfileFctrsTable').DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "bFilter": false,
                "scrollX": false
            });
            $('#allRiskProfileFctrsTable').wrap('<div class="dataTables_scroll"/>');
        });
    });
}

function getAllRiskProfiles(actionText, slctr, linkArgs)
{
    var srchFor = typeof $("#allRiskProfilesSrchFor").val() === 'undefined' ? '%' : $("#allRiskProfilesSrchFor").val();
    var srchIn = typeof $("#allRiskProfilesSrchIn").val() === 'undefined' ? 'Both' : $("#allRiskProfilesSrchIn").val();
    var pageNo = typeof $("#allRiskProfilesPageNo").val() === 'undefined' ? 1 : $("#allRiskProfilesPageNo").val();
    var limitSze = typeof $("#allRiskProfilesDsplySze").val() === 'undefined' ? 10 : $("#allRiskProfilesDsplySze").val();
    var sortBy = typeof $("#allRiskProfilesSortBy").val() === 'undefined' ? '' : $("#allRiskProfilesSortBy").val();
    var isEnabled = typeof $("#allRiskProfilesIsEnabled").val() === 'undefined' ? '' : $("#allRiskProfilesIsEnabled").val();
    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy + "&isEnabled=" + isEnabled
    openATab(slctr, linkArgs);
}

function enterKeyFuncAllRiskProfiles(e, actionText, slctr, linkArgs)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAllRiskProfiles(actionText, slctr, linkArgs);
    }
}

function getAllRiskProfileFctrs(actionText, slctr, linkArgs)
{
    var srchFor = typeof $("#allRiskProfileFctrsSrchFor").val() === 'undefined' ? '%' : $("#allRiskProfileFctrsSrchFor").val();
    var srchIn = typeof $("#allRiskProfileFctrsSrchIn").val() === 'undefined' ? 'Both' : $("#allRiskProfileFctrsSrchIn").val();
    var pageNo = typeof $("#allRiskProfileFctrsPageNo").val() === 'undefined' ? 1 : $("#allRiskProfileFctrsPageNo").val();
    var limitSze = typeof $("#allRiskProfileFctrsDsplySze").val() === 'undefined' ? 10 : $("#allRiskProfileFctrsDsplySze").val();
    var sortBy = typeof $("#allRiskProfileFctrsSortBy").val() === 'undefined' ? '' : $("#allRiskProfileFctrsSortBy").val();
    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy;
    openATab(slctr, linkArgs);
}

function enterKeyFuncAllRiskProfileFctrs(e, actionText, slctr, linkArgs)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAllRiskProfileFctrs(actionText, slctr, linkArgs);
    }
}

function getOneRiskProfileForm(pKeyID, vwtype)
{
    var lnkArgs = 'grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3.1&vtyp=' + vwtype + '&sbmtdRiskProfileID=' + pKeyID;
    doAjaxWthCallBck(lnkArgs, 'allRiskProfilesDetailInfo', 'PasteDirect', '', '', '', function () {
        var table1 = $('#allRiskProfileFctrsTable').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#allRiskProfileFctrsTable').wrap('<div class="dataTables_scroll"/>');
    });
    $('#allRiskProfilesForm').submit(function (e) {
        e.preventDefault();
        return false;
    });
}

//PROFILE FACTORS
function saveRiskProfileFctr()
{
//alert("Hi");
    var sbmtdRiskProfileID = typeof $("#sbmtdRiskProfileID").val() === 'undefined' ? '-1' : $("#sbmtdRiskProfileID").val();
    var slctdRiskProfileFctrs = "";
    var errCount = 0;
    var rcdCount = 0;
    var pScoreTtl = typeof $("#oneRiskProfileDetTtlScore").val() === 'undefined' ? 0 : $("#oneRiskProfileDetTtlScore").val().trim().length === 0 ? 0 : $("#oneRiskProfileDetTtlScore").val();
    var rngPrflFctrScoreTtl = 0;
    $('#allRiskProfileFctrsTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorID').val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {
                    if ($('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorID').val() == "" || $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorID').val() == -1) {
                        $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorNm').css('border-color', 'red');
                        $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorNm').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorNm').css('border-color', '#ccc');
                        $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorNm').css('border-width', '1px');
                    }
                    if ($('#allRiskProfileFctrsRow' + rndmNum + '_Score').val() == "" || parseFloat($('#allRiskProfileFctrsRow' + rndmNum + '_Score').val()) < 0) {
                        $('#allRiskProfileFctrsRow' + rndmNum + '_Score').css('border-color', 'red');
                        $('#allRiskProfileFctrsRow' + rndmNum + '_Score').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allRiskProfileFctrsRow' + rndmNum + '_Score').css('border-color', '#ccc');
                        $('#allRiskProfileFctrsRow' + rndmNum + '_Score').css('border-width', '1px');
                    }
                    if ($('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').val() == "" || parseFloat($('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').val()) < 0) {
                        $('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').css('border-color', 'red');
                        $('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').css('border-color', '#ccc');
                        $('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').css('border-width', '1px');
                    }
                    if (errCount <= 0) {
                        slctdRiskProfileFctrs = slctdRiskProfileFctrs
                                + $('#allRiskProfileFctrsRow' + rndmNum + '_RiskProfileFactorID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allRiskProfileFctrsRow' + rndmNum + '_Score').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                        rngPrflFctrScoreTtl = rngPrflFctrScoreTtl + parseFloat($('#allRiskProfileFctrsRow' + rndmNum + '_Score').val());
                        rcdCount = rcdCount + 1;
                    }

                }
            }
        }
    });
    if (errCount > 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please enter data in all highlighted Risk Profile Factor record</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount <= 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please provide at lease One Risk Profile Factor record</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount > 0 && (parseFloat(rngPrflFctrScoreTtl) > parseFloat(pScoreTtl))) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Total PROFILE SCORE " + pScoreTtl + " must be EQUAL to the sum of the PROFILE FACTOR SCORES " + rngPrflFctrScoreTtl + "</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    var dialog = bootbox.alert({
        title: 'Save Risk Profile Factors?',
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> Saving Profile Factors...Please Wait...</p>',
        callback: function () {
            getAllRiskProfiles('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3");
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 15,
                    q: 'UPDATE',
                    subPgNo: 4.6,
                    subVwtyp: 3,
                    actyp: 1,
                    sbmtdRiskProfileID: sbmtdRiskProfileID,
                    slctdRiskProfileFctrs: slctdRiskProfileFctrs
                },
                success: function (result) {
                    setTimeout(function () {
                        dialog.find('.bootbox-body').html(result);
                    }, 500);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function validateRiskProfileFctr()
{
//alert("Hi");
    var dsplyMsg = "";
    var sbmtdRiskProfileID = typeof $("#sbmtdRiskProfileID").val() === 'undefined' ? '-1' : $("#sbmtdRiskProfileID").val();
    var slctdRiskProfileFctrs = "";
    var errCount = 0;
    var rcdCount = 0;
    var lineCnta = 1;
    var ttlUnmtchdRows = 0;
    var pScoreTtl = typeof $("#oneRiskProfileDetTtlScore").val() === 'undefined' ? 0 : $("#oneRiskProfileDetTtlScore").val().trim().length === 0 ? 0 : $("#oneRiskProfileDetTtlScore").val();
    var oneRiskProfileDetValidity = typeof $("#oneRiskProfileDetValidity").text() === 'undefined' ? 'Invalid' : $("#oneRiskProfileDetValidity").text();
    var rngPrflFctrScoreTtl = 0;
    var riskProfileId = typeof $("#oneRiskProfileDetID").val() === 'undefined' ? '-1' : $("#oneRiskProfileDetID").val();
    var profileName = typeof $("#oneRiskProfileDetName").val() === 'undefined' ? '' : $("#oneRiskProfileDetName").val();
    var profileDesc = typeof $("#oneRiskProfileDetDesc").val() === 'undefined' ? '' : $("#oneRiskProfileDetDesc").val();
    var isEnabled = typeof $("#oneRiskProfileDetIsEnbld").val() === 'undefined' ? 'Yes' : $("#oneRiskProfileDetIsEnbld").val();
    var ttlScore = typeof $("#oneRiskProfileDetTtlScore").val() === 'undefined' ? 0 : $("#oneRiskProfileDetTtlScore").val().trim().length === 0 ? 0 : $("#oneRiskProfileDetTtlScore").val();
    $('#allRiskProfileFctrsTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorID').val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {

                    if ($('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorID').val() == "" || $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorID').val() == -1) {
                        $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorNm').css('border-color', 'red');
                        $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorNm').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorNm').css('border-color', '#ccc');
                        $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorNm').css('border-width', '1px');
                    }
                    if ($('#allRiskProfileFctrsRow' + rndmNum + '_Score').val() == "" || parseFloat($('#allRiskProfileFctrsRow' + rndmNum + '_Score').val()) < 0) {
                        $('#allRiskProfileFctrsRow' + rndmNum + '_Score').css('border-color', 'red');
                        $('#allRiskProfileFctrsRow' + rndmNum + '_Score').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allRiskProfileFctrsRow' + rndmNum + '_Score').css('border-color', '#ccc');
                        $('#allRiskProfileFctrsRow' + rndmNum + '_Score').css('border-width', '1px');
                    }
                    if ($('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').val() == "" || parseFloat($('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').val()) < 0) {
                        $('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').css('border-color', 'red');
                        $('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').css('border-color', '#ccc');
                        $('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').css('border-width', '1px');
                    }

                    if (errCount <= 0) {
                        slctdRiskProfileFctrs = slctdRiskProfileFctrs
                                + $('#allRiskProfileFctrsRow' + rndmNum + '_RiskProfileFactorID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allRiskProfileFctrsRow' + rndmNum + '_Score').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allRiskProfileFctrsRow' + rndmNum + '_SortOrder').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allRiskProfileFctrsRow' + rndmNum + '_TtlOptnsScore').text().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorNm').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                        rngPrflFctrScoreTtl = rngPrflFctrScoreTtl + parseFloat($('#allRiskProfileFctrsRow' + rndmNum + '_Score').val());
                        rcdCount = rcdCount + 1;
                        //dsplyMsg
                        var riskFctrTtlScore = $('#allRiskProfileFctrsRow' + rndmNum + '_Score').val();
                        var riskFctrTtlOptnsScore = $('#allRiskProfileFctrsRow' + rndmNum + '_TtlOptnsScore').text();
                        if (parseFloat(riskFctrTtlScore) != parseFloat(riskFctrTtlOptnsScore)) {
                            ttlUnmtchdRows = ttlUnmtchdRows + 1;
                            dsplyMsg = dsplyMsg + "<tr><td><span style='color:red;'><b>Row " + lineCnta + " - " + $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorNm').val() + "</b></span></td><td style=\"text-align:center !important;\"><b>" + riskFctrTtlScore + "</b></td><td style=\"text-align:center !important;\"><b>" + riskFctrTtlOptnsScore + "</b></td></tr>";
                        }
                    }
                    lineCnta = lineCnta + 1;
                }
            }
        }
    });
    if (riskProfileId.trim() == "" || riskProfileId == -1 || riskProfileId == undefined) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please save Risk Profile First</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (profileName.trim() == "" || profileName == undefined) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please provide Risk Profile Name</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (ttlScore == "" || parseFloat(ttlScore) < 0 || ttlScore == undefined) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Total Profile Score must be zero or greater</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (errCount > 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please enter data in all highlighted Risk Profile Factor record</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount <= 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please provide at lease One Risk Profile Factor record</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount > 0 && oneRiskProfileDetValidity == "Valid") {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Risk Profile is already VALID</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount > 0 && oneRiskProfileDetValidity == "Invalid" && (parseFloat(rngPrflFctrScoreTtl) != parseFloat(pScoreTtl))) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Total PROFILE SCORE " + pScoreTtl + " must be EQUAL to the sum of the PROFILE FACTOR SCORES " + rngPrflFctrScoreTtl + "</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (ttlUnmtchdRows > 0) {
        box2 = bootbox.alert({
            size: "medium",
            title: "Rhomicom Message",
            message: "<span style=\"color:blue !important;\"><b>Please ensure that the following SCORES agree before proceeding:</b></span></br><table border=\"1\" style=\"border-collapse:none !important;\"><tr><th>RISK FACTOR</th><th>RISK FACTOR SCORE</th><th>OPTIONS MAX SCORE</th></tr>" + dsplyMsg + "</table>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    var dialog = bootbox.alert({
        title: 'Validate Risk Profile?',
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> Validating Risk Profile...Please Wait...</p>',
        callback: function () {
            getAllRiskProfiles('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3");
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 15,
                    q: 'UPDATE',
                    subPgNo: 4.6,
                    subVwtyp: 3,
                    actyp: 3,
                    sbmtdRiskProfileID: sbmtdRiskProfileID,
                    slctdRiskProfileFctrs: slctdRiskProfileFctrs,
                    riskProfileId: riskProfileId,
                    profileName: profileName,
                    profileDesc: profileDesc,
                    isEnabled: isEnabled,
                    ttlScore: ttlScore,
                    validity: oneRiskProfileDetValidity,
                    rngPrflFctrScoreTtl: rngPrflFctrScoreTtl
                },
                success: function (result) {
                    setTimeout(function () {
                        dialog.find('.bootbox-body').html(result);
                    }, 500);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function delRiskProfileFctr(rowIDAttrb)
{
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    var RiskFactorID = '';
    if (typeof $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#allRiskProfileFctrsRow' + rndmNum + '_RiskProfileFactorID').val();
        RiskFactorID = $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorID').val();
    }
    var dialog = bootbox.confirm({
        title: 'Remove Person?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">REMOVE</span> this Profile Factor?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Remove Person?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Removing Profile Factor...Please Wait...</p>',
                    callback: function () {
                        getAllRiskProfiles('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3");
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 15,
                                    q: 'DELETE',
                                    subPgNo: 4.6,
                                    subVwtyp: 3,
                                    actyp: 1,
                                    RiskFactorID: RiskFactorID,
                                    PKeyID: pKeyID
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                        if (result1.indexOf("Success") !== -1) {
                                            $("#" + rowIDAttrb).remove();
                                        }
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            $("#" + rowIDAttrb).remove();
                            dialog1.find('.bootbox-body').html('Row Removed Successfully!');
                        }, 500);
                    }
                });
            }
        }
    });
}

function getRiskProfileFctrOptnsForm(rowIDAttrb, vwtype)
{
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    var RiskFactorNm = '';
    var profileName = typeof $("#oneRiskProfileDetName").val() === 'undefined' ? '' : $("#oneRiskProfileDetName").val();
    if (typeof $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#allRiskProfileFctrsRow' + rndmNum + '_RiskProfileFactorID').val();
        RiskFactorNm = $('#allRiskProfileFctrsRow' + rndmNum + '_RiskFactorNm').val();
    }

    var lnkArgs = 'grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3.3&vtyp=' + vwtype + '&sbmtdRiskProfileFctrID=' + pKeyID;
    doAjaxWthCallBck(lnkArgs, 'myFormsModalNrml', 'ShowDialog', 'Options for PROFILE: ' + profileName + ' & RISK: ' + RiskFactorNm, 'myFormsModalNrmlTitle', 'myFormsModalNrmlBody', function () {
        var table1 = $('#allRiskProfileFctrOptnsTable').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#allRiskProfileFctrOptnsTable').wrap('<div class="dataTables_scroll"/>');
        $('#allOtherInputData99').val(0);
        $('#myFormsModalNrml').one('hidden.bs.modal', function (e) {
            getAllRiskProfiles('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3");
        });
    });
    $('#allRiskProfileFctrOptnsForm').submit(function (e) {
        e.preventDefault();
        return false;
    });
}

//PROFILE FACTOR OPTIONS
function saveRiskProfileFctrOptn()
{
//alert("Hi");
    var riskProfileID = typeof $("#oneRiskProfileDetID").val() === 'undefined' ? '-1' : $("#oneRiskProfileDetID").val();
    var sbmtdRiskProfileFctrID = typeof $("#sbmtdRiskProfileFctrID").val() === 'undefined' ? '-1' : $("#sbmtdRiskProfileFctrID").val();
    var slctdRiskProfileFctrOptns = "";
    var errCount = 0;
    var rcdCount = 0;
    //var rngPrflFctrScoreTtl = 0;
    $('#allRiskProfileFctrOptnsTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#allRiskProfileFctrOptnsRow' + rndmNum + '_RiskProfileFctrID').val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {
                    if ($('#allRiskProfileFctrOptnsRow' + rndmNum + '_OptnDesc').val().trim() == "" || $('#allRiskProfileFctrOptnsRow' + rndmNum + '_OptnDesc').val() == undefined) {
                        $('#allRiskProfileFctrOptnsRow' + rndmNum + '_OptnDesc').css('border-color', 'red');
                        $('#allRiskProfileFctrOptnsRow' + rndmNum + '_OptnDesc').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allRiskProfileFctrOptnsRow' + rndmNum + '_OptnDesc').css('border-color', '#ccc');
                        $('#allRiskProfileFctrOptnsRow' + rndmNum + '_OptnDesc').css('border-width', '1px');
                    }
                    if ($('#allRiskProfileFctrOptnsRow' + rndmNum + '_Score').val() == "" || parseFloat($('#allRiskProfileFctrOptnsRow' + rndmNum + '_Score').val()) < 0) {
                        $('#allRiskProfileFctrOptnsRow' + rndmNum + '_Score').css('border-color', 'red');
                        $('#allRiskProfileFctrOptnsRow' + rndmNum + '_Score').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allRiskProfileFctrOptnsRow' + rndmNum + '_Score').css('border-color', '#ccc');
                        $('#allRiskProfileFctrOptnsRow' + rndmNum + '_Score').css('border-width', '1px');
                    }
                    if ($('#allRiskProfileFctrOptnsRow' + rndmNum + '_SortOrder').val() == "" || parseFloat($('#allRiskProfileFctrOptnsRow' + rndmNum + '_SortOrder').val()) < 0) {
                        $('#allRiskProfileFctrOptnsRow' + rndmNum + '_SortOrder').css('border-color', 'red');
                        $('#allRiskProfileFctrOptnsRow' + rndmNum + '_SortOrder').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allRiskProfileFctrOptnsRow' + rndmNum + '_SortOrder').css('border-color', '#ccc');
                        $('#allRiskProfileFctrOptnsRow' + rndmNum + '_SortOrder').css('border-width', '1px');
                    }
                    if (errCount <= 0) {
                        slctdRiskProfileFctrOptns = slctdRiskProfileFctrOptns
                                + $('#allRiskProfileFctrOptnsRow' + rndmNum + '_RiskProfileFactorOptnID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allRiskProfileFctrOptnsRow' + rndmNum + '_OptnDesc').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allRiskProfileFctrOptnsRow' + rndmNum + '_Score').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allRiskProfileFctrOptnsRow' + rndmNum + '_SortOrder').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                        rcdCount = rcdCount + 1;
                    }

                }
            }
        }
    });
    if (errCount > 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please enter data in all highlighted Risk Factor Option records</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount <= 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please provide at lease One Risk Factor Option records</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    var dialog = bootbox.alert({
        title: 'Save Risk Factor Options?',
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> Saving Risk Factor Options...Please Wait...</p>',
        callback: function () {
            getAllRiskProfileFctrOptns('', "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3.3&sbmtdRiskProfileFctrID=" + sbmtdRiskProfileFctrID);
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 15,
                    q: 'UPDATE',
                    subPgNo: 4.6,
                    subVwtyp: 3,
                    actyp: 2,
                    sbmtdRiskProfileFctrID: sbmtdRiskProfileFctrID,
                    riskProfileID: riskProfileID,
                    slctdRiskProfileFctrOptns: slctdRiskProfileFctrOptns
                },
                success: function (result) {
                    setTimeout(function () {
                        dialog.find('.bootbox-body').html(result);
                    }, 500);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function delRiskProfileFctrOptn(rowIDAttrb)
{
    var riskProfileID = typeof $("#oneRiskProfileDetID").val() === 'undefined' ? '-1' : $("#oneRiskProfileDetID").val();
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    //var sbmtdRiskProfileFctrID = -1;
    if (typeof $('#allRiskProfileFctrOptnsRow' + rndmNum + '_RiskProfileFctrID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#allRiskProfileFctrOptnsRow' + rndmNum + '_RiskProfileFactorOptnID').val();
        //sbmtdRiskProfileFctrID = $('#sbmtdRiskProfileFctrID').val();
    }
    var dialog = bootbox.confirm({
        title: 'Remove Risk Factor Option?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">REMOVE</span> this Risk Factor Option?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Remove Risk Factor Option?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Removing Risk Factor Option...Please Wait...</p>',
                    callback: function () {
                        //$("#myFormsModalNrml").modal("hide");
                        //getAllRiskProfileFctrOptns('', "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3.3&sbmtdRiskProfileFctrID="+sbmtdRiskProfileFctrID);
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 15,
                                    q: 'DELETE',
                                    subPgNo: 4.6,
                                    subVwtyp: 3,
                                    actyp: 2,
                                    riskProfileID: riskProfileID,
                                    PKeyID: pKeyID
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                        if (result1.indexOf("Success") !== -1) {
                                            $("#" + rowIDAttrb).remove();
                                        }
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            $("#" + rowIDAttrb).remove();
                            dialog1.find('.bootbox-body').html('Row Removed Successfully!');
                        }, 500);
                    }
                });
            }
        }
    });
}

function enterKeyFuncAllRiskProfileFctrOptns(e, actionText, slctr, linkArgs)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAllRiskProfileFctrOptns(actionText, linkArgs);
    }
}

function getAllRiskProfileFctrOptns(actionText, linkArgs)
{
    var srchFor = typeof $("#allRiskProfileFctrOptnsSrchFor").val() === 'undefined' ? '%' : $("#allRiskProfileFctrOptnsSrchFor").val();
    var srchIn = typeof $("#allRiskProfileFctrOptnsSrchIn").val() === 'undefined' ? 'Both' : $("#allRiskProfileFctrOptnsSrchIn").val();
    var pageNo = typeof $("#allRiskProfileFctrOptnsPageNo").val() === 'undefined' ? 1 : $("#allRiskProfileFctrOptnsPageNo").val();
    var limitSze = typeof $("#allRiskProfileFctrOptnsDsplySze").val() === 'undefined' ? 10 : $("#allRiskProfileFctrOptnsDsplySze").val();
    var sortBy = typeof $("#allRiskProfileFctrOptnsSortBy").val() === 'undefined' ? '' : $("#allRiskProfileFctrOptnsSortBy").val();
    var RiskFactorNm = ""; //riskProfileID = typeof $("#oneRiskProfileDetID").val() === 'undefined' ? '-1' : $("#oneRiskProfileDetID").val();

    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy;
    //$("#myFormsModalNrml").modal("hide");
    //var lnkArgs = 'grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3.3&vtyp='+vwtype+'&sbmtdRiskProfileFctrID=' + pKeyID;
    doAjaxWthCallBck(linkArgs, 'myFormsModalNrml', 'ReloadDialog', 'Options for PROFILE RISK: ' + RiskFactorNm, 'myFormsModalNrmlTitle', 'myFormsModalNrmlBody', function () {
        var table1 = $('#allRiskProfileFctrOptnsTable').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#allRiskProfileFctrOptnsTable').wrap('<div class="dataTables_scroll"/>');
        $('#allOtherInputData99').val(0);
    });
    $('#allRiskProfileFctrOptnsForm').submit(function (e) {
        e.preventDefault();
        return false;
    });
    //openATab(slctr, linkArgs);


}


//ASSESSMENT SET
function deleteAssessmentSet(assessmentSetID)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        title: 'Delete Assessment Set?',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">DELETE</span> this Assessment Set?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        if (data == "SORRY") {
                            $msg = "SORRY! Can't Delete an Assessment Set that is in active Use.";
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: $msg,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        } else {

                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                            getAllAssessmentSets('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=4");
                        }
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.6&subVwtyp=4&q=DELETE&PKeyID=" + assessmentSetID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function saveAssessmentSet(pgNo, subPgNo, subVwtyp, vtyp)
{

    var box;
    var box2;
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var assessmentSetId = typeof $("#oneAssessmentSetDetID").val() === 'undefined' ? '-1' : $("#oneAssessmentSetDetID").val();
        var assessmentSetName = typeof $("#oneAssessmentSetDetName").val() === 'undefined' ? '' : $("#oneAssessmentSetDetName").val();
        var assessmentSetDesc = typeof $("#oneAssessmentSetDetDesc").val() === 'undefined' ? '' : $("#oneAssessmentSetDetDesc").val();
        var isEnabled = typeof $("#oneAssessmentSetDetIsEnbld").val() === 'undefined' ? 'Yes' : $("#oneAssessmentSetDetIsEnbld").val();
        var ttlScore = typeof $("#oneAssessmentSetDetTtlScore").val() === 'undefined' ? 0 : $("#oneAssessmentSetDetTtlScore").val().trim().length === 0 ? 0 : $("#oneAssessmentSetDetTtlScore").val();
        if (assessmentSetName.trim() == "" || assessmentSetName == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide Assessment Set Name",
                callback: function () { /* your callback code */
                }
            });
            return false;
        } else if (ttlScore == "" || parseFloat(ttlScore) < 0 || ttlScore == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Pass Score must be zero or greater",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }

        $body.removeClass("mdlloading");
        $body.removeClass("mdlloadingDiag");
        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', 15);
        formData.append('subPgNo', subPgNo);
        formData.append('subVwtyp', subVwtyp);
        formData.append('vtyp', vtyp);
        formData.append('assessmentSetId', assessmentSetId);
        formData.append('assessmentSetName', assessmentSetName);
        formData.append('assessmentSetDesc', assessmentSetDesc);
        formData.append('isEnabled', isEnabled);
        formData.append('ttlScore', ttlScore);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                //$body.removeClass("mdlloadingDiag");
                //$body.removeClass("mdlloading");

                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    box.modal('hide');
                    getAllAssessmentSets('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=4");
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Assessment Set Saved Successfully",
                        callback: function () { /* your callback code */
                        }
                    });
                } else {

                    msg = data;
                    box.modal('hide');
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function getOneAssessmentSetDetail(pKeyID, vwtype)
{
//alert('Hi');
    var lnkArgs = 'grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=4.1&vtyp=0&sbmtdAssessmentSetID=' + pKeyID;
    doAjaxWthCallBck(lnkArgs, 'allAssessmentSetsDetailInfo', 'PasteDirect', '', '', '', function () {
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();
            var table2 = $('#allAssessmentSetPrflsTable').DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "bFilter": false,
                "scrollX": false
            });
            $('#allAssessmentSetPrflsTable').wrap('<div class="dataTables_scroll"/>');
        });
    });
}

function getAllAssessmentSets(actionText, slctr, linkArgs)
{
    var srchFor = typeof $("#allAssessmentSetsSrchFor").val() === 'undefined' ? '%' : $("#allAssessmentSetsSrchFor").val();
    var srchIn = typeof $("#allAssessmentSetsSrchIn").val() === 'undefined' ? 'Both' : $("#allAssessmentSetsSrchIn").val();
    var pageNo = typeof $("#allAssessmentSetsPageNo").val() === 'undefined' ? 1 : $("#allAssessmentSetsPageNo").val();
    var limitSze = typeof $("#allAssessmentSetsDsplySze").val() === 'undefined' ? 10 : $("#allAssessmentSetsDsplySze").val();
    var sortBy = typeof $("#allAssessmentSetsSortBy").val() === 'undefined' ? '' : $("#allAssessmentSetsSortBy").val();
    var isEnabled = typeof $("#allAssessmentSetsIsEnabled").val() === 'undefined' ? '' : $("#allAssessmentSetsIsEnabled").val();
    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy + "&isEnabled=" + isEnabled
    openATab(slctr, linkArgs);
}

function enterKeyFuncAllAssessmentSets(e, actionText, slctr, linkArgs)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAllAssessmentSets(actionText, slctr, linkArgs);
    }
}

function getAllAssessmentSetPrfls(actionText, slctr, linkArgs)
{
    var srchFor = typeof $("#allAssessmentSetPrflsSrchFor").val() === 'undefined' ? '%' : $("#allAssessmentSetPrflsSrchFor").val();
    var srchIn = typeof $("#allAssessmentSetPrflsSrchIn").val() === 'undefined' ? 'Both' : $("#allAssessmentSetPrflsSrchIn").val();
    var pageNo = typeof $("#allAssessmentSetPrflsPageNo").val() === 'undefined' ? 1 : $("#allAssessmentSetPrflsPageNo").val();
    var limitSze = typeof $("#allAssessmentSetPrflsDsplySze").val() === 'undefined' ? 10 : $("#allAssessmentSetPrflsDsplySze").val();
    var sortBy = typeof $("#allAssessmentSetPrflsSortBy").val() === 'undefined' ? '' : $("#allAssessmentSetPrflsSortBy").val();
    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy;
    openATab(slctr, linkArgs);
}

function enterKeyFuncAllAssessmentSetPrfls(e, actionText, slctr, linkArgs)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAllAssessmentSetPrfls(actionText, slctr, linkArgs);
    }
}

function getOneAssessmentSetForm(pKeyID, vwtype)
{
    var lnkArgs = 'grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=4.1&vtyp=' + vwtype + '&sbmtdAssessmentSetID=' + pKeyID;
    doAjaxWthCallBck(lnkArgs, 'allAssessmentSetsDetailInfo', 'PasteDirect', '', '', '', function () {
        var table1 = $('#allAssessmentSetPrflsTable').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#allAssessmentSetPrflsTable').wrap('<div class="dataTables_scroll"/>');
    });
    $('#allAssessmentSetsForm').submit(function (e) {
        e.preventDefault();
        return false;
    });
}

//ASSESSMENT SET PROFILES
function saveAssessmentSetPrfl()
{
//alert("Hi");
    var sbmtdAssessmentSetID = typeof $("#sbmtdAssessmentSetID").val() === 'undefined' ? '-1' : $("#sbmtdAssessmentSetID").val();
    var slctdAssessmentSetPrfls = "";
    var errCount = 0;
    var rcdCount = 0;
    var pScoreTtl = typeof $("#oneAssessmentSetDetTtlScore").val() === 'undefined' ? 0 : $("#oneAssessmentSetDetTtlScore").val().trim().length === 0 ? 0 : $("#oneAssessmentSetDetTtlScore").val();
    var rngPrflFctrScoreTtl = 0;
    $('#allAssessmentSetPrflsTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflID').val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {
                    if ($('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflID').val() == "" || $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflID').val() == -1) {
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflNm').css('border-color', 'red');
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflNm').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflNm').css('border-color', '#ccc');
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflNm').css('border-width', '1px');
                    }
                    if ($('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').val() == "" || parseFloat($('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').val()) < 0) {
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').css('border-color', 'red');
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').css('border-color', '#ccc');
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').css('border-width', '1px');
                    }
                    if (errCount <= 0) {
                        slctdAssessmentSetPrfls = slctdAssessmentSetPrfls
                                + $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentSetPrflID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allAssessmentSetPrflsRow' + rndmNum + '_Score').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                        rngPrflFctrScoreTtl = rngPrflFctrScoreTtl + parseFloat($('#allAssessmentSetPrflsRow' + rndmNum + '_Score').val());
                        rcdCount = rcdCount + 1;
                    }

                }
            }
        }
    });
    if (errCount > 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please enter data in all highlighted Assessment Set Factor record</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount <= 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please provide at lease One Assessment Set Factor record</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount > 0 && (parseFloat(rngPrflFctrScoreTtl) < parseFloat(pScoreTtl))) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Total PROFILE SCORE " + pScoreTtl + " must be EQUAL to the sum of the PROFILE FACTOR SCORES " + rngPrflFctrScoreTtl + "</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    var dialog = bootbox.alert({
        title: 'Save Assessment Set Factors?',
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> Saving Profile Factors...Please Wait...</p>',
        callback: function () {
            getAllAssessmentSets('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=4");
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 15,
                    q: 'UPDATE',
                    subPgNo: 4.6,
                    subVwtyp: 4,
                    actyp: 1,
                    sbmtdAssessmentSetID: sbmtdAssessmentSetID,
                    slctdAssessmentSetPrfls: slctdAssessmentSetPrfls
                },
                success: function (result) {
                    setTimeout(function () {
                        dialog.find('.bootbox-body').html(result);
                    }, 500);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function validateAssessmentSetPrfl()
{
//alert("Hi");
    var dsplyMsg = "";
    var sbmtdAssessmentSetID = typeof $("#sbmtdAssessmentSetID").val() === 'undefined' ? '-1' : $("#sbmtdAssessmentSetID").val();
    var slctdAssessmentSetPrfls = "";
    var errCount = 0;
    var rcdCount = 0;
    var lineCnta = 1;
    var ttlUnmtchdRows = 0;
    var pScoreTtl = typeof $("#oneAssessmentSetDetTtlScore").val() === 'undefined' ? 0 : $("#oneAssessmentSetDetTtlScore").val().trim().length === 0 ? 0 : $("#oneAssessmentSetDetTtlScore").val();
    var oneAssessmentSetDetValidity = typeof $("#oneAssessmentSetDetValidity").text() === 'undefined' ? 'Invalid' : $("#oneAssessmentSetDetValidity").text();
    var rngPrflFctrScoreTtl = 0;
    var assessmentSetId = typeof $("#oneAssessmentSetDetID").val() === 'undefined' ? '-1' : $("#oneAssessmentSetDetID").val();
    var assessmentSetName = typeof $("#oneAssessmentSetDetName").val() === 'undefined' ? '' : $("#oneAssessmentSetDetName").val();
    var assessmentSetDesc = typeof $("#oneAssessmentSetDetDesc").val() === 'undefined' ? '' : $("#oneAssessmentSetDetDesc").val();
    var isEnabled = typeof $("#oneAssessmentSetDetIsEnbld").val() === 'undefined' ? 'Yes' : $("#oneAssessmentSetDetIsEnbld").val();
    var ttlScore = typeof $("#oneAssessmentSetDetTtlScore").val() === 'undefined' ? 0 : $("#oneAssessmentSetDetTtlScore").val().trim().length === 0 ? 0 : $("#oneAssessmentSetDetTtlScore").val();
    $('#allAssessmentSetPrflsTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflID').val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {

                    if ($('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflID').val() == "" || $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflID').val() == -1) {
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflNm').css('border-color', 'red');
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflNm').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflNm').css('border-color', '#ccc');
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflNm').css('border-width', '1px');
                    }
                    if ($('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').val() == "" || parseFloat($('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').val()) < 0) {
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').css('border-color', 'red');
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').css('border-color', '#ccc');
                        $('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').css('border-width', '1px');
                    }

                    if (errCount <= 0) {
                        slctdAssessmentSetPrfls = slctdAssessmentSetPrfls
                                + $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentSetPrflID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allAssessmentSetPrflsRow' + rndmNum + '_Score').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allAssessmentSetPrflsRow' + rndmNum + '_SortOrder').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allAssessmentSetPrflsRow' + rndmNum + '_TtlOptnsScore').text().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflNm').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                        rngPrflFctrScoreTtl = rngPrflFctrScoreTtl + parseFloat($('#allAssessmentSetPrflsRow' + rndmNum + '_Score').val());
                        rcdCount = rcdCount + 1;
                        //dsplyMsg
                    }
                    lineCnta = lineCnta + 1;
                }
            }
        }
    });
    if (assessmentSetId.trim() == "" || assessmentSetId == -1 || assessmentSetId == undefined) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please save Assessment Set First</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (assessmentSetName.trim() == "" || assessmentSetName == undefined) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please provide Assessment Set Name</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (ttlScore == "" || parseFloat(ttlScore) < 0 || ttlScore == undefined) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Pass Score must be zero or greater</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (errCount > 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please enter data in all highlighted Assessment Set Factor record</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount <= 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please provide at lease One Assessment Set Factor record</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount > 0 && oneAssessmentSetDetValidity == "Valid") {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Assessment Set is already VALID</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount > 0 && oneAssessmentSetDetValidity == "Invalid" && (parseFloat(rngPrflFctrScoreTtl) < parseFloat(pScoreTtl))) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>ASSESSMENT SET PASS SCORE " + pScoreTtl + " must be LESS THAN OR EQUAL to the sum of the PROFILE SCORES " + rngPrflFctrScoreTtl + "</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    var dialog = bootbox.alert({
        title: 'Validate Assessment Set?',
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> Validating Assessment Set...Please Wait...</p>',
        callback: function () {
            getAllAssessmentSets('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=4");
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 15,
                    q: 'UPDATE',
                    subPgNo: 4.6,
                    subVwtyp: 4,
                    actyp: 3,
                    sbmtdAssessmentSetID: sbmtdAssessmentSetID,
                    slctdAssessmentSetPrfls: slctdAssessmentSetPrfls,
                    assessmentSetId: assessmentSetId,
                    assessmentSetName: assessmentSetName,
                    assessmentSetDesc: assessmentSetDesc,
                    isEnabled: isEnabled,
                    ttlScore: ttlScore,
                    validity: oneAssessmentSetDetValidity,
                    rngPrflFctrScoreTtl: rngPrflFctrScoreTtl
                },
                success: function (result) {
                    setTimeout(function () {
                        dialog.find('.bootbox-body').html(result);
                    }, 500);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function delAssessmentSetPrfl(rowIDAttrb)
{
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    var AssessmentSetID = '';
    if (typeof $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentSetPrflID').val();
        AssessmentSetID = $('#allAssessmentSetPrflsRow' + rndmNum + '_AssessmentPrflID').val();
    }
    var dialog = bootbox.confirm({
        title: 'Remove Person?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">REMOVE</span> this Profile Factor?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Remove Person?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Removing Profile Factor...Please Wait...</p>',
                    callback: function () {
                        getAllAssessmentSets('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=4");
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 15,
                                    q: 'DELETE',
                                    subPgNo: 4.6,
                                    subVwtyp: 4,
                                    actyp: 1,
                                    AssessmentSetID: AssessmentSetID,
                                    PKeyID: pKeyID
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                        if (result1.indexOf("Success") !== -1) {
                                            $("#" + rowIDAttrb).remove();
                                        }
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            $("#" + rowIDAttrb).remove();
                            dialog1.find('.bootbox-body').html('Row Removed Successfully!');
                        }, 500);
                    }
                });
            }
        }
    });
}

function getProductsForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, otherPrsnTyp, rowID, fromBioCapture, callBackFunc)
{
    $('#allOtherInputData99').val(0);
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
    var fieldsPrfx = "";
    if (subPgNo == 1.1) {
        fieldsPrfx = "mcfIndCstmr";
    } else if (subPgNo == 1.2) {
        fieldsPrfx = "mcfCorpCstmr";
    } else if (subPgNo == 1.3) {
        fieldsPrfx = "mcfGrpCstmr";
    } else if (subPgNo == 1.4) {
        fieldsPrfx = "mcfOthPCstmr";
    }
//alert(rowID);
    if (typeof fromBioCapture === 'undefined' || fromBioCapture === null) {
        fromBioCapture = -1;
    }
    $("#tblRowID").val(rowID);
    if (!$.fn.DataTable.isDataTable('#indCustTable')) {
        var table1 = $('#indCustTable').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#indCustTable tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table1.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
        $('#indCustTable tbody').on('mouseenter', 'tr', function () {
            if ($(this).hasClass('highlight')) {
                $(this).removeClass('highlight');
            } else {
                table1.$('tr.highlight').removeClass('highlight');
                $(this).addClass('highlight');
            }
        });
    }
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
            if (fromBioCapture <= 0) {
//$('#' + titleElementID).html(formTitle);// + "<span style='color:red;font-weight: bold;float:right;width:50%;'>Approved</span>");
            }
            $('#' + titleElementID).html(formTitle);
            $('#' + modalBodyID).html(xmlhttp.responseText);
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                if(vtypActn !== "VIEW"){
                    getCustData('', '#allmodules', 'grp=17&typ=1&pg=7&subPgNo=' + subPgNo);
                }
                $('#' + titleElementID).html('');
                $('#' + modalBodyID).html('');
                $(e.currentTarget).unbind();
            });
            /*$('.modal-content').resizable({
             //alsoResize: ".modal-dialog",
             minHeight: 600,
             minWidth: 300
             });*/
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).off('show.bs.modal');
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            if (fromBioCapture = 1) {
                $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            }
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + formElementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/
                $('#meetingDays').multiselect({
                    includeSelectAllOption: true,
                    enableFiltering: true,
                    buttonWidth: '335px'
                });
                $('#relationTyp').multiselect({
                    includeSelectAllOption: true,
                    enableFiltering: true,
                    buttonWidth: '205px'
                });
                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&prdtID=" + pKeyID);
}

function saveCreditProduct(optn)
{
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val(); 
    var dsplyMsg = "";
    var sbmtdPrdtID = typeof $("#sbmtdPrdtID").val() === 'undefined' ? '-1' : $("#sbmtdPrdtID").val();
    var slctdPrcsnFees = "";
    var slctdLatePymntFees = "";
    var errCount = 0;
    var rcdCount = 0;
    var lineCnta = 1;
    var errCount1 = 0;
    var rcdCount1 = 0;
    var lineCnta1 = 1;
    var ttlUnmtchdRows = 0;
    var prdtName = typeof $("#prdtName").val() === 'undefined' ? '' : $("#prdtName").val();
    var pdtCode = typeof $("#pdtCode").val() === 'undefined' ? 0 : $("#pdtCode").val().trim().length === 0 ? 0 : $("#pdtCode").val();
    var prdtDesc = typeof $("#prdtDesc").val() === 'undefined' ? '' : $("#prdtDesc").val();
    var prdtCrncy = typeof $("#prdtCrncy").val() === 'undefined' ? '' : $("#prdtCrncy").val();
    var prdtType = typeof $("#prdtType").val() === 'undefined' ? '' : $("#prdtType").val();
    var minAmnt = typeof $("#minAmnt").val() === 'undefined' ? 0 : $("#minAmnt").val().trim().length === 0 ? 0 : $("#minAmnt").val();
    var maxAmnt = typeof $("#maxAmnt").val() === 'undefined' ? 0 : $("#maxAmnt").val().trim().length === 0 ? 0 : $("#maxAmnt").val();
    var rpmntType = typeof $("#rpmntType").val() === 'undefined' ? '' : $("#rpmntType").val();
    var gracePeriodNo = typeof $("#gracePeriodNo").val() === 'undefined' ? 0 : $("#gracePeriodNo").val().trim().length === 0 ? 0 : $("#gracePeriodNo").val();
    var gracePeriodType = typeof $("#gracePeriodType").val() === 'undefined' ? '' : $("#gracePeriodType").val();
    var minLoanTenor = typeof $("#minLoanTenor").val() === 'undefined' ? 0 : $("#minLoanTenor").val().trim().length === 0 ? 0 : $("#minLoanTenor").val();
    var minLoanTenorType = typeof $("#minLoanTenorType").val() === 'undefined' ? '' : $("#minLoanTenorType").val();
    var maxLoanTenor = typeof $("#maxLoanTenor").val() === 'undefined' ? 0 : $("#maxLoanTenor").val().trim().length === 0 ? 0 : $("#maxLoanTenor").val();
    var maxLoanTenorType = typeof $("#maxLoanTenorType").val() === 'undefined' ? '' : $("#maxLoanTenorType").val();
    var cashCltrlRqrd = typeof $("input[name='cashCltrlRqrd']:checked").val() === 'undefined' ? 'No' : $("input[name='cashCltrlRqrd']:checked").val();
    var valueFlatCashCltrl = typeof $("#valueFlatCashCltrl").val() === 'undefined' ? 0 : $("#valueFlatCashCltrl").val().trim().length === 0 ? 0 : $("#valueFlatCashCltrl").val();
    var valuePrcntCashCltrl = typeof $("#valuePrcntCashCltrl").val() === 'undefined' ? 0 : $("#valuePrcntCashCltrl").val().trim().length === 0 ? 0 : $("#valuePrcntCashCltrl").val();
    var prptyCltrlRqrd = typeof $("input[name='prptyCltrlRqrd']:checked").val() === 'undefined' ? 'No' : $("input[name='prptyCltrlRqrd']:checked").val();
    var valueFlatPrptyCltrl = typeof $("#valueFlatPrptyCltrl").val() === 'undefined' ? 0 : $("#valueFlatPrptyCltrl").val().trim().length === 0 ? 0 : $("#valueFlatPrptyCltrl").val();
    var valuePrcntPrptyCltrl = typeof $("#valuePrcntPrptyCltrl").val() === 'undefined' ? 0 : $("#valuePrcntPrptyCltrl").val().trim().length === 0 ? 0 : $("#valuePrcntPrptyCltrl").val();
    var invstmntCltrlRqrd = typeof $("input[name='invstmntCltrlRqrd']:checked").val() === 'undefined' ? 'No' : $("input[name='invstmntCltrlRqrd']:checked").val();
    var valueFlatInvstmntCltrl = typeof $("#valueFlatInvstmntCltrl").val() === 'undefined' ? 0 : $("#valueFlatInvstmntCltrl").val().trim().length === 0 ? 0 : $("#valueFlatInvstmntCltrl").val();
    var valuePrcntInvstmntCltrl = typeof $("#valuePrcntInvstmntCltrl").val() === 'undefined' ? 0 : $("#valuePrcntInvstmntCltrl").val().trim().length === 0 ? 0 : $("#valuePrcntInvstmntCltrl").val();
    var chrgInterest = typeof $("input[name='chrgInterest']:checked").val() === 'undefined' ? 'NO' : $("input[name='chrgInterest']:checked").val();
    var intRateType = typeof $("#intRateType").val() === 'undefined' ? '' : $("#intRateType").val();
    var interestRate = typeof $("#interestRate").val() === 'undefined' ? 0 : $("#interestRate").val().trim().length === 0 ? 0 : $("#interestRate").val();
    var compound = typeof $("#compound").val() === 'undefined' ? '' : $("#compound").val();
    var pstnFrqncy = typeof $("#pstnFrqncy").val() === 'undefined' ? '' : $("#pstnFrqncy").val();
    var grntaRqrd = typeof $("input[name='grntaRqrd']:checked").val() === 'undefined' ? 'No' : $("input[name='grntaRqrd']:checked").val();
    var grntaNo = typeof $("#grntaNo").val() === 'undefined' ? 0 : $("#grntaNo").val().trim().length === 0 ? 0 : $("#grntaNo").val();
    var prncplRcvblDbtAccID = typeof $("#prncplRcvblDbtAccID").val() === 'undefined' ? -1 : $("#prncplRcvblDbtAccID").val();
    var loansPybleCrdtAccID = typeof $("#loansPybleCrdtAccID").val() === 'undefined' ? -1 : $("#loansPybleCrdtAccID").val();
    var intrstRcvblDbtAccID = typeof $("#intrstRcvblDbtAccID").val() === 'undefined' ? -1 : $("#intrstRcvblDbtAccID").val();
    var dfrdIntrstCrdtAccID = typeof $("#dfrdIntrstCrdtAccID").val() === 'undefined' ? -1 : $("#dfrdIntrstCrdtAccID").val();
    var intrstRvnueCrdtAccID = typeof $("#intrstRvnueCrdtAccID").val() === 'undefined' ? -1 : $("#intrstRvnueCrdtAccID").val();
    var maxPrncplRcvbl = typeof $("#maxPrncplRcvbl").val() === 'undefined' ? 0 : $("#maxPrncplRcvbl").val().trim().length === 0 ? 0 : $("#maxPrncplRcvbl").val();
    var isAcctRqrd = typeof $("input[name='isAcctRqrd']:checked").val() === 'undefined' ? 'No' : $("input[name='isAcctRqrd']:checked").val();
    var crdtOfficerRqrd = typeof $("input[name='crdtOfficerRqrd']:checked").val() === 'undefined' ? 'No' : $("input[name='crdtOfficerRqrd']:checked").val();
    var assmntSetID = typeof $("#assmntSetID").val() === 'undefined' ? -1 : $("#assmntSetID").val();
    var sctrMjrID = typeof $("#sctrMjrID").val() === 'undefined' ? -1 : $("#sctrMjrID").val();
    var sctrMnrID = typeof $("#sctrMnrID").val() === 'undefined' ? -1 : $("#sctrMnrID").val();
    var startDate = typeof $("#startDate").val() === 'undefined' ? '' : $("#startDate").val();
    var endDate = typeof $("#endDate").val() === 'undefined' ? '31-Dec-4000' : $("#endDate").val();
    var indCust = typeof $("input[name='indCust']:checked").val() === 'undefined' ? 'NO' : 'YES';
    var corpCust = typeof $("input[name='corpCust']:checked").val() === 'undefined' ? 'NO' : 'YES';
    var custGrp = typeof $("input[name='custGrp']:checked").val() === 'undefined' ? 'NO' : 'YES';
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();  
    var codeLnght = typeof $("#codeLnght").val() === 'undefined' ? 10 : $("#codeLnght").val();
    
    var badDebtExpnsAccID = typeof $("#badDebtExpnsAccID").val() === 'undefined' ? -1 : $("#badDebtExpnsAccID").val();
    var prvsnExpnsAccID = typeof $("#prvsnExpnsAccID").val() === 'undefined' ? -1 : $("#prvsnExpnsAccID").val();
    var prvsnContraAccID = typeof $("#prvsnContraAccID").val() === 'undefined' ? -1 : $("#prvsnContraAccID").val();  
    
    var grpType = typeof $("#grpType").val() === 'undefined' ? 'Everyone' : $("#grpType").val();
    var groupID = typeof $("#groupID").val() === 'undefined' ? -1 : $("#groupID").val();
    var isStaffLoanProduct = typeof $("#isStaffLoanProduct").val() === 'undefined' ? 'No' : $("#isStaffLoanProduct").val();	

    //alert("prvsnExpnsAccID"+prvsnExpnsAccID+" prvsnContraAccID="+prvsnContraAccID);
    //return;
    
    $('#allPrcsnFeesTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#allPrcsnFeesRow' + rndmNum + '_FeeNm').val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {

                    if ($('#allPrcsnFeesRow' + rndmNum + '_FeeNm').val() == "" || $('#allPrcsnFeesRow' + rndmNum + '_FeeNm').val() == -1) {
                        $('#allPrcsnFeesRow' + rndmNum + '_FeeNm').css('border-color', 'red');
                        $('#allPrcsnFeesRow' + rndmNum + '_FeeNm').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allPrcsnFeesRow' + rndmNum + '_FeeNm').css('border-color', '#ccc');
                        $('#allPrcsnFeesRow' + rndmNum + '_FeeNm').css('border-width', '1px');
                    }
                    if ($('#allPrcsnFeesRow' + rndmNum + '_FeeTypeID').val() == "" || $('#allPrcsnFeesRow' + rndmNum + '_FeeTypeID').val() == -1) {
                        $('#allPrcsnFeesRow' + rndmNum + '_FeeType').css('border-color', 'red');
                        $('#allPrcsnFeesRow' + rndmNum + '_FeeType').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allPrcsnFeesRow' + rndmNum + '_FeeType').css('border-color', '#ccc');
                        $('#allPrcsnFeesRow' + rndmNum + '_FeeType').css('border-width', '1px');
                    }
                    if ($('#allPrcsnFeesRow' + rndmNum + '_AmntFlat').val() == "" || parseFloat($('#allPrcsnFeesRow' + rndmNum + '_AmntFlat').val()) < 0) {
                        $('#allPrcsnFeesRow' + rndmNum + '_AmntFlat').css('border-color', 'red');
                        $('#allPrcsnFeesRow' + rndmNum + '_AmntFlat').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allPrcsnFeesRow' + rndmNum + '_AmntFlat').css('border-color', '#ccc');
                        $('#allPrcsnFeesRow' + rndmNum + '_AmntFlat').css('border-width', '1px');
                    }
                    if ($('#allPrcsnFeesRow' + rndmNum + '_AmntPrcnt').val() == "" || parseFloat($('#allPrcsnFeesRow' + rndmNum + '_AmntPrcnt').val()) < 0) {
                        $('#allPrcsnFeesRow' + rndmNum + '_AmntPrcnt').css('border-color', 'red');
                        $('#allPrcsnFeesRow' + rndmNum + '_AmntPrcnt').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allPrcsnFeesRow' + rndmNum + '_AmntPrcnt').css('border-color', '#ccc');
                        $('#allPrcsnFeesRow' + rndmNum + '_AmntPrcnt').css('border-width', '1px');
                    }
                    if ($('#allPrcsnFeesRow' + rndmNum + '_RvnAcctID').val() == "" || $('#allPrcsnFeesRow' + rndmNum + '_RvnAcctID').val() == -1) {
                        $('#allPrcsnFeesRow' + rndmNum + '_RvnAcct').css('border-color', 'red');
                        $('#allPrcsnFeesRow' + rndmNum + '_RvnAcct').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allPrcsnFeesRow' + rndmNum + '_RvnAcct').css('border-color', '#ccc');
                        $('#allPrcsnFeesRow' + rndmNum + '_RvnAcct').css('border-width', '1px');
                    }

                    if (errCount <= 0) {
                        slctdPrcsnFees = slctdPrcsnFees
                                + $('#allPrcsnFeesRow' + rndmNum + '_LoanprdtPrcssnFeeID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allPrcsnFeesRow' + rndmNum + '_LoanPrdtID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allPrcsnFeesRow' + rndmNum + '_FeeNm').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allPrcsnFeesRow' + rndmNum + '_FeeTypeID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allPrcsnFeesRow' + rndmNum + '_AmntFlat').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allPrcsnFeesRow' + rndmNum + '_AmntPrcnt').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allPrcsnFeesRow' + rndmNum + '_RvnAcctID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allPrcsnFeesRow' + rndmNum + '_Rmrks').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                        rcdCount = rcdCount + 1;
                    }
                    lineCnta = lineCnta + 1;
                }
            }
        }
    });
    $('#allLatePymntFeesTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#allLatePymntFeesRow' + rndmNum + '_FeeNm').val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {

                    if ($('#allLatePymntFeesRow' + rndmNum + '_FeeNm').val() == "" || $('#allLatePymntFeesRow' + rndmNum + '_FeeNm').val() == -1) {
                        $('#allLatePymntFeesRow' + rndmNum + '_FeeNm').css('border-color', 'red');
                        $('#allLatePymntFeesRow' + rndmNum + '_FeeNm').css('border-width', '2px');
                        errCount1 = errCount1 + 1;
                    } else {
                        $('#allLatePymntFeesRow' + rndmNum + '_FeeNm').css('border-color', '#ccc');
                        $('#allLatePymntFeesRow' + rndmNum + '_FeeNm').css('border-width', '1px');
                    }
                    if ($('#allLatePymntFeesRow' + rndmNum + '_TargetID').val() == "" || $('#allLatePymntFeesRow' + rndmNum + '_TargetID').val() == -1) {
                        $('#allLatePymntFeesRow' + rndmNum + '_Target').css('border-color', 'red');
                        $('#allLatePymntFeesRow' + rndmNum + '_Target').css('border-width', '2px');
                        errCount1 = errCount1 + 1;
                    } else {
                        $('#allLatePymntFeesRow' + rndmNum + '_Target').css('border-color', '#ccc');
                        $('#allLatePymntFeesRow' + rndmNum + '_Target').css('border-width', '1px');
                    }
                    if ($('#allLatePymntFeesRow' + rndmNum + '_AmntFlat').val() == "" || parseFloat($('#allLatePymntFeesRow' + rndmNum + '_AmntFlat').val()) < 0) {
                        $('#allLatePymntFeesRow' + rndmNum + '_AmntFlat').css('border-color', 'red');
                        $('#allLatePymntFeesRow' + rndmNum + '_AmntFlat').css('border-width', '2px');
                        errCount1 = errCount1 + 1;
                    } else {
                        $('#allLatePymntFeesRow' + rndmNum + '_AmntFlat').css('border-color', '#ccc');
                        $('#allLatePymntFeesRow' + rndmNum + '_AmntFlat').css('border-width', '1px');
                    }
                    if ($('#allLatePymntFeesRow' + rndmNum + '_AmntPrcnt').val() == "" || parseFloat($('#allLatePymntFeesRow' + rndmNum + '_AmntPrcnt').val()) < 0) {
                        $('#allLatePymntFeesRow' + rndmNum + '_AmntPrcnt').css('border-color', 'red');
                        $('#allLatePymntFeesRow' + rndmNum + '_AmntPrcnt').css('border-width', '2px');
                        errCount1 = errCount1 + 1;
                    } else {
                        $('#allLatePymntFeesRow' + rndmNum + '_AmntPrcnt').css('border-color', '#ccc');
                        $('#allLatePymntFeesRow' + rndmNum + '_AmntPrcnt').css('border-width', '1px');
                    }
//                    if($('#allLatePymntFeesRow' + rndmNum + '_DbtAcctID').val() == ""|| $('#allLatePymntFeesRow' + rndmNum + '_DbtAcctID').val() == -1){
//                        $('#allLatePymntFeesRow' + rndmNum + '_DbtAcct').css('border-color', 'red');
//                        $('#allLatePymntFeesRow' + rndmNum + '_DbtAcct').css('border-width', '2px');
//                        errCount1 = errCount1 + 1;                        
//                    } else {
//                        $('#allLatePymntFeesRow' + rndmNum + '_DbtAcct').css('border-color', '#ccc');
//                        $('#allLatePymntFeesRow' + rndmNum + '_DbtAcct').css('border-width', '1px');
//                    }
                    if ($('#allLatePymntFeesRow' + rndmNum + '_CrdtAcctID').val() == "" || $('#allLatePymntFeesRow' + rndmNum + '_CrdtAcctID').val() == -1) {
                        $('#allLatePymntFeesRow' + rndmNum + '_CrdtAcct').css('border-color', 'red');
                        $('#allLatePymntFeesRow' + rndmNum + '_CrdtAcct').css('border-width', '2px');
                        errCount1 = errCount1 + 1;
                    } else {
                        $('#allLatePymntFeesRow' + rndmNum + '_CrdtAcct').css('border-color', '#ccc');
                        $('#allLatePymntFeesRow' + rndmNum + '_CrdtAcct').css('border-width', '1px');
                    }
                    if (optn == 100) {
                        if ($('#allLatePymntFeesRow' + rndmNum + '_Frqncy').text() != "Repayment Period" && $('#allLatePymntFeesRow' + rndmNum + '_FrqncyNo').text() == ""
                                || parseFloat($('#allLatePymntFeesRow' + rndmNum + '_FrqncyNo').text()) <= 0) {
                            $('#allLatePymntFeesRow' + rndmNum + '_FeeNm').css('border-color', 'red');
                            $('#allLatePymntFeesRow' + rndmNum + '_FeeNm').css('border-width', '2px');
                            rcdCount1 = rcdCount1 + 1;
                        } else {
                            $('#allLatePymntFeesRow' + rndmNum + '_FeeNm').css('border-color', '#ccc');
                            $('#allLatePymntFeesRow' + rndmNum + '_FeeNm').css('border-width', '1px');
                        }
                    }

                    if (errCount1 <= 0) {
                        slctdLatePymntFees = slctdLatePymntFees
                                + $('#allLatePymntFeesRow' + rndmNum + '_LoanprdtLateFeeID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allLatePymntFeesRow' + rndmNum + '_LoanPrdtID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allLatePymntFeesRow' + rndmNum + '_FeeNm').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allLatePymntFeesRow' + rndmNum + '_TargetID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allLatePymntFeesRow' + rndmNum + '_AmntFlat').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allLatePymntFeesRow' + rndmNum + '_AmntPrcnt').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                //+ $('#allLatePymntFeesRow' + rndmNum + '_DbtAcctID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allLatePymntFeesRow' + rndmNum + '_CrdtAcctID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                    }
                    lineCnta1 = lineCnta1 + 1;
                }
            }
        }
    });
    var rslt = validateCreditPrdtForm(optn, pdtCode, prdtName, minAmnt, maxAmnt, gracePeriodNo, minLoanTenor, maxLoanTenor, cashCltrlRqrd,
            valueFlatCashCltrl, valuePrcntCashCltrl, prptyCltrlRqrd, valueFlatPrptyCltrl, valuePrcntPrptyCltrl, invstmntCltrlRqrd, valueFlatInvstmntCltrl,
            valuePrcntInvstmntCltrl, chrgInterest, interestRate, pstnFrqncy, grntaRqrd, grntaNo, prncplRcvblDbtAccID, loansPybleCrdtAccID,
            intrstRcvblDbtAccID, dfrdIntrstCrdtAccID, intrstRvnueCrdtAccID, maxPrncplRcvbl, sctrMjrID, sctrMnrID, startDate,
            badDebtExpnsAccID, prvsnExpnsAccID, prvsnContraAccID, prdtType, codeLnght);
    if (!rslt) {
        return false;
    }

    if (errCount > 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please enter data in all highlighted Processing Fees record</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (errCount1 > 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please enter data in all highlighted Late Fees record cells</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount1 > 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please complete the Late Fees penalty freqency details</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
    
    var dsplyMsg = "Saving Credit Product...Please Wait...";
    var dsplyMsgTtle = "Save Credit Product?";
    var dsplyMsgRtrn = "Credit Product Saved";    

    if(optn ==  1){
        dsplyMsg = "Submitting Credit Product...Please Wait...";
        dsplyMsgTtle = "Submit Credit Product?";
        dsplyMsgRtrn = "Credit Product Submitted for Authorization";
    }

    var dialog = bootbox.alert({
        title: dsplyMsgTtle,
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> ' + dsplyMsg + '</p>',
        callback: function () {
            sbmtdPrdtID = typeof $("#sbmtdPrdtID").val() === 'undefined' ? '-1' : $("#sbmtdPrdtID").val();
            recCnt = typeof $("#recCnt").val() === 'undefined' ? 0 : $("#recCnt").val();
            //alert("recCnt="+recCnt+ " sbmtdPrdtID="+sbmtdPrdtID);
            if(parseInt(recCnt) > 0){
                getProductsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Credit Product', 12, 7.2, 0, 'EDIT', sbmtdPrdtID, '', 'indCustTableRow1');
            }//getCustData('', '#allmodules', 'grp=17&typ=1&pg=7&subPgNo=7.2');
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 12,
                    q: 'UPDATE',
                    subPgNo: 7.2,
                    actyp: 100,
                    optn: optn,
                    sbmtdPrdtID: sbmtdPrdtID,
                    prdtName: prdtName,
                    pdtCode: pdtCode,
                    prdtDesc: prdtDesc,
                    prdtCrncy: prdtCrncy,
                    prdtType: prdtType,
                    minAmnt: minAmnt,
                    maxAmnt: maxAmnt,
                    rpmntType: rpmntType,
                    gracePeriodNo: gracePeriodNo,
                    gracePeriodType: gracePeriodType,
                    minLoanTenor: minLoanTenor,
                    minLoanTenorType: minLoanTenorType,
                    maxLoanTenor: maxLoanTenor,
                    maxLoanTenorType: maxLoanTenorType,
                    cashCltrlRqrd: cashCltrlRqrd,
                    valueFlatCashCltrl: valueFlatCashCltrl,
                    valuePrcntCashCltrl: valuePrcntCashCltrl,
                    prptyCltrlRqrd: prptyCltrlRqrd,
                    valueFlatPrptyCltrl: valueFlatPrptyCltrl,
                    valuePrcntPrptyCltrl: valuePrcntPrptyCltrl,
                    invstmntCltrlRqrd: invstmntCltrlRqrd,
                    valueFlatInvstmntCltrl: valueFlatInvstmntCltrl,
                    valuePrcntInvstmntCltrl: valuePrcntInvstmntCltrl,
                    chrgInterest: chrgInterest,
                    intRateType: intRateType,
                    interestRate: interestRate,
                    compound: compound,
                    pstnFrqncy: pstnFrqncy,
                    grntaRqrd: grntaRqrd,
                    grntaNo: grntaNo,
                    prncplRcvblDbtAccID: prncplRcvblDbtAccID,
                    loansPybleCrdtAccID: loansPybleCrdtAccID,
                    intrstRcvblDbtAccID: intrstRcvblDbtAccID,
                    dfrdIntrstCrdtAccID: dfrdIntrstCrdtAccID,
                    intrstRvnueCrdtAccID: intrstRvnueCrdtAccID,
                    maxPrncplRcvbl: maxPrncplRcvbl,
                    isAcctRqrd: isAcctRqrd,
                    crdtOfficerRqrd: crdtOfficerRqrd,
                    assmntSetID: assmntSetID,
                    sctrMjrID: sctrMjrID,
                    sctrMnrID: sctrMnrID,
                    startDate: startDate,
                    endDate: endDate,
                    indCust: indCust,
                    corpCust: corpCust,
                    custGrp: custGrp,
                    slctdPrcsnFees: slctdPrcsnFees,
                    slctdLatePymntFees: slctdLatePymntFees,
                    rvsnTtl:rvsnTtl,
                    badDebtExpnsAccID: badDebtExpnsAccID, 
                    prvsnExpnsAccID: prvsnExpnsAccID, 
                    prvsnContraAccID: prvsnContraAccID,
                    isStaffLoanProduct: isStaffLoanProduct,
                    grpType: grpType,
                    groupID: groupID
                },
                success: function (result) {
                    var data = result;
                    setTimeout(function () {
                        //var sbmtdPrdtID = typeof $("#sbmtdPrdtID").val() === 'undefined' ? '-1' : $("#sbmtdPrdtID").val();
                        if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                            var obj = $.parseJSON(data);
                            $("#sbmtdPrdtID").val(obj.sbmtdPrdtID);
                            $("#recCnt").val(parseInt(obj.recCntInst) + parseInt(obj.recCntUpdt) + parseInt(obj.rsltCrtCnt) + parseInt(obj.rsltUpdtCnt));
                            var msg = "<span style='color:green;font-weight:bold !important;'>" + dsplyMsgRtrn + "</br><i>" + obj.recCntInst + " Fee record(s) inserted</br>" 
                                    + obj.recCntUpdt + " Fee record(s) updated</i></span>"
                            dialog.find('.bootbox-body').html(msg);
                        } else {
                            dialog.find('.bootbox-body').html(data);
                        }

                    }, 500);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function validateCreditPrdtForm(optn, pdtCode, prdtName, minAmnt, maxAmnt, gracePeriodNo, minLoanTenor, maxLoanTenor, cashCltrlRqrd,
        valueFlatCashCltrl, valuePrcntCashCltrl, prptyCltrlRqrd, valueFlatPrptyCltrl, valuePrcntPrptyCltrl, invstmntCltrlRqrd, valueFlatInvstmntCltrl,
        valuePrcntInvstmntCltrl, chrgInterest, interestRate, pstnFrqncy, grntaRqrd, grntaNo, prncplRcvblDbtAccID, loansPybleCrdtAccID,
        intrstRcvblDbtAccID, dfrdIntrstCrdtAccID, intrstRvnueCrdtAccID, maxPrncplRcvbl, sctrMjrID, sctrMnrID, startDate,
        badDebtExpnsAccID, prvsnExpnsAccID, prvsnContraAccID, prdtType, codeLnght)
{
    var cnta = 0;
    var msgDsply = "";
    var msgDsplyHdr = "<span style='font-weight: bold !important;'>The following is/are required:</span></br>";
    
    if(parseFloat(pdtCode.length) != parseFloat(codeLnght)){
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#codeLnght").css('border-color', 'red');
        $("#codeLnght").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red; font-weight:bold !important;'>Product Code Length must be "+codeLnght+"</span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        $("#codeLnght").css('border-color', '#ccc');
        $("#codeLnght").css('border-width', '1px');        
    }
    
    if (pdtCode == "" || pdtCode == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#pdtCode").css('border-color', 'red');
        $("#pdtCode").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Product Code,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#pdtCode").css('border-color', '#ccc');
        $("#pdtCode").css('border-width', '1px');
    }

    if (prdtName.trim() == "" || prdtName == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#prdtName").css('border-color', 'red');
        $("#prdtName").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Product Name,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#prdtName").css('border-color', '#ccc');
        $("#prdtName").css('border-width', '1px');
    }

    if (minAmnt == "" || parseFloat(minAmnt) < 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#minAmnt").css('border-color', 'red');
        $("#minAmnt").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Minimum Amount must be greater than zero,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#minAmnt").css('border-color', '#ccc');
        $("#minAmnt").css('border-width', '1px');
    }

    if (maxAmnt == "" || parseFloat(maxAmnt) < 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#maxAmnt").css('border-color', 'red');
        $("#maxAmnt").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Maximum Amount must be greater than zero,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#maxAmnt").css('border-color', '#ccc');
        $("#maxAmnt").css('border-width', '1px');
    }

    if (gracePeriodNo == "" || parseFloat(gracePeriodNo) < 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#gracePeriodNo").css('border-color', 'red');
        $("#gracePeriodNo").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Grace Period must be greater than zero,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#gracePeriodNo").css('border-color', '#ccc');
        $("#gracePeriodNo").css('border-width', '1px');
    }

    if (minLoanTenor == "" || parseFloat(minLoanTenor) < 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#minLoanTenor").css('border-color', 'red');
        $("#minLoanTenor").css('border-width', '2px');
        msgDsply = msgDsply + "Minimum Loan Tenor must be greater than zero,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#minLoanTenor").css('border-color', '#ccc');
        $("#minLoanTenor").css('border-width', '1px');
    }

    if (maxLoanTenor == "" || parseFloat(maxLoanTenor) < 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#maxLoanTenor").css('border-color', 'red');
        $("#maxLoanTenor").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Maximum Loan Tenor must be greater than zero,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#maxLoanTenor").css('border-color', '#ccc');
        $("#maxLoanTenor").css('border-width', '1px');
    }

    if (parseFloat(minLoanTenor) > 0 && parseFloat(maxLoanTenor) > 0 && (parseFloat(minLoanTenor) > parseFloat(maxLoanTenor))) {
        //if (email.trim() == "" || email == "undefined") {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $("#minLoanTenor").css('border-color', 'red');
            $("#minLoanTenor").css('border-width', '2px');
            msgDsply = msgDsply + "<b>Minimum Loan Tenor must be less than Maximum Loan Tenor,</b></br>";
            cnta = cnta + 1;
        } else {
            $("#minLoanTenor").css('border-color', '#ccc');
            $("#minLoanTenor").css('border-width', '1px');
        //}
    }

    if (cashCltrlRqrd == "Yes" && (valueFlatCashCltrl == "" || parseFloat(valueFlatCashCltrl) < 0)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#valueFlatCashCltrl").css('border-color', 'red');
        $("#valueFlatCashCltrl").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Cash Collateral Amount,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#valueFlatCashCltrl").css('border-color', '#ccc');
        $("#valueFlatCashCltrl").css('border-width', '1px');
    }

    if (cashCltrlRqrd == "Yes" && (valuePrcntCashCltrl == "" || parseFloat(valuePrcntCashCltrl) < 0)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#valuePrcntCashCltrl").css('border-color', 'red');
        $("#valuePrcntCashCltrl").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Cash Collateral Amount,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#valuePrcntCashCltrl").css('border-color', '#ccc');
        $("#valuePrcntCashCltrl").css('border-width', '1px');
    }

    if (prptyCltrlRqrd == "Yes" && ((valueFlatPrptyCltrl == "" || parseFloat(valueFlatPrptyCltrl) < 0) ||
            (valuePrcntPrptyCltrl == "" || parseFloat(valuePrcntPrptyCltrl) < 0))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#valueFlatPrptyCltrl").css('border-color', 'red');
        $("#valueFlatPrptyCltrl").css('border-width', '2px');
        $("#valuePrcntPrptyCltrl").css('border-color', 'red');
        $("#valuePrcntPrptyCltrl").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Property Collateral Value,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#valueFlatPrptyCltrl").css('border-color', '#ccc');
        $("#valueFlatPrptyCltrl").css('border-width', '1px');
        $("#valuePrcntPrptyCltrl").css('border-color', '#ccc');
        $("#valuePrcntPrptyCltrl").css('border-width', '1px');
    }

    if (invstmntCltrlRqrd == "Yes" && ((valueFlatInvstmntCltrl == "" || parseFloat(valueFlatInvstmntCltrl) < 0) &&
            (valuePrcntInvstmntCltrl == "" || parseFloat(valuePrcntInvstmntCltrl) < 0))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#valueFlatInvstmntCltrl").css('border-color', 'red');
        $("#valueFlatInvstmntCltrl").css('border-width', '2px');
        $("#valuePrcntInvstmntCltrl").css('border-color', 'red');
        $("#valuePrcntInvstmntCltrl").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Investment Collateral Amount,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#valueFlatInvstmntCltrl").css('border-color', '#ccc');
        $("#valueFlatInvstmntCltrl").css('border-width', '1px');
        $("#valuePrcntInvstmntCltrl").css('border-color', '#ccc');
        $("#valuePrcntInvstmntCltrl").css('border-width', '1px');
    }

    if (chrgInterest == "YES" && (interestRate == "" || parseFloat(interestRate) < 0)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#interestRate").css('border-color', 'red');
        $("#interestRate").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Interest Rate,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');
    }

    if (grntaRqrd == "Yes" && (grntaNo == "" || parseFloat(grntaNo) <= 0)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#grntaNo").css('border-color', 'red');
        $("#grntaNo").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Guarantor Quantity,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#grntaNo").css('border-color', '#ccc');
        $("#grntaNo").css('border-width', '1px');
    }

    if (prdtType == "Loan" && (prncplRcvblDbtAccID.trim() == "" || prncplRcvblDbtAccID == "-1")) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#prncplRcvblDbtAcc").css('border-color', 'red');
        $("#prncplRcvblDbtAcc").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Principal Receivable Account,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#prncplRcvblDbtAcc").css('border-color', '#ccc');
        $("#prncplRcvblDbtAcc").css('border-width', '1px');
    }
    
    if (prdtType == "Loan" && (loansPybleCrdtAccID.trim() == "" || loansPybleCrdtAccID == "-1")) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#loansPybleCrdtAcc").css('border-color', 'red');
        $("#loansPybleCrdtAcc").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Loans Payable Liability Account,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#loansPybleCrdtAcc").css('border-color', '#ccc');
        $("#loansPybleCrdtAcc").css('border-width', '1px');
    }    

    if (prdtType == "Loan" && (intrstRcvblDbtAccID.trim() == "" || intrstRcvblDbtAccID == "-1")) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#intrstRcvblDbtAcc").css('border-color', 'red');
        $("#intrstRcvblDbtAcc").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Interest Receivable Asset Account,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#intrstRcvblDbtAcc").css('border-color', '#ccc');
        $("#intrstRcvblDbtAcc").css('border-width', '1px');
    }

    if (prdtType == "Loan" && (dfrdIntrstCrdtAccID == "" || dfrdIntrstCrdtAccID == "-1")) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#dfrdIntrstCrdtAcc").css('border-color', 'red');
        $("#dfrdIntrstCrdtAcc").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Deferred Interest Liability Account,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#dfrdIntrstCrdtAcc").css('border-color', '#ccc');
        $("#dfrdIntrstCrdtAcc").css('border-width', '1px');
    }

    if (intrstRvnueCrdtAccID == "" || intrstRvnueCrdtAccID == "-1") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#intrstRvnueCrdtAcc").css('border-color', 'red');
        $("#intrstRvnueCrdtAcc").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Interest Revenue Account,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#intrstRvnueCrdtAcc").css('border-color', '#ccc');
        $("#intrstRvnueCrdtAcc").css('border-width', '1px');
    }
    
    if (badDebtExpnsAccID == "" || badDebtExpnsAccID == "-1") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#badDebtExpnsAcc").css('border-color', 'red');
        $("#badDebtExpnsAcc").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Bad Debt Expense Account,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#badDebtExpnsAcc").css('border-color', '#ccc');
        $("#badDebtExpnsAcc").css('border-width', '1px');
    } 
    
    if (prvsnExpnsAccID == "" || prvsnExpnsAccID == "-1") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#prvsnExpnsAcc").css('border-color', 'red');
        $("#prvsnExpnsAcc").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Provision Expense Account,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#prvsnExpnsAcc").css('border-color', '#ccc');
        $("#prvsnExpnsAcc").css('border-width', '1px');
    }     

    if (prvsnContraAccID == "" || prvsnContraAccID == "-1") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#prvsnContraAcc").css('border-color', 'red');
        $("#prvsnContraAcc").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Provision Contra Receivable Account,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#prvsnContraAcc").css('border-color', '#ccc');
        $("#prvsnContraAcc").css('border-width', '1px');
    }   

    if (maxPrncplRcvbl == "" || parseFloat(maxPrncplRcvbl) < 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#maxPrncplRcvbl").css('border-color', 'red');
        $("#maxPrncplRcvbl").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Principal Receivable Balance must be greater than zero</b></br>";
        cnta = cnta + 1;
    } else {
        $("#maxPrncplRcvbl").css('border-color', '#ccc');
        $("#maxPrncplRcvbl").css('border-width', '1px');
    }

    if (sctrMjrID.trim() == "" || sctrMjrID == "-1") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#sctrMjr").css('border-color', 'red');
        $("#sctrMjr").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Loan Sector Major,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#sctrMjr").css('border-color', '#ccc');
        $("#sctrMjr").css('border-width', '1px');
    }

    if (sctrMnrID == "" || sctrMnrID == "-1") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#sctrMnr").css('border-color', 'red');
        $("#sctrMnr").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Loan Sector Minor,</b></br>";
        cnta = cnta + 1;
    } else {
        $("#sctrMnr").css('border-color', '#ccc');
        $("#sctrMnr").css('border-width', '1px');
    }

    if (startDate == "" || startDate == "undefined") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#startDate").css('border-color', 'red');
        $("#startDate").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Product Start Date</b></br>";
        cnta = cnta + 1;
    } else {
        $("#startDate").css('border-color', '#ccc');
        $("#startDate").css('border-width', '1px');
    }

    if (cnta > 0) {
        bootbox.alert({
            size: "small",
            title: "Validation Errors",
            message: msgDsplyHdr + "<span style='color:red; font-weight:bold !important;'>" + msgDsply + "</span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        $("#pdtCode").css('border-color', '#ccc');
        $("#pdtCode").css('border-width', '1px');
        $("#prdtName").css('border-color', '#ccc');
        $("#prdtName").css('border-width', '1px');
        $("#minAmnt").css('border-color', '#ccc');
        $("#minAmnt").css('border-width', '1px');
        $("#maxAmnt").css('border-color', '#ccc');
        $("#maxAmnt").css('border-width', '1px');
        $("#gracePeriodNo").css('border-color', '#ccc');
        $("#gracePeriodNo").css('border-width', '1px');
        $("#minLoanTenor").css('border-color', '#ccc');
        $("#minLoanTenor").css('border-width', '1px');
        $("#maxLoanTenor").css('border-color', '#ccc');
        $("#maxLoanTenor").css('border-width', '1px');
        $("#cashCltrlRqrd").css('border-color', '#ccc');
        $("#cashCltrlRqrd").css('border-width', '1px');
        $("#valueFlatCashCltrl").css('border-color', '#ccc');
        $("#valueFlatCashCltrl").css('border-width', '1px');
        $("#valuePrcntCashCltrl").css('border-color', '#ccc');
        $("#valuePrcntCashCltrl").css('border-width', '1px');
        $("#prptyCltrlRqrd").css('border-color', '#ccc');
        $("#prptyCltrlRqrd").css('border-width', '1px');
        $("#valueFlatPrptyCltrl").css('border-color', '#ccc');
        $("#valueFlatPrptyCltrl").css('border-width', '1px');
        $("#valuePrcntPrptyCltrl").css('border-color', '#ccc');
        $("#valuePrcntPrptyCltrl").css('border-width', '1px');
        $("#invstmntCltrlRqrd").css('border-color', '#ccc');
        $("#invstmntCltrlRqrd").css('border-width', '1px');
        $("#valueFlatInvstmntCltrl").css('border-color', '#ccc');
        $("#valueFlatInvstmntCltrl").css('border-width', '1px');
        $("#valuePrcntInvstmntCltrl").css('border-color', '#ccc');
        $("#valuePrcntInvstmntCltrl").css('border-width', '1px');
        $("#chrgInterest").css('border-color', '#ccc');
        $("#chrgInterest").css('border-width', '1px');
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');
        $("#pstnFrqncy").css('border-color', '#ccc');
        $("#pstnFrqncy").css('border-width', '1px');
        $("#grntaRqrd").css('border-color', '#ccc');
        $("#grntaRqrd").css('border-width', '1px');
        $("#grntaNo").css('border-color', '#ccc');
        $("#grntaNo").css('border-width', '1px');
        $("#prncplRcvblDbtAccID").css('border-color', '#ccc');
        $("#prncplRcvblDbtAccID").css('border-width', '1px');
        $("#loansPybleCrdtAccID").css('border-color', '#ccc');
        $("#loansPybleCrdtAccID").css('border-width', '1px');
        $("#intrstRcvblDbtAccID").css('border-color', '#ccc');
        $("#intrstRcvblDbtAccID").css('border-width', '1px');
        $("#dfrdIntrstCrdtAccID").css('border-color', '#ccc');
        $("#dfrdIntrstCrdtAccID").css('border-width', '1px');
        $("#intrstRvnueCrdtAccID").css('border-color', '#ccc');
        $("#intrstRvnueCrdtAccID").css('border-width', '1px');
        $("#badDebtExpnsAccID").css('border-color', '#ccc');
        $("#badDebtExpnsAccID").css('border-width', '1px');
        $("#prvsnExpnsAccID").css('border-color', '#ccc');
        $("#prvsnExpnsAccID").css('border-width', '1px');
        $("#prvsnContraAccID").css('border-color', '#ccc');
        $("#prvsnContraAccID").css('border-width', '1px');                
        $("#maxPrncplRcvbl").css('border-color', '#ccc');
        $("#maxPrncplRcvbl").css('border-width', '1px');
        $("#sctrMjrID").css('border-color', '#ccc');
        $("#sctrMjrID").css('border-width', '1px');
        $("#sctrMnrID").css('border-color', '#ccc');
        $("#sctrMnrID").css('border-width', '1px');
        $("#startDate").css('border-color', '#ccc');
        $("#startDate").css('border-width', '1px');
        return true;
    }
}

function onClickSectorMinor() {
    var sctrMjrID = typeof $("#sctrMjrID").val() === 'undefined' ? -1 : $("#sctrMjrID").val();
    if (parseFloat(sctrMjrID) <= 0) {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red; font-weight:bold !important;'>Select Major Sector first</span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'MCF Loan Sectors - Minor', 'sctrMjrID', '', '', 'radio', true, '', 'sctrMnrID', 'sctrMnr', 'clear', 1, '')
}

function getCrdtPrdtLateFeesFrqncyNRmksForm(rowIDAttrb, vwtype)
{
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    var FeeNm = '';
    if (typeof $('#allLatePymntFeesRow' + rndmNum + '_LoanPrdtID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#allLatePymntFeesRow' + rndmNum + '_LoanprdtLateFeeID').val();
        FeeNm = $('#allLatePymntFeesRow' + rndmNum + '_FeeNm').val();
    }

    var sbmtdPrdtID = typeof $("#sbmtdPrdtID").val() === 'undefined' ? '-1' : $("#sbmtdPrdtID").val();
    var lnkArgs = 'grp=17&typ=1&pg=12&subPgNo=7.2&vtyp=1&vtypActn=' + vwtype + '&sbmtdLoanprdtLateFeeID=' + pKeyID + '&sbmtdPrdtID=' + sbmtdPrdtID;
    doAjaxWthCallBck(lnkArgs, 'myFormsModalx', 'ShowDialog', 'LATE FEE: ' + FeeNm, 'myFormsModalxTitle', 'myFormsModalxBody', function () {
        var table1 = $('#allLatePymntFeesTable').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#allLatePymntFeesTable').wrap('<div class="dataTables_scroll"/>');
        $('#allOtherInputData99').val(0);
        $('#myFormsModalx').one('hidden.bs.modal', function (e) {

            var sbmtdPrdtID = typeof $("#sbmtdPrdtID").val() === 'undefined' ? '-1' : $("#sbmtdPrdtID").val();
            getProductsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Credit Product', 12, 7.2, 0, 'EDIT', sbmtdPrdtID, '', 'indCustTableRow1');
        });
        //$(document).ready(function () {
        //onChqLateFeeFrqncy();
        //});
    });
    $('#allLatePymntFeesFrqncyNRmksForm').submit(function (e) {
        e.preventDefault();
        return false;
    });
}

function saveCrdtPrdtFrqncyNRemarks(elementID, rowID)
{
    var obj;
    var box;
    var box2;
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var sbmtdPrdtID = typeof $("#sbmtdPrdtID").val() === 'undefined' ? '-1' : $("#sbmtdPrdtID").val();
    var frqncyNo = typeof $("#frqncyNo").val() === 'undefined' ? -1 : $("#frqncyNo").val();
    var frqncy = typeof $("#frqncy").val() === 'undefined' ? 'Repayment Period' : $("#frqncy").val();
    var remarks = typeof $("#remarks").val() === 'undefined' ? -1 : $("#remarks").val();
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val(); 
    if (frqncy != "Repayment Date" && (frqncyNo == "" || parseFloat(frqncyNo) <= 0)) {
        $body.removeClass("mdlloadingDiag");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please enter Number of " + frqncy + "(s) late",
            callback: function () {
            }
        });
        return false;
    }

    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            var msg = "";
            var data = xmlhttp.responseText;
            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                obj = $.parseJSON(data);
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Saving Successful",
                    callback: function () {
                    }
                });
                //$('#' + elementID).modal('hide');
            } else {
                $body.removeClass("mdlloadingDiag");
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: data,
                    callback: function () {
                    }
                });
                return false;
            }
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=12&subPgNo=7.2&vtyp=1&q=UPDATE" +
            "&sbmtdPrdtID=" + sbmtdPrdtID +
            "&rowID=" + rowID +
            "&frqncyNo=" + frqncyNo +
            "&frqncy=" + frqncy +
            "&remarks=" + remarks+
            "&rvsnTtl=" +rvsnTtl);
}

function onChqLateFeeFrqncy() {
    var statusSltd = $("#frqncy option:selected").val();
    if (statusSltd == "Repayment Date") {
        $('#frqncyNo').val(0);
        $('#frqncyNoDiv').css('display', 'none');
        $('#frqncyDiv').attr('class', 'col-md-12');
    } else {
        $('#frqncyNo').css('display', 'block');
        $('#frqncyNo').val('');
        $('#frqncyDiv').attr('class', 'col-md-8');
        $('#frqncyNoDiv').attr('class', 'col-md-4');
        $('#frqncyNoDiv').css('display', 'block');
    }
}

function getAllPrcsnFees(actionText, slctr, linkArgs)
{
    var srchFor = typeof $("#allPrcsnFeesSrchFor").val() === 'undefined' ? '%' : $("#allPrcsnFeesSrchFor").val();
    var srchIn = typeof $("#allPrcsnFeesSrchIn").val() === 'undefined' ? 'Both' : $("#allPrcsnFeesSrchIn").val();
    var pageNo = typeof $("#allPrcsnFeesPageNo").val() === 'undefined' ? 1 : $("#allPrcsnFeesPageNo").val();
    var limitSze = typeof $("#allPrcsnFeesDsplySze").val() === 'undefined' ? 10 : $("#allPrcsnFeesDsplySze").val();
    var sortBy = typeof $("#allPrcsnFeesSortBy").val() === 'undefined' ? '' : $("#allPrcsnFeesSortBy").val();
    var isEnabled = typeof $("#allPrcsnFeesIsEnabled").val() === 'undefined' ? '' : $("#allPrcsnFeesIsEnabled").val();
    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy + "&isEnabled=" + isEnabled
    openATab(slctr, linkArgs);
}

function enterKeyFuncAllPrcsnFees(e, actionText, slctr, linkArgs)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAllPrcsnFees(actionText, slctr, linkArgs);
    }
}

function getAllLatePymntFees(actionText, slctr, linkArgs)
{
    var srchFor = typeof $("#allLatePymntFeesSrchFor").val() === 'undefined' ? '%' : $("#allLatePymntFeesSrchFor").val();
    var srchIn = typeof $("#allLatePymntFeesSrchIn").val() === 'undefined' ? 'Both' : $("#allLatePymntFeesSrchIn").val();
    var pageNo = typeof $("#allLatePymntFeesPageNo").val() === 'undefined' ? 1 : $("#allLatePymntFeesPageNo").val();
    var limitSze = typeof $("#allLatePymntFeesDsplySze").val() === 'undefined' ? 10 : $("#allLatePymntFeesDsplySze").val();
    var sortBy = typeof $("#allLatePymntFeesSortBy").val() === 'undefined' ? '' : $("#allLatePymntFeesSortBy").val();
    var isEnabled = typeof $("#allLatePymntFeesIsEnabled").val() === 'undefined' ? '' : $("#allLatePymntFeesIsEnabled").val();
    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy + "&isEnabled=" + isEnabled
    openATab(slctr, linkArgs);
}

function enterKeyFuncAllLatePymntFees(e, actionText, slctr, linkArgs)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAllLatePymntFees(actionText, slctr, linkArgs);
    }
}

function deleteCrdtPrdt(prdtID)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this product?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        if (data == "SORRY") {
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: "Failed to Delete Credit Product.</br>Credit Product is in Use.",
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                            return false;
                        } else if (data == "SORRY1") {
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: "Failed to Delete Credit Product.</br>Only Credit Products with statuses 'Incomplete','Rejected' or 'Withdrawn' can be deleted.",
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                            return false;
                        }

                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        getSvngsPrdtData('', '#allmodules', 'grp=17&typ=1&pg=7&subPgNo=7.2');
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=12&subPgNo=7.2&q=DELETE&prdtID=" + prdtID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function delPrcsnFee(rowIDAttrb, isApproved)
{
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    var FeeNm = '';
    var sbmtdPrdtID = typeof $("#sbmtdPrdtID").val() === 'undefined' ? '-1' : $("#sbmtdPrdtID").val();
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();    
    if (typeof $('#allPrcsnFeesRow' + rndmNum + '_LoanPrdtID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#allPrcsnFeesRow' + rndmNum + '_LoanprdtPrcssnFeeID').val();
        FeeNm = $('#allPrcsnFeesRow' + rndmNum + '_FeeNm').val();
    }
    var dialog = bootbox.confirm({
        title: 'Remove Person?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">REMOVE</span> this Processing Fee?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Remove Processing Fee?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Removing Processing Fee...Please Wait...</p>',
                    callback: function () {
                        getAllPrcsnFees('', '#allPrcsnFeesDetailInfo', 'grp=17&typ=1&pg=12&subPgNo=7.21&vtypActn=EDIT&prdtID=' + sbmtdPrdtID
                                + "&rvsnTtl="+rvsnTtl);
                        //getAllRiskProfiles('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3");
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 12,
                                    q: 'DELETE',
                                    subPgNo: 7.2,
                                    actyp: 1,
                                    FeeNm: FeeNm,
                                    PKeyID: pKeyID,
                                    sbmtdPrdtID: sbmtdPrdtID,
                                    rvsnTtl: rvsnTtl,
                                    isApproved: isApproved
                                },
                                success: function (result1) {

                                    setTimeout(function () {
                                        if (result1 == "SORRY") {
                                            result1 = "Failed to Delete Processing Fee record.</br>Processing Fee Record is in Use."
                                        } else if (result1 == "SORRY1") {
                                            result1 = "Failed to Delete Processing Fee record.</br>Only Processing Fees for Credit Products with statuses 'Incomplete','Rejected' or 'Withdrawn' can be deleted."
                                        }
                                        dialog1.find('.bootbox-body').html(result1);
                                        if (result1.indexOf("Success") !== -1) {
                                            $("#" + rowIDAttrb).remove();
                                        }
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            $("#" + rowIDAttrb).remove();
                            dialog1.find('.bootbox-body').html('Row Removed Successfully!');
                        }, 500);
                    }
                });
            }
        }
    });
}

function delLatePymntFee(rowIDAttrb, isApproved)
{
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    var FeeNm = '';
    var sbmtdPrdtID = typeof $("#sbmtdPrdtID").val() === 'undefined' ? '-1' : $("#sbmtdPrdtID").val();
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
    if (typeof $('#allLatePymntFeesRow' + rndmNum + '_LoanPrdtID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#allLatePymntFeesRow' + rndmNum + '_LoanprdtLateFeeID').val();
        FeeNm = $('#allLatePymntFeesRow' + rndmNum + '_FeeNm').val();
    }
    var dialog = bootbox.confirm({
        title: 'Remove Person?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">REMOVE</span> this Late Payment Fee?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Remove Late Payment Fee?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Removing Late Payment Fee...Please Wait...</p>',
                    callback: function () {
                        getAllPrcsnFees('', '#allLatePymntFeesDetailInfo', 'grp=17&typ=1&pg=12&subPgNo=7.22&vtypActn=EDIT&prdtID=' + sbmtdPrdtID
                                + "&rvsnTtl="+rvsnTtl);
                        //getAllRiskProfiles('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.6&subVwtyp=3");
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 12,
                                    q: 'DELETE',
                                    subPgNo: 7.2,
                                    actyp: 2,
                                    FeeNm: FeeNm,
                                    PKeyID: pKeyID,
                                    sbmtdPrdtID: sbmtdPrdtID,
                                    rvsnTtl: rvsnTtl,
                                    isApproved: isApproved
                                },
                                success: function (result1) {

                                    setTimeout(function () {
                                        if (result1 == "SORRY") {
                                            result1 = "Failed to Delete Late Payment Fee record.</br>Late Payment Fee Record is in Use."
                                        } else if (result1 == "SORRY1") {
                                            result1 = "Failed to Delete Late Payment Fee record.</br>Only Late Payment Fees for Credit Products with statuses 'Incomplete','Rejected' or 'Withdrawn' can be deleted."
                                        }
                                        dialog1.find('.bootbox-body').html(result1);
                                        if (result1.indexOf("Success") !== -1) {
                                            $("#" + rowIDAttrb).remove();
                                        }
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            $("#" + rowIDAttrb).remove();
                            dialog1.find('.bootbox-body').html('Row Removed Successfully!');
                        }, 500);
                    }
                });
            }
        }
    });
}

function getInvestmentsForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, rowID, callBackFunc)
{
    $('#allOtherInputData99').val(0);
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }

    $("#tblRowID").val(rowID);
    if (!$.fn.DataTable.isDataTable('#indCustTable')) {
        var table1 = $('#indCustTable').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#indCustTable tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table1.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
        $('#indCustTable tbody').on('mouseenter', 'tr', function () {
            if ($(this).hasClass('highlight')) {
                $(this).removeClass('highlight');
            } else {
                table1.$('tr.highlight').removeClass('highlight');
                $(this).addClass('highlight');
            }
        });
    }
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            $('#' + titleElementID).html(formTitle);
            $('#' + modalBodyID).html(xmlhttp.responseText);
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                if(vtypActn !== "VIEW"){
                    getCustData('', '#allmodules', 'grp=17&typ=1&pg=5&subPgNo=' + subPgNo, 'invstmnts');
                    $('#' + titleElementID).html('');
                    $('#' + modalBodyID).html('');
                }
                $(e.currentTarget).unbind();
            });
            /*$('.modal-content').resizable({
             //alsoResize: ".modal-dialog",
             minHeight: 600,
             minWidth: 300
             });*/
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).off('show.bs.modal');
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + formElementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/
                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&invstmntID=" + pKeyID);
}

function onClickInvstmntProduct(pgNo, subPgNo) {
    var invstmntTypSltd = $("#invstmntType option:selected").val();
    var lovNm = "MCF Investment Products";
    if (invstmntTypSltd !== "") {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'invstmntType', '', 'radio', true, '', 'prdtTypeID', 'prdtType', 'clear', 1, '', function () {
            getInvstmntPrdtDetsForApplctn(pgNo, subPgNo);
        });
    } else {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please Select Investment Type first!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

}

function getInvstmntPrdtDetsForApplctn(pgNo, subPgNo)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var json;
        var prdtTypeID = typeof $("#prdtTypeID").val() === 'undefined' ? -1 : $("#prdtTypeID").val();
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', 4);
        formData.append('PKeyID', prdtTypeID);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    json = $.parseJSON(data);
                    $("#crncyIsoCode").text(json.invstmntPrdtDetArry.crncyIsoCode);
                    $("#currencyId").val(json.invstmntPrdtDetArry.currencyId);
                    $("#intRate").val(json.invstmntPrdtDetArry.interestRate);
                    $("#invstmntTenor").val(json.invstmntPrdtDetArry.invstmntDurationNo);
                    $("#invstmntTenorType").val(json.invstmntPrdtDetArry.invstmntDurationType);
                    $("#dscntRate").val(json.invstmntPrdtDetArry.discountRate);
                    $("#invstmntMaxAmount").val(json.invstmntPrdtDetArry.invstmntMaxAmount);
                    $("#invstmntMinAmount").val(json.invstmntPrdtDetArry.invstmntMinAmount);
                    if (json.invstmntPrdtDetArry.invstmntType == "Treasury Bill") {
                        $("#rateType").val("Discount");
                        $("#interestRate").val(json.invstmntPrdtDetArry.discountRate);
                        $("#startDate").val(getNextMondayTbill());
                        $("#mtrtyDate").val(getMaturityDate(getNextMondayTbill(), parseFloat(json.invstmntPrdtDetArry.invstmntDurationNo)));
                        $("#invstmntTenorType").attr("disabled", true);
                        $("#invstmntTenor").attr("readonly", "readonly");
                        $("#rateType").attr("disabled", false);
                    } else {
                        $("#rateType").val("Interest");
                        $("#interestRate").val(json.invstmntPrdtDetArry.interestRate);
                        $("#startDate").val(getNextWkDayFxdDpst());
                        $("#mtrtyDate").val(getMaturityDate(getNextWkDayFxdDpst(), parseFloat(json.invstmntPrdtDetArry.invstmntDurationNo)));
                        $("#invstmntTenorType").attr("disabled", true);
                        $("#rateType").attr("disabled", true);
                    }

                } else {
                    alert(data);
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function getInvstmntMaturityDate() {
    var invstmntType = typeof $("#invstmntType").val() === 'undefined' ? 'Treasury Bill' : $("#invstmntType").val();
    var invstmntTenor = typeof $("#invstmntTenor").val() === 'undefined' ? 0 : $("#invstmntTenor").val();
    if (invstmntType == "Treasury Bill") {
        $("#mtrtyDate").val(getMaturityDate(getNextMondayTbill($("#startDate").val()), parseFloat(invstmntTenor)));
    } else {
        $("#mtrtyDate").val(getMaturityDate(getNextWkDayFxdDpst($("#startDate").val()), parseFloat(invstmntTenor)));
    }
}

function onClickInvstmntPrdtCust(nm) {

    var custTypSltd = $("#custType option:selected").val();
    var lovNm = "All Bank Customers - Investment";
    if (custTypSltd === "Group") {
        lovNm = "MCF Corporate/Group Customers";
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custType', '', 'radio', true, '', 'bnkCustomerID', 'bnkCustomer', 'clear', 1, '');
    } else {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'custType', '', 'radio', true, '', 'bnkCustomerID', 'bnkCustomer', 'clear', 1, '');
    }

}

function onChangeShdRollover() {
    var shdRollover = typeof $("#shdRollover").val() === 'undefined' ? '' : $("#shdRollover").val();
    if (shdRollover == "No") {
        $("#rolloverType").attr("disabled", true);
        $("#rolloverType").val("");
    } else {
        $("#rolloverType").attr("disabled", false);
        $("#rolloverType").val("Principal Only");
    }
}

function onChangePymntMtd() {
    var pymntMthod = $("#pymntMthod option:selected").val();
    if (pymntMthod == "Debit Account") {
        $("#rpmntSrcAcctDiv").css("display", "none");
//        $("#rolloverTypeID").val(-1);
//        $("#rolloverType").val("");
        $("#pymntMtdSrcID").val(-1);
        $("#pymntMtdSrc").val("");
        $("#src_id").text("Account No.:");        
    } else {
        $("#rpmntSrcAcctDiv").css("display", "table-cell");
        $("#pymntMtdSrcID").val(-1);
        $("#pymntMtdSrc").val("");
        $("#src_id").text("Document No.:");        
    }
      
}

function onClickPymntMtdSrc() {

    var pymntMthod = $("#pymntMthod option:selected").val();
    var lovNm = "MCF Investment Account Deposits";
    if (pymntMthod === "Debit Account") {
        lovNm = "MCF Customer Bank Accounts - (For Investment)";
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'bnkCustomerID', '', 'radio', true, '', 'pymntMtdSrcID', 'pymntMtdSrc', 'clear', 1, '');
    } else {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'bnkCustomerID', '', 'radio', true, '', 'pymntMtdSrcID', 'pymntMtdSrc', 'clear', 1, '');
    }
}

function onChangeBckPayMtd() {
    var payBckMthod = $("#payBckMthod option:selected").val();
    if (payBckMthod == "Credit Account") {
        $("#paybackAcctID").val(-1);
        $("#paybackAcct").val("");
        $("#crdtAcctChqNoDiv").css("display", "none");
        $("#crdtAcctNoDiv").css("display", "block");
    } else {
        $("#paybackAcctID").val(-1);
        $("#paybackAcct").val("");
        $("#crdtAcctChqNoDiv").css("display", "block");
        $("#crdtAcctNoDiv").css("display", "none");
    }
}

function saveInvstmntApplication(optn)
{

    if (optn == 1) {
        var prcsRslt = processInvstmnt();
        if (!prcsRslt) {
            return false;
        }
    }

    var box;
    var box2;
    var actnMsg = "Saving";
    var rtnMsg = "Saved";
    if(optn == 1){
        actnMsg = "Submitting for Authorization";
        rtnMsg = "Submitted";
    }

    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var invstmntID = typeof $("#invstmntID").val() === 'undefined' ? -1 : $("#invstmntID").val();
        var applctnDate = typeof $("#applctnDate").val() === 'undefined' ? '' : $("#applctnDate").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
        var invstmntOfficerID = typeof $("#invstmntOfficerID").val() === 'undefined' ? -1 : $("#invstmntOfficerID").val();
        var custType = typeof $("#custType").val() === 'undefined' ? '' : $("#custType").val();
        var bnkCustomerID = typeof $("#bnkCustomerID").val() === 'undefined' ? -1 : $("#bnkCustomerID").val();
        var invstmntType = typeof $("#invstmntType").val() === 'undefined' ? '' : $("#invstmntType").val();
        var prdtTypeID = typeof $("#prdtTypeID").val() === 'undefined' ? -1 : $("#prdtTypeID").val();
        var invstmntAmount = typeof $("#invstmntAmount").val() === 'undefined' ? -1 : $("#invstmntAmount").val().trim().length === 0 ? 0 : $("#invstmntAmount").val();
        var invstmntTenor = typeof $("#invstmntTenor").val() === 'undefined' ? -1 : $("#invstmntTenor").val().trim().length === 0 ? 0 : $("#invstmntTenor").val();
        var invstmntTenorType = typeof $("#invstmntTenorType").val() === 'undefined' ? '' : $("#invstmntTenorType").val();
        var interestRate = typeof $("#interestRate").val() === 'undefined' ? -1 : $("#interestRate").val();
        var startDate = typeof $("#startDate").val() === 'undefined' ? '' : $("#startDate").val();
        var mtrtyDate = typeof $("#mtrtyDate").val() === 'undefined' ? '' : $("#mtrtyDate").val();
        var mtrtyValue = typeof $("#mtrtyValue").val() === 'undefined' ? '' : $("#mtrtyValue").val();
        var shdRollover = typeof $("#shdRollover").val() === 'undefined' ? 'No' : $("#shdRollover").val();
        var rolloverType = typeof $("#rolloverType").val() === 'undefined' ? '' : $("#rolloverType").val();
        var pymntMthod = typeof $("#pymntMthod").val() === 'undefined' ? '' : $("#pymntMthod").val();
        var pymntMtdSrcID = typeof $("#pymntMtdSrcID").val() === 'undefined' ? -1 : $("#pymntMtdSrcID").val();
        var benfName = typeof $("#benfName").val() === 'undefined' ? '' : $("#benfName").val();
        var benfCntct = typeof $("#benfCntct").val() === 'undefined' ? '' : $("#benfCntct").val();
        var payBckMthod = typeof $("#payBckMthod").val() === 'undefined' ? '' : $("#payBckMthod").val();
        var paybackAcctID = typeof $("#paybackAcctID").val() === 'undefined' ? -1 : $("#paybackAcctID").val();
        var chqNo = typeof $("#chqNo").val() === 'undefined' ? '' : $("#chqNo").val();
        var currencyId = typeof $("#currencyId").val() === 'undefined' ? -1 : $("#currencyId").val();
        var invstmntMinAmount = typeof $("#invstmntMinAmount").val() === 'undefined' ? 0 : $("#invstmntMinAmount").val();
        var invstmntMaxAmount = typeof $("#invstmntMaxAmount").val() === 'undefined' ? 0 : $("#invstmntMaxAmount").val();
        var srcLbl = typeof $("#src_id").text() === 'undefined' ? "" : $("#src_id").text();
        var acctNumber = typeof $("#acctNumber").val() === 'undefined' ? '' : $("#acctNumber").val();
        var rateType = typeof $("#rateType").val() === 'undefined' ? '' : $("#rateType").val();
        var rslt = validateInvstmntApplctnForm(optn, applctnDate, bnkBranchID, invstmntOfficerID, custType, bnkCustomerID, invstmntType,
                prdtTypeID, invstmntAmount, invstmntMaxAmount, invstmntMinAmount, invstmntTenor, invstmntTenorType, interestRate,
                startDate, mtrtyDate, mtrtyValue, shdRollover, rolloverType, pymntMthod, pymntMtdSrcID, srcLbl, payBckMthod, paybackAcctID,
                acctNumber);
        if (!rslt) {
            return false;
        }
        

        if(optn == 1 && invstmntType == "Fixed Deposit" && pymntMthod == "Cash/Cheque Payment" && parseInt(pymntMtdSrcID) <= 0){
            $body.removeClass("mdlloading");
            $body.removeClass("mdlloadingDiag");
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "<span style='color:red;font-weight:bold !important;'>Failed to submit Investment for Authorization</br>Please capture a Cash/Cheque payment document first!<br/></span>",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }

        $body.removeClass("mdlloading");
        $body.removeClass("mdlloadingDiag");
        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> '+actnMsg+'.... Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', 25);
        formData.append('subPgNo', 5.2);
        formData.append('vtyp', 0);
        formData.append('actyp', 1);
        formData.append('invstmntID', invstmntID);
        formData.append('applctnDate', applctnDate);
        formData.append('bnkBranchID', bnkBranchID);
        formData.append('invstmntOfficerID', invstmntOfficerID);
        formData.append('custType', custType);
        formData.append('bnkCustomerID', bnkCustomerID);
        formData.append('invstmntType', invstmntType);
        formData.append('mtrtyValue', mtrtyValue.replace(/[^-?0-9\.]/g, ''));
        formData.append('prdtTypeID', prdtTypeID);
        formData.append('invstmntAmount', invstmntAmount);
        formData.append('invstmntTenor', invstmntTenor);
        formData.append('invstmntTenorType', invstmntTenorType);
        formData.append('interestRate', interestRate);
        formData.append('startDate', startDate);
        formData.append('mtrtyDate', mtrtyDate);
        formData.append('shdRollover', shdRollover);
        formData.append('rolloverType', rolloverType);
        formData.append('pymntMthod', pymntMthod);
        formData.append('pymntMtdSrcID', pymntMtdSrcID);
        formData.append('benfName', benfName);
        formData.append('benfCntct', benfCntct);
        formData.append('payBckMthod', payBckMthod);
        formData.append('paybackAcctID', paybackAcctID);
        formData.append('chqNo', chqNo);
        formData.append('currencyId', currencyId);
        formData.append('optn', optn);
        formData.append('rateType', rateType);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                //$body.removeClass("mdlloadingDiag");
                //$body.removeClass("mdlloading");

                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    $("#invstmntID").val(obj.invstmntID);
                    box.modal('hide');
                    getInvestmentsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Investment', 25, 5.2, 0, 'EDIT', obj.invstmntID, 'indCustTableRow1', function () {
                        msg = "Investment Successfully "+rtnMsg+"!";
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                            }
                        });
                    });
                } else {

                    msg = data;
                    box.modal('hide');
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function validateInvstmntApplctnForm(optn, applctnDate, bnkBranchID, invstmntOfficerID, custType, bnkCustomerID, invstmntType,
        prdtTypeID, invstmntAmount, invstmntMaxAmount, invstmntMinAmount, invstmntTenor, invstmntTenorType, interestRate,
        startDate, mtrtyDate, mtrtyValue, shdRollover, rolloverType, pymntMthod, pymntMtdSrcID, srcLbl, payBckMthod, paybackAcctID,
        acctNumber) {

    var cnta = 0;
    var p_applctnDate;
    var pday_SD;
    var pmonth_SD;
    var pyear_SD;
    var today = new Date();
    var pday_TD = today.getDate();
    var pmonth_TD = today.getMonth() + 1;
    var pyear_TD = today.getFullYear();
    var msgDsply = "";
    var msgDsplyHdr = "<span style='font-weight: bold !important;'>The following is/are required:</span></br>";
    if (applctnDate != "") {
        p_applctnDate = new Date(applctnDate);
        pday_SD = p_applctnDate.getDate();
        pmonth_SD = p_applctnDate.getMonth() + 1;
        pyear_SD = p_applctnDate.getFullYear();
    }

    if (applctnDate == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#applctnDate").css('border-color', 'red');
        $("#applctnDate").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Application Date</b></br>";
        cnta = cnta + 1;
    } else {
        if (pyear_TD + "-" + pmonth_TD + "-" + pday_TD < pyear_SD + "-" + pmonth_SD + "-" + pday_SD) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $("#applctnDate").css('border-color', 'red');
            $("#applctnDate").css('border-width', '2px');
            msgDsply = msgDsply + "<b>Application Date must be a valid Date which is not greater than today</b></br>";
            cnta = cnta + 1;
        } else {
            $("#applctnDate").css('border-color', '#ccc');
            $("#applctnDate").css('border-width', '1px');
        }
    }

    if (bnkBranchID == "" || bnkBranchID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#bnkBranch").css('border-color', 'red');
        $("#bnkBranch").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Branch</b></br>";
        cnta = cnta + 1;
    } else {
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
    }

    if (invstmntOfficerID == "" || invstmntOfficerID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#invstmntOfficer").css('border-color', 'red');
        $("#invstmntOfficer").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Investment Officer</b></br>";
        cnta = cnta + 1;
    } else {
        $("#invstmntOfficer").css('border-color', '#ccc');
        $("#invstmntOfficer").css('border-width', '1px');
    }

    if (bnkCustomerID == "" || bnkCustomerID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#bnkCustomer").css('border-color', 'red');
        $("#bnkCustomer").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Customer Name</b></br>";
        cnta = cnta + 1;
    } else {
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
    }

    if (prdtTypeID == "" || prdtTypeID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#prdtType").css('border-color', 'red');
        $("#prdtType").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Investment Product</b></br>";
        cnta = cnta + 1;
    } else {
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
    }

    if (invstmntAmount == "" || invstmntAmount <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#invstmntAmount").css('border-color', 'red');
        $("#invstmntAmount").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Investment Amount must be greater than zero</b></br>";
        cnta = cnta + 1;
    } else {
        if (parseFloat(invstmntAmount) > parseFloat(invstmntMaxAmount)) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $("#invstmntAmount").css('border-color', 'red');
            $("#invstmntAmount").css('border-width', '2px');
            msgDsply = msgDsply + "<b>Maximum applicable Investment Amount is " + formatAsMoney(invstmntMaxAmount) + "</b></br>";
            cnta = cnta + 1;
        } else {
            if (parseFloat(invstmntAmount) < parseFloat(invstmntMinAmount)) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                $("#invstmntAmount").css('border-color', 'red');
                $("#invstmntAmount").css('border-width', '2px');
                msgDsply = msgDsply + "<b>Mimimum applicable loan amount is " + formatAsMoney(invstmntMinAmount) + "</b></br>";
                cnta = cnta + 1;
            } else {
                $("#invstmntAmount").css('border-color', '#ccc');
                $("#invstmntAmount").css('border-width', '1px');
            }
        }
    }


    if (invstmntTenor == "" || Number(invstmntTenor) <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#invstmntTenor").css('border-color', 'red');
        $("#invstmntTenor").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Investment Tenure must be greater than zero</b></br>";
        cnta = cnta + 1;
    } else {
        $("#invstmntTenor").css('border-color', '#ccc');
        $("#invstmntTenor").css('border-width', '1px');
    }

    if (interestRate == "" || interestRate < 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#interestRate").css('border-color', 'red');
        $("#interestRate").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Interest Rate must be greater than zero</b></br>";
        cnta = cnta + 1;
    } else {
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');
    }

    if (startDate == "" || startDate == undefined) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#startDate").css('border-color', 'red');
        $("#startDate").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Start Date</b></br>";
        cnta = cnta + 1;
    } else {
        $("#startDate").css('border-color', '#ccc');
        $("#startDate").css('border-width', '1px');
    }

    if (mtrtyDate == "" || mtrtyDate == undefined) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#mtrtyDate").css('border-color', 'red');
        $("#mtrtyDate").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Maturity Date</b></br>";
        cnta = cnta + 1;
    } else {
        $("#mtrtyDate").css('border-color', '#ccc');
        $("#mtrtyDate").css('border-width', '1px');
    }

    if (mtrtyValue == "" || mtrtyValue == undefined) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#mtrtyValue").css('border-color', 'red');
        $("#mtrtyValue").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Maturity Value</b></br>";
        cnta = cnta + 1;
    } else {
        $("#mtrtyValue").css('border-color', '#ccc');
        $("#mtrtyValue").css('border-width', '1px');
    }

    if (shdRollover == "Yes" && (rolloverType == "" || rolloverType == undefined)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#rolloverType").css('border-color', 'red');
        $("#rolloverType").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Rollover Type</b></br>";
        cnta = cnta + 1;
    } else {
        $("#rolloverType").css('border-color', '#ccc');
        $("#rolloverType").css('border-width', '1px');
    }

    if ((optn == 1 && (pymntMtdSrcID == "" || pymntMtdSrcID == -1)) || (pymntMthod == "Debit Account" && (pymntMtdSrcID == "" || pymntMtdSrcID == -1))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#pymntMtdSrc").css('border-color', 'red');
        $("#pymntMtdSrc").css('border-width', '2px');
        msgDsply = msgDsply + "<b>" + srcLbl + "</b></br>";
        cnta = cnta + 1;
    } else {
        $("#pymntMtdSrc").css('border-color', '#ccc');
        $("#pymntMtdSrc").css('border-width', '1px');
    }

    if (optn == 1 && (acctNumber == "" || acctNumber == undefined)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#acctNumber").css('border-color', 'red');
        $("#acctNumber").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Investment Account No.</b></br>";
        cnta = cnta + 1;
    } else {
        $("#acctNumber").css('border-color', '#ccc');
        $("#acctNumber").css('border-width', '1px');
    }

    if (payBckMthod == "Credit Account" && (paybackAcctID == "" || paybackAcctID <= 0)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#paybackAcct").css('border-color', 'red');
        $("#paybackAcct").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Credit Account Number</b></br>";
        cnta = cnta + 1;
    } else {
        $("#paybackAcct").css('border-color', '#ccc');
        $("#paybackAcct").css('border-width', '1px');
    }

    if (cnta > 0) {
        bootbox.alert({
            size: "small",
            title: "Validation Errors",
            message: msgDsplyHdr + "<span style='color:red; font-weight:bold !important;'>" + msgDsply + "</span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#invstmntOfficer").css('border-color', '#ccc');
        $("#invstmntOfficer").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#invstmntAmount").css('border-color', '#ccc');
        $("#invstmntAmount").css('border-width', '1px');
        $("#invstmntTenor").css('border-color', '#ccc');
        $("#invstmntTenor").css('border-width', '1px');
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');
        $("#startDate").css('border-color', '#ccc');
        $("#startDate").css('border-width', '1px');
        $("#mtrtyDate").css('border-color', '#ccc');
        $("#mtrtyDate").css('border-width', '1px');
        $("#rolloverType").css('border-color', '#ccc');
        $("#rolloverType").css('border-width', '1px');
        $("#pymntMtdSrc").css('border-color', '#ccc');
        $("#pymntMtdSrc").css('border-width', '1px');
        $("#payBckMthod").css('border-color', '#ccc');
        $("#payBckMthod").css('border-width', '1px');
        return true;
    }
}

function onChangeRateType() {
    var rateType = typeof $("#rateType").val() === 'undefined' ? '' : $("#rateType").val();
    if (rateType == "Interest") {
        $("#interestRate").val($("#intRate").val());
    } else {
        $("#interestRate").val($("#dscntRate").val());
    }
    calcMaturityValue();
}

function onChangeInvstmntType() {
    var invstmntType = typeof $("#invstmntType").val() === 'undefined' ? '' : $("#invstmntType").val();
    if (invstmntType == 'Treasury Bill') {
        $("#rateType").val("Discount");
        $("#interestRate").val("");
        $("#prdtType").val("");
        $("#prdtTypeID").val(-1);
        $("#invstmntTenor").val("");
        $("#invstmntTenorType").val("Day");
        $("#startDate").val("");
        $("#mtrtyDate").val("");
        $("#mtrtyValue").val("");
        $("#pymntMthod").val("Debit Account");
        $("#pymntMthod").attr("disabled", true);
        $("#rateType").attr("disabled", false);
    } else {
        $("#rateType").val("Interest");
        $("#interestRate").val("");
        $("#prdtType").val("");
        $("#prdtTypeID").val(-1);
        $("#invstmntTenor").val("");
        $("#invstmntTenorType").val("Day");
        $("#startDate").val("");
        $("#mtrtyDate").val("");
        $("#mtrtyValue").val("");
        $("#pymntMthod").attr("disabled", false);
        $("#rateType").attr("disabled", true);
    }
}

function getNextMondayTbill(sDate) {
    var today = new Date(sDate);
    if (sDate == "" || sDate == undefined) {
        today = new Date();
    }
//var today = new Date();
    var pMnth = "";
    var month = new Array(12);
    month[0] = "Jan";
    month[1] = "Feb";
    month[2] = "Mar";
    month[3] = "Apr";
    month[4] = "May";
    month[5] = "Jun";
    month[6] = "Jul";
    month[7] = "Aug";
    month[8] = "Sep";
    month[9] = "Oct";
    month[10] = "Nov";
    month[11] = "Dec";
    var diff = today.getDate() + (1 + 7 - today.getDay()) % 7;
    today.setDate(diff);
    var pday_TD = today.getDate();
    var pmonth_TD = today.getMonth() + 1;
    var pyear_TD = today.getFullYear();
    for (i = 0; i < 12; i++) {
        if (pmonth_TD == i + 1) {
            pMnth = month[i];
            break;
        }
    }

    return pday_TD + "-" + pMnth + "-" + pyear_TD;
}

function getNextWkDayFxdDpst(sDate) {
    var pMnth = "";
    var month = new Array(12);
    month[0] = "Jan";
    month[1] = "Feb";
    month[2] = "Mar";
    month[3] = "Apr";
    month[4] = "May";
    month[5] = "Jun";
    month[6] = "Jul";
    month[7] = "Aug";
    month[8] = "Sep";
    month[9] = "Oct";
    month[10] = "Nov";
    month[11] = "Dec";
    var today = new Date(sDate);
    if (sDate == "" || sDate == undefined) {
        today = new Date();
    }
    var day = today.getDay(), add = 0;
    if (day === 6)
        add = 2;
    else if (day === 7)
        add = 1;
    today.setDate(today.getDate() + add);
    var pday_TD = today.getDate();
    var pmonth_TD = today.getMonth() + 1;
    var pyear_TD = today.getFullYear();
    for (i = 0; i < 12; i++) {
        if (pmonth_TD == i + 1) {
            pMnth = month[i];
            break;
        }
    }

    return pday_TD + "-" + pMnth + "-" + pyear_TD;
}

function getMaturityDate(startDate, nDays) {
    var sDate = new Date(startDate);
    var pMnth = "";
    var month = new Array(12);
    month[0] = "Jan";
    month[1] = "Feb";
    month[2] = "Mar";
    month[3] = "Apr";
    month[4] = "May";
    month[5] = "Jun";
    month[6] = "Jul";
    month[7] = "Aug";
    month[8] = "Sep";
    month[9] = "Oct";
    month[10] = "Nov";
    month[11] = "Dec";
    var diff = sDate.getDate() + nDays;
    sDate.setDate(diff);
    var pday_TD = sDate.getDate();
    var pmonth_TD = sDate.getMonth() + 1;
    var pyear_TD = sDate.getFullYear();
    for (i = 0; i < 12; i++) {
        if (pmonth_TD == (i + 1)) {
            pMnth = month[i];
            break;
        }
    }

    return pday_TD + "-" + pMnth + "-" + pyear_TD;
}

function computeMaturity(pCost, pRate, pTime) {
    var cost2 = pCost; //form.cost2.value;
    var rate2 = pRate; //form.rt2.value;
    var time2 = pTime; //form.term2.value;

    //cost2=cost2.replace(/,/g, "");
    //rate2=rate2.replace(/,/g, "");
    //time2=time2.replace(/,/g, "");

    if (isNumber(cost2) == false)
    {
        alert("Maturity Value must be a Valid Number!");
        return false;
    }
    if (isNumber(rate2) == false)
    {
        alert("Rate must be a Valid Number!");
        return false;
    }
    if (isNumber(time2) == false)
    {
        alert("Time must be a Valid Number!");
        return false;
    }
    rate2 = rate2 / 100.00;
    /*var mv2 = (( cost2 * (365 + (rate2 * time2))) / (365 + ( 0.2 * (rate2 * time2))));*/
    //var mv2 = cost2 / (1.00 - ((rate2 * time2) / 364.00)) OLD27022021
    var mv2 = cost2 * ((rate2 * time2) / 365.00);
    //form.mv2.value = eval(parseFloat(mv2 * 100.00) * .01);

    //eval(parseFloat(mv2 * 100.00) * .01) + cost2; OLD27022021
    return eval((parseFloat(mv2 * 100.00) * .01) + parseFloat(cost2)); 
}

function computeCost(pMaturity, pRate, pTime) {
    var maturity = pMaturity; //form2.mv.value;
    var rate = pRate; //form2.rt.value;
    var time = pTime; //form2.term.value;

    //maturity=maturity.replace(/,/g, "");
    //rate=rate.replace(/,/g, "");
    //time=time.replace(/,/g, "");

    if (isNumber(maturity) == false)
    {
        alert("Maturity Value must be a Valid Number!");
        return false;
    }
    if (isNumber(rate) == false)
    {
        alert("Rate must be a Valid Number!");
        return false;
    }
    if (isNumber(time) == false)
    {
        alert("Time must be a Valid Number!");
        return false;
    }
    rate = rate / 100.00;
    //var cost = maturity * (1 - ((rate * time) / 364.00)); OLD27022021
    var cost = maturity / (((rate * time) / 365.00) + 1);
    /*var cost = (( maturity * (365 + ( 0.2 * (rate * time)))) / (365 + (rate * time)));*/

    //form2.cost.value = eval(parseFloat(cost * 100.00) * .01);
    return eval(parseFloat(cost * 100.00) * .01);
}

function isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}

function calcMaturityValue() {
    var pCost = typeof $("#invstmntAmount").val() === 'undefined' ? 0 : $("#invstmntAmount").val().trim().length === 0 ? 0 : $("#invstmntAmount").val();
    var pRate = typeof $("#interestRate").val() === 'undefined' ? 0 : $("#interestRate").val().trim().length === 0 ? 0 : $("#interestRate").val();
    var pTime = typeof $("#invstmntTenor").val() === 'undefined' ? 0 : $("#invstmntTenor").val().trim().length === 0 ? 0 : $("#invstmntTenor").val();
    if (isNumber(pCost) == false)
    {
        bootbox.alert({
            size: "small",
            title: "Investment Amount",
            message: "Amount must be a Valid Number",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
    if (isNumber(pRate) == false)
    {
        bootbox.alert({
            size: "small",
            title: "Rate",
            message: "Rate must be a Valid Number",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
    if (isNumber(pTime) == false)
    {
        bootbox.alert({
            size: "small",
            title: "Tenure",
            message: "Time must be a Valid Number",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    var pMatVal = computeMaturity(pCost, pRate, pTime);
    $("#mtrtyValue").val(formatAsMoney(pMatVal));
    $("#ttlInterest").val(formatAsMoney(pMatVal - pCost));
    return true;
}

function processInvstmnt() {
    if ($("#invstmntAmount").val() == "" || $("#invstmntAmount").val() == undefined) {
        bootbox.alert({
            size: "small",
            title: "Investment Amount",
            message: "Amount must be a Valid Number",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
    if ($("#interestRate").val() == "" || $("#interestRate").val() == undefined) {
        bootbox.alert({
            size: "small",
            title: "Rate",
            message: "Rate must be a Valid Number",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
    if ($("#invstmntTenor").val() == "" || $("#invstmntTenor").val() == undefined) {
        bootbox.alert({
            size: "small",
            title: "Tenure",
            message: "Tenure must be a Valid Number",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }


    var rslt = calcMaturityValue();
    if (rslt) {
        getInvstmntMaturityDate();
    }

    return true;
}

function withdrawRejectApproveVoidActn(optn)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var msg;
        var invstmntID = typeof $("#invstmntID").val() === 'undefined' ? -1 : $("#invstmntID").val();
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        var prmtMsg = "Are you sure you want to APPROVE this Investment?";
        msg = "Investment APPROVED Successfully";
        if (optn == 0) {//WITHDRAW
            prmtMsg = "Are you sure you want to WITHDRAW this Investment?";
            msg = "Investment WITHDRAWN Successfully";
        } else if (optn == 1) {//REJECT
            prmtMsg = "Are you sure you want to REJECT this Investment?";
            msg = "Investment REJECTED Successfully";
        } else if (optn == 2) {//VOID
            prmtMsg = "Are you sure you want to VOID this Investment?";
            msg = "Investment VOIDED Successfully";
        }


        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', 25);
        formData.append('subPgNo', 5.2);
        formData.append('vtyp', 0);
        formData.append('actyp', 2);
        formData.append('invstmntID', invstmntID);
        formData.append('optn', optn);
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    $body = $("body");
                    $body.addClass("mdlloadingDiag");
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                var json = $.parseJSON(data);
                                getInvestmentsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Investment', 25, 5.2, 0, 'EDIT', invstmntID, 'indCustTableRow1', function () {

                                    box2 = bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: msg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });
                            } else {

                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: data,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }

                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function deleteInvestment(invstmntID)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Investment?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        if (data == "SORRY") {
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: "Failed to Delete Investment.</br>Only Investments with statuses 'Incomplete','Rejected' or 'Withdrawn' can be deleted.",
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                            return false;
                        }

                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=5&subPgNo=5.2', 'invstmnts')
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=25&subPgNo=5.2&q=DELETE&invstmntID=" + invstmntID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function getAccountCrncy(elementID, rowCnta)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        $body.addClass("mdlloadingDiag");
        var json;
        var acctID = typeof $("#" + elementID).val() === 'undefined' ? -1 : $("#" + elementID).val();
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', 13);
        formData.append('subPgNo', 2.1);
        formData.append('vtyp', 8);
        formData.append('acctID', acctID);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    json = $.parseJSON(data);
                    $("#allBranchPymntAcctsRow" + rowCnta + "_CurrencyID").val(json.currencyID);
                    $("#allBranchPymntAcctsRow" + rowCnta + "_CurrencyNm").val(json.currencyNm);
                } else {
                    alert(data);
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function saveBranchPymntAcct()
{
    var slctdBranchPymntAccts = "";
    var errCount = 0;
    var rcdCount = 0;
    $('#allBranchPymntAcctsTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#allBranchPymntAcctsRow' + rndmNum + '_BranchID').val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {
                    if ($('#allBranchPymntAcctsRow' + rndmNum + '_BranchID').val() == "" || $('#allBranchPymntAcctsRow' + rndmNum + '_BranchID').val() == -1) {
                        $('#allBranchPymntAcctsRow' + rndmNum + '_BranchNm').css('border-color', 'red');
                        $('#allBranchPymntAcctsRow' + rndmNum + '_BranchNm').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allBranchPymntAcctsRow' + rndmNum + '_BranchNm').css('border-color', '#ccc');
                        $('#allBranchPymntAcctsRow' + rndmNum + '_BranchNm').css('border-width', '1px');
                    }
                    if ($('#allBranchPymntAcctsRow' + rndmNum + '_AccountID').val() == "" || parseFloat($('#allBranchPymntAcctsRow' + rndmNum + '_AccountID').val()) < 0) {
                        $('#allBranchPymntAcctsRow' + rndmNum + '_AccountNm').css('border-color', 'red');
                        $('#allBranchPymntAcctsRow' + rndmNum + '_AccountNm').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allBranchPymntAcctsRow' + rndmNum + '_AccountNm').css('border-color', '#ccc');
                        $('#allBranchPymntAcctsRow' + rndmNum + '_AccountNm').css('border-width', '1px');
                    }
                    if ($('#allBranchPymntAcctsRow' + rndmNum + '_CurrencyID').val() == "" || parseFloat($('#allBranchPymntAcctsRow' + rndmNum + '_CurrencyID').val()) < 0) {
                        $('#allBranchPymntAcctsRow' + rndmNum + '_CurrencyNm').css('border-color', 'red');
                        $('#allBranchPymntAcctsRow' + rndmNum + '_CurrencyNm').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allBranchPymntAcctsRow' + rndmNum + '_CurrencyNm').css('border-color', '#ccc');
                        $('#allBranchPymntAcctsRow' + rndmNum + '_CurrencyNm').css('border-width', '1px');
                    }
                    if (errCount <= 0) {
                        slctdBranchPymntAccts = slctdBranchPymntAccts
                                + $('#allBranchPymntAcctsRow' + rndmNum + '_BrnchAcctRowID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allBranchPymntAcctsRow' + rndmNum + '_BranchID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allBranchPymntAcctsRow' + rndmNum + '_AccountID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allBranchPymntAcctsRow' + rndmNum + '_CurrencyID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allBranchPymntAcctsRow' + rndmNum + '_ProductType').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allBranchPymntAcctsRow' + rndmNum + '_IsEnabled').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                        rcdCount = rcdCount + 1;
                    }

                }
            }
        }
    });
    if (errCount > 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please enter data in all highlighted records</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount <= 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please provide at lease One record</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    var dialog = bootbox.alert({
        title: 'Save Records?',
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> Saving...Please Wait...</p>',
        callback: function () {
            getCustAcctsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Branch Payment Accounts', 13, 2.1, 7, 'ADD', -1);
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 13,
                    q: 'UPDATE',
                    subPgNo: 2.1,
                    vtyp: 7,
                    actyp: 1,
                    slctdBranchPymntAccts: slctdBranchPymntAccts
                },
                success: function (result) {
                    setTimeout(function () {
                        dialog.find('.bootbox-body').html(result);
                    }, 500);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function getAllBranchPymntAccts(actionText, slctr, linkArgs)
{
    var srchFor = typeof $("#allBranchPymntAcctsSrchFor").val() === 'undefined' ? '%' : $("#allBranchPymntAcctsSrchFor").val();
    var srchIn = typeof $("#allBranchPymntAcctsSrchIn").val() === 'undefined' ? 'Both' : $("#allBranchPymntAcctsSrchIn").val();
    var pageNo = typeof $("#allBranchPymntAcctsPageNo").val() === 'undefined' ? 1 : $("#allBranchPymntAcctsPageNo").val();
    var limitSze = typeof $("#allBranchPymntAcctsDsplySze").val() === 'undefined' ? 10 : $("#allBranchPymntAcctsDsplySze").val();
    var sortBy = typeof $("#allBranchPymntAcctsSortBy").val() === 'undefined' ? '' : $("#allBranchPymntAcctsSortBy").val();
    var isEnabled = $('#allBranchPymntAcctsIsEnabled:checked').length > 0;
    //var 
    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
        limitSze = 10;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy + "&pg=13&subPgNo=2.1&vtyp=7&isEnabled=" + isEnabled;
    doAjax(linkArgs, 'myFormsModalLg', 'ReloadDialog', 'Branch Payment Accountsss', 'myFormsModalTitleLg', 'myFormsModalBodyLg');
    //getCustAcctsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Branch Payment Accounts', 13, 2.1,7,'ADD', -1);      
    //openATab(slctr, linkArgs);
}

function enterKeyFuncAllBranchPymntAccts(e, actionText, slctr, linkArgs)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAllBranchPymntAccts(actionText, slctr, linkArgs);
    }
}

function delBranchPymntAcct(rowIDAttrb)
{
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    var AccountID = '';
    if (typeof $('#allBranchPymntAcctsRow' + rndmNum + '_BranchID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#allBranchPymntAcctsRow' + rndmNum + '_BrnchAcctRowID').val();
        AccountID = $('#allBranchPymntAcctsRow' + rndmNum + '_AccountID').val();
    }
    var dialog = bootbox.confirm({
        title: 'Remove Person?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">REMOVE</span> this record?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Remove Record?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Removing record...Please Wait...</p>',
                    callback: function () {
                        getCustAcctsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Branch Payment Accounts', 13, 2.1, 7, 'ADD', -1);
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 13,
                                    q: 'DELETE',
                                    subPgNo: 2.1,
                                    vtyp: 7,
                                    actyp: 1,
                                    AccountID: AccountID,
                                    PKeyID: pKeyID
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                        if (result1.indexOf("Success") !== -1) {
                                            $("#" + rowIDAttrb).remove();
                                        }
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            $("#" + rowIDAttrb).remove();
                            dialog1.find('.bootbox-body').html('Row Removed Successfully!');
                        }, 500);
                    }
                });
            }
        }
    });
}

function onSetCustLiabilityAcct(lbltyAcctElmnt, lbltyAcctElmntID) {
    var valElmnt = $('#' + lbltyAcctElmnt).val();
    var valElmntID = $('#' + lbltyAcctElmntID).val();
    //alert($('#'+lbltyAcctElmnt).val());
    //alert($('#'+lbltyAcctElmntID).val());

    getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'All Accounts', 'gnrlOrgID', '', '', 'radio', true, '', lbltyAcctElmntID, lbltyAcctElmnt, 'clear', 1, '', function () {
        $('#cashDepositCrdtAcc').val(valElmnt);
        $('#cashDepositCrdtAccID').val(valElmntID);
        $('#cashWtdwlDbtAcc').val(valElmnt);
        $('#cashWtdwlDbtAccID').val(valElmntID);
        $('#wtdwlPnltyFlatDbtAcc').val(valElmnt);
        $('#wtdwlPnltyFlatDbtAccID').val(valElmntID);
        $('#interesExpenseCrdtAcc').val(valElmnt);
        $('#interesExpenseCrdtAccID').val(valElmntID);
    });
}

var prgstimerid2;
function imprtPrsnlCstmrs()
{
    var dataToSend = "";
    var isFileValid = true;
    var dialog1 = bootbox.confirm({
        title: 'Import Customers?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:green;font-weight:bold;font-style:italic;">IMPORT CUSTOMERS</span> to overwrite existing ones?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                if (isReaderAPIAvlbl()) {
                    $("#allOtherFileInput6").val('');
                    $("#allOtherFileInput6").off('change');
                    $("#allOtherFileInput6").change(function () {
                        var fileName = $(this).val();
                        var input = document.getElementById('allOtherFileInput6');
                        var file = input.files[0];
                        // read the file metadata
                        var output = '';
                        output += '<span style="font-weight:bold;">' + escape(file.name) + '</span><br />\n';
                        output += ' - FileType: ' + (file.type || 'n/a') + '<br />\n';
                        output += ' - FileSize: ' + file.size + ' bytes<br />\n';
                        output += ' - LastModified: ' + (file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() : 'n/a') + '<br />\n';
                        var reader = new FileReader();
                        BootstrapDialog.show({
                            size: BootstrapDialog.SIZE_LARGE,
                            type: BootstrapDialog.TYPE_DEFAULT,
                            title: 'Validating Selected File',
                            message: '<div id="myProgress"><div id="myBar"></div></div><div id="myInformation"><i class="fa fa-spin fa-spinner"></i> Validating Selected File...Please Wait...</div><br/><div id="fileInformation">' + output + '</div>',
                            animate: true,
                            closable: true,
                            closeByBackdrop: false,
                            closeByKeyboard: false,
                            onshow: function (dialogItself) {
                                setTimeout(function () {
                                    var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                    $footerButton.disable();
                                    // read the file content
                                    reader.onerror = function (evt) {
                                        switch (evt.target.error.code) {
                                            case evt.target.error.NOT_FOUND_ERR:
                                                alert('File Not Found!');
                                                break;
                                            case evt.target.error.NOT_READABLE_ERR:
                                                alert('File is not readable');
                                                break;
                                            case evt.target.error.ABORT_ERR:
                                                break; // noop
                                            default:
                                                alert('An error occurred reading this file.');
                                        }
                                        ;
                                    };
                                    reader.onprogress = function (evt) {
                                        // evt is an ProgressEvent.
                                        if (evt.lengthComputable) {
                                            var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
                                            // Increase the progress bar length.
                                            var elem = document.getElementById('myBar');
                                            elem.style.width = percentLoaded + '%';
                                            if (percentLoaded < 100) {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>' + percentLoaded + '% Validating Selected File...Please Wait...</span>');
                                            } else {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-check"></i>' + percentLoaded + '% Validating Selected File Completed!</span>');
                                                var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                                if (isFileValid == true) {
                                                    $footerButton.enable();
                                                } else {
                                                    $footerButton.disable();
                                                }
                                            }
                                        }
                                    };
                                    reader.onabort = function (e) {
                                        alert('File read cancelled');
                                    };
                                    reader.onloadstart = function (e) {
                                        var elem = document.getElementById('myBar');
                                        elem.style.width = '1%';
                                        $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>1% Started Importing Customers...Please Wait...</span>');
                                    };
                                    reader.onload = function (event) {
                                        try {
                                            var csv = event.target.result;
                                            var data = $.csv.toArrays(csv);
                                            var rwCntr = 0;
                                            var colCntr = 0;
                                            var vldRwCntr = 0;
                                            var number = "";
                                            var idNo = "";
                                            var title = "";
                                            var firstName = "";
                                            var surName = "";
                                            var otherNames = "";
                                            var gender = "";
                                            var maritalStatus = "";
                                            var dob = "";
                                            var pob = "";
                                            var nationality = "";
                                            var homeTown = "";
                                            var religion = "";
                                            var lnkdFirmName = "";
                                            var lnkdFirmLoc = "";
                                            var email = "";
                                            var telNo = "";
                                            var mobileNo = "";
                                            var faxNo = "";
                                            var postalAddress = "";
                                            var residentialAddress = "";
                                            var relation = "";
                                            var startDate = "";
                                            var endDate = "";
                                            var prsnType = "";
                                            var bnkBranch = "";
                                            var rcdStatus = "";
                                            var segment1 = "";
                                            for (var row in data) {
                                                for (var item in data[row]) {
                                                    colCntr++;
                                                    switch (colCntr) {
                                                        case 1:
                                                            number = data[row][item];
                                                            break;
                                                        case 2:
                                                            idNo = data[row][item];
                                                            break;
                                                        case 3:
                                                            title = data[row][item];
                                                            break;
                                                        case 4:
                                                            firstName = data[row][item];
                                                            break;
                                                        case 5:
                                                            surName = data[row][item];
                                                            break;
                                                        case 6:
                                                            otherNames = data[row][item];
                                                            break;
                                                        case 7:
                                                            gender = data[row][item];
                                                            break;
                                                        case 8:
                                                            maritalStatus = data[row][item];
                                                            break;
                                                        case 9:
                                                            dob = data[row][item];
                                                            break;
                                                        case 10:
                                                            pob = data[row][item];
                                                            break;
                                                        case 11:
                                                            nationality = data[row][item];
                                                            break;
                                                        case 12:
                                                            homeTown = data[row][item];
                                                            break;
                                                        case 13:
                                                            religion = data[row][item];
                                                            break;
                                                        case 14:
                                                            lnkdFirmName = data[row][item];
                                                            break;
                                                        case 15:
                                                            lnkdFirmLoc = data[row][item];
                                                            break;
                                                        case 16:
                                                            email = data[row][item];
                                                            break;
                                                        case 17:
                                                            telNo = data[row][item];
                                                            break;
                                                        case 18:
                                                            mobileNo = data[row][item];
                                                            break;
                                                        case 19:
                                                            faxNo = data[row][item];
                                                            break;
                                                        case 20:
                                                            postalAddress = data[row][item];
                                                            break;
                                                        case 21:
                                                            residentialAddress = data[row][item];
                                                            break;
                                                        case 22:
                                                            relation = data[row][item];
                                                            break;
                                                        case 23:
                                                            startDate = data[row][item];
                                                            break;
                                                        case 24:
                                                            endDate = data[row][item];
                                                            break;
                                                        case 25:
                                                            prsnType = data[row][item];
                                                            break;
                                                        case 26:
                                                            bnkBranch = data[row][item];
                                                            break;
                                                        case 27:
                                                            rcdStatus = data[row][item];
                                                            break;
                                                        case 28:
                                                            segment1 = data[row][item];
                                                            break;
                                                        default:
                                                            var dialog = bootbox.alert({
                                                                title: 'Error-Validating Selected File',
                                                                size: 'small',
                                                                message: '<span style="color:red;font-weight:bold:">An error occurred reading this file.Invalid Column in File!</span>',
                                                                callback: function () {
                                                                    isFileValid = false;
                                                                    reader.abort();
                                                                }
                                                            });
                                                    }
                                                }
                                                if (rwCntr === 0) {
                                                    //alert(number.toUpperCase() + "|" + idNo.toUpperCase() + "|" + faxNo.toUpperCase());
                                                    if (number.toUpperCase() === "NO." && idNo.toUpperCase() === "CUSTOMER ID**"
                                                            && title.toUpperCase() === "TITLE**")
                                                    {

                                                    } else {
                                                        var dialog = bootbox.alert({
                                                            title: 'Error-Import Customers',
                                                            size: 'small',
                                                            message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                            callback: function () {
                                                                isFileValid = false;
                                                                reader.abort();
                                                            }
                                                        });
                                                    }
                                                }
                                                if (1 == 1 /*idNo.trim() !== "" && title.trim() !== ""
                                                 && firstName.trim() !== ""
                                                 && surName.trim() !== "" && gender.trim() !== "" && maritalStatus.trim() !== "" && dob.trim() !== ""
                                                 && nationality.trim() !== "" && lnkdFirmName.trim() !== "" 
                                                 && mobileNo.trim() !== "" && prsnType.trim() !== "" && relation.trim() !== "" && startDate.trim() !== ""
                                                 && bnkBranch.trim() !== ""*/)
                                                {
                                                    //if valid data
                                                    /*.replace(/(~)+/g, "{-;-;}") .replace(/(\|)+/g, "{:;:;}")*/
                                                    dataToSend = dataToSend + number.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + idNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + title.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + firstName.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + surName.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + otherNames.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + gender.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + maritalStatus.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + dob.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + pob.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + nationality.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + homeTown.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + religion.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + lnkdFirmName.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + lnkdFirmLoc.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + email.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + telNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + mobileNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + faxNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + postalAddress.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + residentialAddress.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + relation.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + startDate.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + endDate.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prsnType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + bnkBranch.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + rcdStatus.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + segment1.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                                                    vldRwCntr++;
                                                }
                                                colCntr = 0;
                                                rwCntr++;
                                            }
                                            output += '<br/><span style="color:blue;font-weight:bold;">No. of Valid Rows:' + vldRwCntr;
                                            output += '<br/>Total No. of Rows:' + rwCntr + '</span>';
                                            $("#fileInformation").html(output);
                                        } catch (err) {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import Customers',
                                                size: 'small',
                                                message: 'Error:' + err.message,
                                                callback: function () {
                                                    isFileValid = false;
                                                    reader.abort();
                                                }
                                            });
                                        }
                                    };
                                    reader.readAsText(file);
                                }, 500);
                            },
                            buttons: [{
                                    label: 'Cancel',
                                    icon: 'glyphicon glyphicon-menu-left',
                                    cssClass: 'btn-default',
                                    action: function (dialogItself) {
                                        isFileValid = false;
                                        reader.abort();
                                        dialogItself.close();
                                    }
                                }, {
                                    id: 'btn-srvr-prcs',
                                    label: 'Start Server Processing',
                                    icon: 'glyphicon glyphicon-menu-right',
                                    cssClass: 'btn-primary',
                                    action: function (dialogItself) {
                                        if (isFileValid == true) {
                                            dialogItself.close();
                                            savePrsnlCstmrs(dataToSend);
                                        } else {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import Customers',
                                                size: 'small',
                                                message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                callback: function () {
                                                }
                                            });
                                        }
                                    }
                                }]
                        });
                    });
                    performFileClick('allOtherFileInput6');
                }
            }
        }
    });
}

function savePrsnlCstmrs(dataToSend)
{
    if (dataToSend.trim() === '')
    {
        bootbox.alert({
            title: 'System Alert!',
            size: 'small',
            message: '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;">No Data to Send!</span></p>'
        });
        return false;
    }
    var dialog = bootbox.alert({
        title: 'Importing Customers/Processes',
        size: 'small',
        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Importing Customers/Processes...Please Wait...</div>',
        callback: function () {
            clearInterval(prgstimerid2);
            getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.1', 'mcfIndCstmr');
            //getAllRpts('clear', '#allmodules', 'grp=9&typ=1&pg=1&vtyp=0');
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 11,
                    subPgNo: 1.1,
                    q: 'UPDATE',
                    actyp: 5,
                    dataToSend: dataToSend
                }
            });
            prgstimerid2 = window.setInterval(rfrshSavePrsnlCstmrs, 1000);
        });
    });
}

function rfrshSavePrsnlCstmrs() {
    $.ajax({
        method: "POST",
        url: "index.php",
        data: {
            grp: 17,
            typ: 1,
            pg: 11,
            subPgNo: 1.1,
            q: 'UPDATE',
            actyp: 6
        },
        success: function (data) {
            var elem = document.getElementById('myBar1');
            elem.style.width = data.percent + '%';
            $("#myInformation1").html(data.message);
            if (data.percent >= 100) {
                window.clearInterval(prgstimerid2);
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus + " " + errorThrown);
            console.warn(jqXHR.responseText);
        }
    });
}

function imprtCorpGrpCstmrs(cstmrCtrgy)
{
    var pcstmrCtrgy = cstmrCtrgy;
    var dataToSend = "";
    var isFileValid = true;
    var dialog1 = bootbox.confirm({
        title: 'Import ' + cstmrCtrgy,
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:green;font-weight:bold;font-style:italic;">IMPORT ' + cstmrCtrgy.toUpperCase() + '</span> to overwrite existing ones?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                if (isReaderAPIAvlbl()) {
                    $("#allOtherFileInput6").val('');
                    $("#allOtherFileInput6").off('change');
                    $("#allOtherFileInput6").change(function () {
                        var fileName = $(this).val();
                        var input = document.getElementById('allOtherFileInput6');
                        var file = input.files[0];
                        // read the file metadata
                        var output = '';
                        output += '<span style="font-weight:bold;">' + escape(file.name) + '</span><br />\n';
                        output += ' - FileType: ' + (file.type || 'n/a') + '<br />\n';
                        output += ' - FileSize: ' + file.size + ' bytes<br />\n';
                        output += ' - LastModified: ' + (file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() : 'n/a') + '<br />\n';
                        var reader = new FileReader();
                        BootstrapDialog.show({
                            size: BootstrapDialog.SIZE_LARGE,
                            type: BootstrapDialog.TYPE_DEFAULT,
                            title: 'Validating Selected File',
                            message: '<div id="myProgress"><div id="myBar"></div></div><div id="myInformation"><i class="fa fa-spin fa-spinner"></i> Validating Selected File...Please Wait...</div><br/><div id="fileInformation">' + output + '</div>',
                            animate: true,
                            closable: true,
                            closeByBackdrop: false,
                            closeByKeyboard: false,
                            onshow: function (dialogItself) {
                                setTimeout(function () {
                                    var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                    $footerButton.disable();
                                    // read the file content
                                    reader.onerror = function (evt) {
                                        switch (evt.target.error.code) {
                                            case evt.target.error.NOT_FOUND_ERR:
                                                alert('File Not Found!');
                                                break;
                                            case evt.target.error.NOT_READABLE_ERR:
                                                alert('File is not readable');
                                                break;
                                            case evt.target.error.ABORT_ERR:
                                                break; // noop
                                            default:
                                                alert('An error occurred reading this file.');
                                        }
                                        ;
                                    };
                                    reader.onprogress = function (evt) {
                                        // evt is an ProgressEvent.
                                        if (evt.lengthComputable) {
                                            var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
                                            // Increase the progress bar length.
                                            var elem = document.getElementById('myBar');
                                            elem.style.width = percentLoaded + '%';
                                            if (percentLoaded < 100) {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>' + percentLoaded + '% Validating Selected File...Please Wait...</span>');
                                            } else {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-check"></i>' + percentLoaded + '% Validating Selected File Completed!</span>');
                                                var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                                if (isFileValid == true) {
                                                    $footerButton.enable();
                                                } else {
                                                    $footerButton.disable();
                                                }
                                            }
                                        }
                                    };
                                    reader.onabort = function (e) {
                                        alert('File read cancelled');
                                    };
                                    reader.onloadstart = function (e) {
                                        var elem = document.getElementById('myBar');
                                        elem.style.width = '1%';
                                        $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>1% Started Importing ' + cstmrCtrgy + '...Please Wait...</span>');
                                    };
                                    reader.onload = function (event) {
                                        try {
                                            var csv = event.target.result;
                                            var data = $.csv.toArrays(csv);
                                            var rwCntr = 0;
                                            var colCntr = 0;
                                            var vldRwCntr = 0;
                                            var number = "";
                                            var idNo = "";
                                            var custName = "";
                                            var clsfctn = "";
                                            var dateOfEstblshmnt = "";
                                            var brandName = "";
                                            var orgType = "";
                                            var regNo = "";
                                            var dateOfIncorp = "";
                                            var typeOfIncorp = "";
                                            var vatNo = "";
                                            var tinNo = "";
                                            var ssnitRegNo = "";
                                            var noOfEmp = 0;
                                            var contactNos = "";
                                            var email = "";
                                            var pstlAddress = "";
                                            var natureOfBus = "";
                                            var resAddress = "";
                                            var faxNo = "";
                                            var meetingDays = "";
                                            var segment1 = "";
                                            var startDate = "";
                                            var endDate = "";
                                            var prsnType = "";
                                            var bnkBranch = "";
                                            var rcdStatus = "";
                                            for (var row in data) {
                                                for (var item in data[row]) {
                                                    colCntr++;
                                                    switch (colCntr) {
                                                        case 1:
                                                            number = data[row][item];
                                                            break;
                                                        case 2:
                                                            idNo = data[row][item];
                                                            break;
                                                        case 3:
                                                            custName = data[row][item];
                                                            break;
                                                        case 4:
                                                            clsfctn = data[row][item];
                                                            break;
                                                        case 5:
                                                            dateOfEstblshmnt = data[row][item];
                                                            break;
                                                        case 6:
                                                            brandName = data[row][item];
                                                            break;
                                                        case 7:
                                                            orgType = data[row][item];
                                                            break;
                                                        case 8:
                                                            regNo = data[row][item];
                                                            break;
                                                        case 9:
                                                            dateOfIncorp = data[row][item];
                                                            break;
                                                        case 10:
                                                            typeOfIncorp = data[row][item];
                                                            break;
                                                        case 11:
                                                            vatNo = data[row][item];
                                                            break;
                                                        case 12:
                                                            tinNo = data[row][item];
                                                            break;
                                                        case 13:
                                                            ssnitRegNo = data[row][item];
                                                            break;
                                                        case 14:
                                                            noOfEmp = data[row][item];
                                                            break;
                                                        case 15:
                                                            contactNos = data[row][item];
                                                            break;
                                                        case 16:
                                                            email = data[row][item];
                                                            break;
                                                        case 17:
                                                            pstlAddress = data[row][item];
                                                            break;
                                                        case 18:
                                                            natureOfBus = data[row][item];
                                                            break;
                                                        case 19:
                                                            resAddress = data[row][item];
                                                            break;
                                                        case 20:
                                                            faxNo = data[row][item];
                                                            break;
                                                        case 21:
                                                            meetingDays = data[row][item];
                                                            break;
                                                        case 22:
                                                            segment1 = data[row][item];
                                                            break;
                                                        case 23:
                                                            startDate = data[row][item];
                                                            break;
                                                        case 24:
                                                            endDate = data[row][item];
                                                            break;
                                                        case 25:
                                                            prsnType = data[row][item];
                                                            break;
                                                        case 26:
                                                            bnkBranch = data[row][item];
                                                            break;
                                                        case 27:
                                                            rcdStatus = data[row][item];
                                                            break;
                                                        default:
                                                            var dialog = bootbox.alert({
                                                                title: 'Error-Validating Selected File',
                                                                size: 'small',
                                                                message: '<span style="color:red;font-weight:bold:">An error occurred reading this file.Invalid Column in File!</span>',
                                                                callback: function () {
                                                                    isFileValid = false;
                                                                    reader.abort();
                                                                }
                                                            });
                                                    }
                                                }
                                                if (rwCntr === 0) {
                                                    //alert(number.toUpperCase() + "|" + idNo.toUpperCase() + "|" + faxNo.toUpperCase());
                                                    if (number.toUpperCase() === "NO." && custName.toUpperCase() === "CUSTOMER NAME**"
                                                            && natureOfBus.toUpperCase() === "NATURE OF BUSINESS**")
                                                    {

                                                    } else {
                                                        var dialog = bootbox.alert({
                                                            title: 'Error-Import ' + cstmrCtrgy,
                                                            size: 'small',
                                                            message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                            callback: function () {
                                                                isFileValid = false;
                                                                reader.abort();
                                                            }
                                                        });
                                                    }
                                                }
                                                if (1 == 1 /*idNo.trim() !== "" && title.trim() !== ""
                                                 && firstName.trim() !== ""
                                                 && surName.trim() !== "" && gender.trim() !== "" && maritalStatus.trim() !== "" && dob.trim() !== ""
                                                 && nationality.trim() !== "" && lnkdFirmName.trim() !== "" 
                                                 && mobileNo.trim() !== "" && prsnType.trim() !== "" && relation.trim() !== "" && startDate.trim() !== ""
                                                 && bnkBranch.trim() !== ""*/)
                                                {
                                                    //if valid data
                                                    /*.replace(/(~)+/g, "{-;-;}") .replace(/(\|)+/g, "{:;:;}")*/
                                                    dataToSend = dataToSend + number.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + idNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + custName.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + clsfctn.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + dateOfEstblshmnt.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + brandName.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + orgType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + regNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + dateOfIncorp.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + typeOfIncorp.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + vatNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + tinNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + ssnitRegNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + noOfEmp.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + contactNos.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + email.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + pstlAddress.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + natureOfBus.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + resAddress.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + faxNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + meetingDays.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + segment1.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + startDate.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + endDate.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prsnType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + bnkBranch.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + rcdStatus.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                                                    vldRwCntr++;
                                                }
                                                colCntr = 0;
                                                rwCntr++;
                                            }
                                            output += '<br/><span style="color:blue;font-weight:bold;">No. of Valid Rows:' + vldRwCntr;
                                            output += '<br/>Total No. of Rows:' + rwCntr + '</span>';
                                            $("#fileInformation").html(output);
                                        } catch (err) {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import Customers',
                                                size: 'small',
                                                message: 'Error:' + err.message,
                                                callback: function () {
                                                    isFileValid = false;
                                                    reader.abort();
                                                }
                                            });
                                        }
                                    };
                                    reader.readAsText(file);
                                }, 500);
                            },
                            buttons: [{
                                    label: 'Cancel',
                                    icon: 'glyphicon glyphicon-menu-left',
                                    cssClass: 'btn-default',
                                    action: function (dialogItself) {
                                        isFileValid = false;
                                        reader.abort();
                                        dialogItself.close();
                                    }
                                }, {
                                    id: 'btn-srvr-prcs',
                                    label: 'Start Server Processing',
                                    icon: 'glyphicon glyphicon-menu-right',
                                    cssClass: 'btn-primary',
                                    action: function (dialogItself) {
                                        if (isFileValid == true) {
                                            dialogItself.close();
                                            saveCorpGrpCstmrs(dataToSend, cstmrCtrgy);
                                        } else {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import Customers',
                                                size: 'small',
                                                message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                callback: function () {
                                                }
                                            });
                                        }
                                    }
                                }]
                        });
                    });
                    performFileClick('allOtherFileInput6');
                }
            }
        }
    });
}

function saveCorpGrpCstmrs(dataToSend, cstmrCtrgy)
{
    if (dataToSend.trim() === '')
    {
        bootbox.alert({
            title: 'System Alert!',
            size: 'small',
            message: '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;">No Data to Send!</span></p>'
        });
        return false;
    }
    var vSubPgNo = 1.2;
    var tblPrfx = 'mcfCorpCstmr';
    if (cstmrCtrgy == 'Customer Groups') {
        vSubPgNo = 1.3;
        tblPrfx = 'mcfGrpCstmr';
    }
    var dialog = bootbox.alert({
        title: 'Importing ' + cstmrCtrgy,
        size: 'small',
        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Importing ' + cstmrCtrgy + '...Please Wait...</div>',
        callback: function () {
            clearInterval(prgstimerid2);
            getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=' + vSubPgNo, tblPrfx);
            //getAllRpts('clear', '#allmodules', 'grp=9&typ=1&pg=1&vtyp=0');
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 11,
                    subPgNo: vSubPgNo,
                    q: 'UPDATE',
                    actyp: 5,
                    dataToSend: dataToSend
                }
            });
            prgstimerid2 = window.setInterval(rfrshSaveCorpGrpCstmrs, 1000);
        });
    });
}

function rfrshSaveCorpGrpCstmrs() {
    $.ajax({
        method: "POST",
        url: "index.php",
        data: {
            grp: 17,
            typ: 1,
            pg: 11,
            subPgNo: 1.2,
            q: 'UPDATE',
            actyp: 6
        },
        success: function (data) {
            var elem = document.getElementById('myBar1');
            elem.style.width = data.percent + '%';
            $("#myInformation1").html(data.message);
            if (data.percent >= 100) {
                window.clearInterval(prgstimerid2);
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus + " " + errorThrown);
            console.warn(jqXHR.responseText);
        }
    });
}

function imprtCustAccnts()
{
    var dataToSend = "";
    var isFileValid = true;
    var dialog1 = bootbox.confirm({
        custNo: 'Import Customer Accounts?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:green;font-weight:bold;font-style:italic;">IMPORT CUSTOMER ACCOUNTS</span> to overwrite existing ones?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                if (isReaderAPIAvlbl()) {
                    $("#allOtherFileInput6").val('');
                    $("#allOtherFileInput6").off('change');
                    $("#allOtherFileInput6").change(function () {
                        var fileName = $(this).val();
                        var input = document.getElementById('allOtherFileInput6');
                        var file = input.files[0];
                        // read the file metadata
                        var output = '';
                        output += '<span style="font-weight:bold;">' + escape(file.name) + '</span><br />\n';
                        output += ' - FileType: ' + (file.type || 'n/a') + '<br />\n';
                        output += ' - FileSize: ' + file.size + ' bytes<br />\n';
                        output += ' - LastModified: ' + (file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() : 'n/a') + '<br />\n';
                        var reader = new FileReader();
                        BootstrapDialog.show({
                            size: BootstrapDialog.SIZE_LARGE,
                            type: BootstrapDialog.TYPE_DEFAULT,
                            custNo: 'Validating Selected File',
                            message: '<div id="myProgress"><div id="myBar"></div></div><div id="myInformation"><i class="fa fa-spin fa-spinner"></i> Validating Selected File...Please Wait...</div><br/><div id="fileInformation">' + output + '</div>',
                            animate: true,
                            closable: true,
                            closeByBackdrop: false,
                            closeByKeyboard: false,
                            onshow: function (dialogItself) {
                                setTimeout(function () {
                                    var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                    $footerButton.disable();
                                    // read the file content
                                    reader.onerror = function (evt) {
                                        switch (evt.target.error.code) {
                                            case evt.target.error.NOT_FOUND_ERR:
                                                alert('File Not Found!');
                                                break;
                                            case evt.target.error.NOT_READABLE_ERR:
                                                alert('File is not readable');
                                                break;
                                            case evt.target.error.ABORT_ERR:
                                                break; // noop
                                            default:
                                                alert('An error occurred reading this file.');
                                        }
                                        ;
                                    };
                                    reader.onprogress = function (evt) {
                                        // evt is an ProgressEvent.
                                        if (evt.lengthComputable) {
                                            var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
                                            // Increase the progress bar length.
                                            var elem = document.getElementById('myBar');
                                            elem.style.width = percentLoaded + '%';
                                            if (percentLoaded < 100) {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>' + percentLoaded + '% Validating Selected File...Please Wait...</span>');
                                            } else {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-check"></i>' + percentLoaded + '% Validating Selected File Completed!</span>');
                                                var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                                if (isFileValid == true) {
                                                    $footerButton.enable();
                                                } else {
                                                    $footerButton.disable();
                                                }
                                            }
                                        }
                                    };
                                    reader.onabort = function (e) {
                                        alert('File read cancelled');
                                    };
                                    reader.onloadstart = function (e) {
                                        var elem = document.getElementById('myBar');
                                        elem.style.width = '1%';
                                        $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>1% Started Importing Customer Accounts...Please Wait...</span>');
                                    };
                                    reader.onload = function (event) {
                                        try {
                                            var csv = event.target.result;
                                            var data = $.csv.toArrays(csv);
                                            var rwCntr = 0;
                                            var colCntr = 0;
                                            var vldRwCntr = 0;
                                            var number = "";
                                            var custType = "";
                                            var custNo = "";
                                            var acctNumber = "";
                                            var acctTitle = "";
                                            var acctType = "";
                                            var prdtType = "";
                                            var acctTrnsTyp = "";
                                            var prsnTypeEntity = "";
                                            var prpsOfAcct = "";
                                            var prpsOfAcctOther = "";
                                            var srcOfFunds = "";
                                            var srcOfFundsOther = "";
                                            var trnsPerMnthNo = 999;
                                            var amountPerMnth = 99999999;
                                            var reltnOfficer = "";
                                            var accntStatus = "";
                                            var isDormant = "";
                                            var accMndte = "";
                                            var bnkBranch = "";
                                            var rcdStatus = "";
                                            var acctBal = 0.00;
                                            for (var row in data) {
                                                for (var item in data[row]) {
                                                    colCntr++;
                                                    switch (colCntr) {
                                                        case 1:
                                                            number = data[row][item];
                                                            break;
                                                        case 2:
                                                            custType = data[row][item];
                                                            break;
                                                        case 3:
                                                            custNo = data[row][item];
                                                            break;
                                                        case 4:
                                                            acctNumber = data[row][item];
                                                            break;
                                                        case 5:
                                                            acctTitle = data[row][item];
                                                            break;
                                                        case 6:
                                                            acctType = data[row][item];
                                                            break;
                                                        case 7:
                                                            prdtType = data[row][item];
                                                            break;
                                                        case 8:
                                                            acctTrnsTyp = data[row][item];
                                                            break;
                                                        case 9:
                                                            prsnTypeEntity = data[row][item];
                                                            break;
                                                        case 10:
                                                            prpsOfAcct = data[row][item];
                                                            break;
                                                        case 11:
                                                            prpsOfAcctOther = data[row][item];
                                                            break;
                                                        case 12:
                                                            srcOfFunds = data[row][item];
                                                            break;
                                                        case 13:
                                                            srcOfFundsOther = data[row][item];
                                                            break;
                                                        case 14:
                                                            trnsPerMnthNo = data[row][item];
                                                            break;
                                                        case 15:
                                                            amountPerMnth = data[row][item];
                                                            break;
                                                        case 16:
                                                            reltnOfficer = data[row][item];
                                                            break;
                                                        case 17:
                                                            accntStatus = data[row][item];
                                                            break;
                                                        case 18:
                                                            isDormant = data[row][item];
                                                            break;
                                                        case 19:
                                                            accMndte = data[row][item];
                                                            break;
                                                        case 20:
                                                            bnkBranch = data[row][item];
                                                            break;
                                                        case 21:
                                                            rcdStatus = data[row][item];
                                                            break;
                                                        case 22:
                                                            acctBal = data[row][item];
                                                            break;
                                                        default:
                                                            var dialog = bootbox.alert({
                                                                custNo: 'Error-Validating Selected File',
                                                                size: 'small',
                                                                message: '<span style="color:red;font-weight:bold:">An error occurred reading this file.Invalid Column in File!</span>',
                                                                callback: function () {
                                                                    isFileValid = false;
                                                                    reader.abort();
                                                                }
                                                            });
                                                    }
                                                }
                                                if (rwCntr === 0) {
                                                    //alert(number.toUpperCase() + "|" + custType.toUpperCase() + "|" + isDormant.toUpperCase());
                                                    if (number.toUpperCase() === "NO." && custType.toUpperCase() === "CUSTOMER TYPE**"
                                                            && custNo.toUpperCase() === "CUSTOMER NO.**")
                                                    {

                                                    } else {
                                                        var dialog = bootbox.alert({
                                                            custNo: 'Error-Import Customer Accounts',
                                                            size: 'small',
                                                            message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                            callback: function () {
                                                                isFileValid = false;
                                                                reader.abort();
                                                            }
                                                        });
                                                    }
                                                }
                                                if (1 == 1 /*custType.trim() !== "" && custNo.trim() !== ""
                                                 && acctNumber.trim() !== ""
                                                 && acctTitle.trim() !== "" && prdtType.trim() !== "" && acctTrnsTyp.trim() !== "" && prsnTypeEntity.trim() !== ""
                                                 && prpsOfAcct.trim() !== "" && srcOfFundsOther.trim() !== "" 
                                                 && accntStatus.trim() !== "" && prsnType.trim() !== "" && relation.trim() !== "" && startDate.trim() !== ""
                                                 && bnkBranch.trim() !== ""*/)
                                                {
                                                    //if valid data
                                                    /*.replace(/(~)+/g, "{-;-;}") .replace(/(\|)+/g, "{:;:;}")*/
                                                    dataToSend = dataToSend + number.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + custType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + custNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + acctNumber.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + acctTitle.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + acctType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prdtType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + acctTrnsTyp.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prsnTypeEntity.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prpsOfAcct.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prpsOfAcctOther.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + srcOfFunds.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + srcOfFundsOther.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + trnsPerMnthNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + amountPerMnth.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + reltnOfficer.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + accntStatus.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + isDormant.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + accMndte.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + bnkBranch.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + rcdStatus.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + acctBal.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                                                    vldRwCntr++;
                                                }
                                                colCntr = 0;
                                                rwCntr++;
                                            }
                                            output += '<br/><span style="color:blue;font-weight:bold;">No. of Valid Rows:' + vldRwCntr;
                                            output += '<br/>Total No. of Rows:' + rwCntr + '</span>';
                                            $("#fileInformation").html(output);
                                        } catch (err) {
                                            var dialog = bootbox.alert({
                                                custNo: 'Error-Import Customer Accounts',
                                                size: 'small',
                                                message: 'Error:' + err.message,
                                                callback: function () {
                                                    isFileValid = false;
                                                    reader.abort();
                                                }
                                            });
                                        }
                                    };
                                    reader.readAsText(file);
                                }, 500);
                            },
                            buttons: [{
                                    label: 'Cancel',
                                    icon: 'glyphicon glyphicon-menu-left',
                                    cssClass: 'btn-default',
                                    action: function (dialogItself) {
                                        isFileValid = false;
                                        reader.abort();
                                        dialogItself.close();
                                    }
                                }, {
                                    id: 'btn-srvr-prcs',
                                    label: 'Start Server Processing',
                                    icon: 'glyphicon glyphicon-menu-right',
                                    cssClass: 'btn-primary',
                                    action: function (dialogItself) {
                                        if (isFileValid == true) {
                                            dialogItself.close();
                                            saveCustAccnts(dataToSend);
                                        } else {
                                            var dialog = bootbox.alert({
                                                custNo: 'Error-Import Customer Accounts',
                                                size: 'small',
                                                message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                callback: function () {
                                                }
                                            });
                                        }
                                    }
                                }]
                        });
                    });
                    performFileClick('allOtherFileInput6');
                }
            }
        }
    });
}

function saveCustAccnts(dataToSend)
{
    if (dataToSend.trim() === '')
    {
        bootbox.alert({
            custNo: 'System Alert!',
            size: 'small',
            message: '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;">No Data to Send!</span></p>'
        });
        return false;
    }
    var dialog = bootbox.alert({
        custNo: 'Importing Customer Accounts',
        size: 'small',
        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Importing Customer Accounts...Please Wait...</div>',
        callback: function () {
            clearInterval(prgstimerid2);
            getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=2&subPgNo=2.1');
            //getAllRpts('clear', '#allmodules', 'grp=9&typ=1&pg=1&vtyp=0');
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 13,
                    subPgNo: 2.1,
                    q: 'UPDATE',
                    actyp: 5,
                    dataToSend: dataToSend
                }
            });
            prgstimerid2 = window.setInterval(rfrshSaveCustAccnts, 1000);
        });
    });
}

function rfrshSaveCustAccnts() {
    $.ajax({
        method: "POST",
        url: "index.php",
        data: {
            grp: 17,
            typ: 1,
            pg: 13,
            subPgNo: 2.1,
            q: 'UPDATE',
            actyp: 6
        },
        success: function (data) {
            var elem = document.getElementById('myBar1');
            elem.style.width = data.percent + '%';
            $("#myInformation1").html(data.message);
            if (data.percent >= 100) {
                window.clearInterval(prgstimerid2);
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus + " " + errorThrown);
            console.warn(jqXHR.responseText);
        }
    });
}

function modifyAutrzCustDataRqstNew(pgNo, subPgNo, vtyp)
{
    var box;
    var prmtMsg = "Are you sure you want MODIFY this AUTHORIZED DATA?";
    var dlgHdr = "EDIT CORPORATE CUSTOMER PROFILE";
    if(subPgNo == 1.3){
        dlgHdr = "EDIT CUSTOMER GROUP"
    }
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var custID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">Preparing Data. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('custID', custID);
                    formData.append('actyp', 4);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', dlgHdr, 11, subPgNo, 0, 'EDIT', custID, '', 'indCustTableRow1', -1, function () {
                                    box.modal('hide');
                                });
                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function wthdrwRjctAutrzCustDataRqstNew(wthdrwRjct, pgNo, subPgNo, vtyp)
{
    var box;
    var box2;
    var p_actyp = 1;
    var svOrsbmt = "Withdrawing.";
    var prmtMsg = "Are you sure you want to " + wthdrwRjct + " this Change Request?"
    var dlgHdr = "EDIT CORPORATE CUSTOMER PROFILE";
    if(subPgNo == 1.3){
        dlgHdr = "EDIT CUSTOMER GROUP"
    }
    
    if (wthdrwRjct == "REJECT") {
        svOrsbmt = "Rejecting.";
        p_actyp = 2;
    } else if (wthdrwRjct == "AUTHORIZE") {
        svOrsbmt = "Authorizing.";
        p_actyp = 3;
    }

    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var custID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">' + svOrsbmt + '. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('custID', custID);
                    formData.append('actyp', p_actyp);
                    formData.append('rvsnTtl', rvsnTtl);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                if (wthdrwRjct == "REJECT") {
                                    msg = "Change Request Successfully REJECTED!";
                                } else if (wthdrwRjct == "AUTHORIZE") {
                                    msg = "Change Request Successfully AUTHORIZED!";
                                } else {
                                    msg = "Change Request successfully WITHDRAWN";
                                }

                                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', dlgHdr, 11, subPgNo, 0, 'EDIT', custID, '', 'indCustTableRow1', -1, function () {
                                    box.modal('hide');
                                    bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: msg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });
                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function wthdrwRjctAutrzPrsnDataRqst(wthdrwRjct, pgNo, subPgNo, vtyp)
{
    var box;
    var box2;
    var p_actyp = 1;
    var svOrsbmt = "Withdrawing.";
    var prmtMsg = "Are you sure you want to " + wthdrwRjct + " this Change Request?"

    if (wthdrwRjct == "REJECT") {
        svOrsbmt = "Rejecting.";
        p_actyp = 2;
    } else if (wthdrwRjct == "AUTHORIZE") {
        svOrsbmt = "Authorizing.";
        p_actyp = 3;
    }

    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var personID = typeof $("#personID").val() === 'undefined' ? -1 : $("#personID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">' + svOrsbmt + '. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('personID', personID);
                    formData.append('actyp', p_actyp);
                    formData.append('rvsnTtl', rvsnTtl);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                if (wthdrwRjct == "REJECT") {
                                    msg = "Change Request Successfully REJECTED!";
                                } else if (wthdrwRjct == "AUTHORIZE") {
                                    msg = "Change Request Successfully AUTHORIZED!";
                                } else {
                                    msg = "Change Request successfully WITHDRAWN";
                                }

                                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Customer Profile', 11, subPgNo, 0, 'EDIT', personID, '', 'indCustTableRow1', -1, function () {
                                    box.modal('hide');
                                    bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: msg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });
                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function modifyAutrzPrsnDataRqst(pgNo, subPgNo, vtyp)
{
    var box;
    var prmtMsg = "Are you sure you want MODIFY this AUTHORIZED DATA?";
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var personID = typeof $("#personID").val() === 'undefined' ? -1 : $("#personID").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">Preparing Data. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('personID', personID);
                    formData.append('actyp', 4);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Customer Profile', 11, subPgNo, 0, 'EDIT', personID, '', 'indCustTableRow1', -1, function () {
                                    box.modal('hide');
                                });
                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function openATabAddPrsnDta(slctr, linkArgs)
{
    $('#allOtherInputData99').val(0);
    $body = $("body");
    var $this = $(slctr + 'tab');
    var targ = slctr;
    $("body").css("padding", "0px 0px 0px 0px");
    if ($.trim($(targ).text()) !== ""
            && (slctr.match("^#prfl")
                    || slctr.match("^#profile")))
    {
        $this.tab('show');
        $body.removeClass("mdlloading");
    } else {
        getMsgAsync('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            var $this = $(slctr + 'tab');
            var targ = slctr;
            var xmlhttp;
            if (window.XMLHttpRequest)
            {
                xmlhttp = new XMLHttpRequest();
            } else
            {
                xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
            }
            xmlhttp.onreadystatechange = function ()
            {
                if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                {
                    if (linkArgs.indexOf("grp=17&typ=1") !== -1)
                    {
                        loadScript("app/mcf/mcf2.js?v=" + jsFilesVrsn, function () {
                        });
                        loadScript("app/mcf/mcf.js?v=" + jsFilesVrsn, function () {
                            $this.tab('show');
                            prepareMcf(linkArgs, $body, targ, xmlhttp.responseText);
                        });
                    }
                }
            };
            xmlhttp.open("POST", "index.php", true);
            xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xmlhttp.send(linkArgs.trim());
        });
    }
}

function modifyAutrzCustAcctRqst(pgNo, subPgNo, vtyp)
{
    var box;
    var prmtMsg = "Are you sure you want MODIFY this AUTHORIZED DATA?";
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var acctID = typeof $("#acctID").val() === 'undefined' ? -1 : $("#acctID").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">Preparing Data. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('acctID', acctID);
                    formData.append('actyp', 7);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'Edit Customer Account', 13, 2.1, 0, 'EDIT', acctID, 'custAcctTable', 'indCustTableRow1', -1, function(){
                                    box.modal('hide');
                                });                                
                                
//                                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Customer Profile', 11, subPgNo, 0, 'EDIT', custID, '', 'indCustTableRow1', -1, function () {
//                                    box.modal('hide');
//                                });
                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function showHideSvngsInvstmntElmnts(){
    var prdtType = $('#prdtType').val();
    //alert(prdtType);

    if(prdtType === "Investment"){
        $("#PrdtDiv").attr("class","col-md-6");    
        $("#InvstmntDiv").attr("style","display:block !important");
        $(".svngsDiv").attr("style","display:none !important");
        $("#intRate1").addClass("rqrdFld");
        $("#chrgInterest2").prop("checked", true);
        $("#chrgCOT2").prop("checked", true);
        $("#wtdwlLimitType2").prop("checked", true);
        $("#ovdrftAllowed2").prop("checked", true);        
        $("#intRate").attr("readonly",true);
        $("#accrualFrqncy").attr("disabled",true);
        $("#calcMethod").attr("disabled",true);
        $("#crdtnFrqncy").attr("disabled",true);
        $("#crdtnType").attr("disabled",true);       
        $("#intRate").removeClass("rqrdFld");  
        $("#intRate").val("0");
        $("#accrualFrqncy").val("--Please Select--");
        $("#calcMethod").val("--Please Select--");
        $("#crdtnFrqncy").val("--Please Select--");
        $("#intRate").val("--Please Select--");  
        $("#addCmsnBtn").attr("style","display:none !important");        
        $("#cotFreeWtdwlNo").attr("readonly",true);
        $("#cotFreeWtdwlNo").val("0"); 
        $("#wtdwlLimitNo").attr("readonly",true);
        $("#wtdwlLimitAmt").attr("readonly",true);  
        $("#wtdwlLimitNo").val("0");
        $("#wtdwlLimitAmt").val("0.00");
        $("#wtdwlPnltyFlat").attr("readonly",true);
        $("#wtdwlPnltyPercent").attr("readonly",true);  
        $("#wtdwlPnltyFlat").val("0.00");
        $("#wtdwlPnltyPercent").val("0.00"); 
        $("#indCust").prop("checked", false);
        $("#corpCust").prop("checked", false);
        $("#custGrp").prop("checked", false);        
    } else {
        $("#PrdtDiv").attr("class","col-md-4");    
        $("#InvstmntDiv").attr("style","display:none !important");
        $(".svngsDiv").attr("style","display:block !important");
        $("#intRate1").addClass("rqrdFld"); 
        $("#invstmntType").val("--Please Select--");
        $("#drtnNo").val("0");
        $("#intRate1").val("0.00");
        $("#dscntRate").val("0.00");
        $("#minAmount").val("0.00");
        $("#maxAmount").val("0.00");
        
    }

}

function onChangePayInterest(){
    var chrgInterest = typeof $("input[name='chrgInterest']:checked").val() === 'undefined' ? 'NO' : $("input[name='chrgInterest']:checked").val();
    //alert(chrgInterest);

    if(chrgInterest === "YES"){ 
        $("#intRate").attr("readonly",false);
        $("#accrualFrqncy").attr("disabled",false);
        $("#calcMethod").attr("disabled",false);
        $("#crdtnFrqncy").attr("disabled",false);
        $("#crdtnType").attr("disabled",false);
        $("#intRate").addClass("rqrdFld");                
    } else {
        $("#intRate").attr("readonly",true);
        $("#accrualFrqncy").attr("disabled",true);
        $("#calcMethod").attr("disabled",true);
        $("#crdtnFrqncy").attr("disabled",true);
        $("#crdtnType").attr("disabled",true);       
        $("#intRate").removeClass("rqrdFld");  
        $("#intRate").val("0");
        $("#accrualFrqncy").val("--Please Select--");
        $("#calcMethod").val("--Please Select--");
        $("#crdtnFrqncy").val("--Please Select--");
        $("#intRate").val("--Please Select--");
    }

}

function onChangeChargeCOT(){
    var chrgCOT = typeof $("input[name='chrgCOT']:checked").val() === 'undefined' ? 'NO' : $("input[name='chrgCOT']:checked").val();
    //alert(chrgCOT);

    if(chrgCOT === "YES"){ 
        $("#addCmsnBtn").attr("style","display:inline-block !important");        
        $("#cotFreeWtdwlNo").attr("readonly",false);                
    } else {
        $("#addCmsnBtn").attr("style","display:none !important");        
        $("#cotFreeWtdwlNo").attr("readonly",true);
        $("#cotFreeWtdwlNo").val("0");  
    }

}
function onChangeWdwlLmtType(){
    var wtdwlLimitType = typeof $("input[name='wtdwlLimitType']:checked").val() === 'undefined' ? 'NO' : $("input[name='wtdwlLimitType']:checked").val();
    //alert(chrgInterest);

    if(wtdwlLimitType === "DAILY"){ 
        $("#wtdwlLimitNo").attr("readonly",false);
        $("#wtdwlLimitAmt").attr("readonly",false);               
    } else {
        $("#wtdwlLimitNo").attr("readonly",true);
        $("#wtdwlLimitAmt").attr("readonly",true);  
        $("#wtdwlLimitNo").val("0");
        $("#wtdwlLimitAmt").val("0.00");         
    }

}
function onChangeAllwOvdrft(){
    var ovdrftAllowed = typeof $("input[name='ovdrftAllowed']:checked").val() === 'undefined' ? 'NO' : $("input[name='ovdrftAllowed']:checked").val();
    //alert(chrgInterest);

    if(ovdrftAllowed === "YES"){ 
        $("#wtdwlPnltyFlat").attr("readonly",false);
        $("#wtdwlPnltyPercent").attr("readonly",false);               
    } else {
        $("#wtdwlPnltyFlat").attr("readonly",true);
        $("#wtdwlPnltyPercent").attr("readonly",true);  
        $("#wtdwlPnltyFlat").val("0.00");
        $("#wtdwlPnltyPercent").val("0.00");         
    }

}

function validateSvngsPrdtForm(pdtCode, prdtName, prdtCrncy, prdtType, chrgInterest, accrualFrqncy,
                    calcMethod, crdtnFrqncy, crdtnType, chrgCOT, wtdwlLimitType, wtdwlLimitNo, wtdwlLimitAmt,
                    invstmntType, drtnNo, intRate1, dscntRate, minAmount, maxAmount, cashDepositCrdtAccID) {

    var cnta = 0;
    var p_applctnDate;
    var pday_SD;
    var pmonth_SD;
    var pyear_SD;
    var today = new Date();
    var pday_TD = today.getDate();
    var pmonth_TD = today.getMonth() + 1;
    var pyear_TD = today.getFullYear();
    var msgDsply = "";
    var msgDsplyHdr = "<span style='font-weight: bold !important;'>The following is/are required:</span></br>";
    if (applctnDate != "") {
        p_applctnDate = new Date(applctnDate);
        pday_SD = p_applctnDate.getDate();
        pmonth_SD = p_applctnDate.getMonth() + 1;
        pyear_SD = p_applctnDate.getFullYear();
    }

    if (applctnDate == "") {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#applctnDate").css('border-color', 'red');
        $("#applctnDate").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Application Date</b></br>";
        cnta = cnta + 1;
    } else {
        if (pyear_TD + "-" + pmonth_TD + "-" + pday_TD < pyear_SD + "-" + pmonth_SD + "-" + pday_SD) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $("#applctnDate").css('border-color', 'red');
            $("#applctnDate").css('border-width', '2px');
            msgDsply = msgDsply + "<b>Application Date must be a valid Date which is not greater than today</b></br>";
            cnta = cnta + 1;
        } else {
            $("#applctnDate").css('border-color', '#ccc');
            $("#applctnDate").css('border-width', '1px');
        }
    }

    if (bnkBranchID == "" || bnkBranchID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#bnkBranch").css('border-color', 'red');
        $("#bnkBranch").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Branch</b></br>";
        cnta = cnta + 1;
    } else {
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
    }

    if (invstmntOfficerID == "" || invstmntOfficerID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#invstmntOfficer").css('border-color', 'red');
        $("#invstmntOfficer").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Investment Officer</b></br>";
        cnta = cnta + 1;
    } else {
        $("#invstmntOfficer").css('border-color', '#ccc');
        $("#invstmntOfficer").css('border-width', '1px');
    }

    if (bnkCustomerID == "" || bnkCustomerID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#bnkCustomer").css('border-color', 'red');
        $("#bnkCustomer").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Customer Name</b></br>";
        cnta = cnta + 1;
    } else {
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
    }

    if (prdtTypeID == "" || prdtTypeID == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#prdtType").css('border-color', 'red');
        $("#prdtType").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Investment Product</b></br>";
        cnta = cnta + 1;
    } else {
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
    }

    if (invstmntAmount == "" || invstmntAmount <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#invstmntAmount").css('border-color', 'red');
        $("#invstmntAmount").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Investment Amount must be greater than zero</b></br>";
        cnta = cnta + 1;
    } else {
        if (parseFloat(invstmntAmount) > parseFloat(invstmntMaxAmount)) {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            $("#invstmntAmount").css('border-color', 'red');
            $("#invstmntAmount").css('border-width', '2px');
            msgDsply = msgDsply + "<b>Maximum applicable Investment Amount is " + formatAsMoney(invstmntMaxAmount) + "</b></br>";
            cnta = cnta + 1;
        } else {
            if (parseFloat(invstmntAmount) < parseFloat(invstmntMinAmount)) {
                $body.removeClass("mdlloadingDiag");
                $body.removeClass("mdlloading");
                $("#invstmntAmount").css('border-color', 'red');
                $("#invstmntAmount").css('border-width', '2px');
                msgDsply = msgDsply + "<b>Mimimum applicable loan amount is " + formatAsMoney(invstmntMinAmount) + "</b></br>";
                cnta = cnta + 1;
            } else {
                $("#invstmntAmount").css('border-color', '#ccc');
                $("#invstmntAmount").css('border-width', '1px');
            }
        }
    }


    if (invstmntTenor == "" || Number(invstmntTenor) <= 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#invstmntTenor").css('border-color', 'red');
        $("#invstmntTenor").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Investment Tenure must be greater than zero</b></br>";
        cnta = cnta + 1;
    } else {
        $("#invstmntTenor").css('border-color', '#ccc');
        $("#invstmntTenor").css('border-width', '1px');
    }

    if (interestRate == "" || interestRate < 0) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#interestRate").css('border-color', 'red');
        $("#interestRate").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Interest Rate must be greater than zero</b></br>";
        cnta = cnta + 1;
    } else {
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');
    }

    if (startDate == "" || startDate == undefined) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#startDate").css('border-color', 'red');
        $("#startDate").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Start Date</b></br>";
        cnta = cnta + 1;
    } else {
        $("#startDate").css('border-color', '#ccc');
        $("#startDate").css('border-width', '1px');
    }

    if (mtrtyDate == "" || mtrtyDate == undefined) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#mtrtyDate").css('border-color', 'red');
        $("#mtrtyDate").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Maturity Date</b></br>";
        cnta = cnta + 1;
    } else {
        $("#mtrtyDate").css('border-color', '#ccc');
        $("#mtrtyDate").css('border-width', '1px');
    }

    if (mtrtyValue == "" || mtrtyValue == undefined) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#mtrtyValue").css('border-color', 'red');
        $("#mtrtyValue").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Maturity Value</b></br>";
        cnta = cnta + 1;
    } else {
        $("#mtrtyValue").css('border-color', '#ccc');
        $("#mtrtyValue").css('border-width', '1px');
    }

    if (shdRollover == "Yes" && (rolloverType == "" || rolloverType == undefined)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#rolloverType").css('border-color', 'red');
        $("#rolloverType").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Rollover Type</b></br>";
        cnta = cnta + 1;
    } else {
        $("#rolloverType").css('border-color', '#ccc');
        $("#rolloverType").css('border-width', '1px');
    }

    if ((optn == 1 && (pymntMtdSrcID == "" || pymntMtdSrcID == -1)) || (pymntMthod == "Debit Account" && (pymntMtdSrcID == "" || pymntMtdSrcID == -1))) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#pymntMtdSrc").css('border-color', 'red');
        $("#pymntMtdSrc").css('border-width', '2px');
        msgDsply = msgDsply + "<b>" + srcLbl + "</b></br>";
        cnta = cnta + 1;
    } else {
        $("#pymntMtdSrc").css('border-color', '#ccc');
        $("#pymntMtdSrc").css('border-width', '1px');
    }

    if (optn == 1 && (acctNumber == "" || acctNumber == undefined)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#acctNumber").css('border-color', 'red');
        $("#acctNumber").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Investment Account No.</b></br>";
        cnta = cnta + 1;
    } else {
        $("#acctNumber").css('border-color', '#ccc');
        $("#acctNumber").css('border-width', '1px');
    }

    if (payBckMthod == "Credit Account" && (paybackAcctID == "" || paybackAcctID <= 0)) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#paybackAcct").css('border-color', 'red');
        $("#paybackAcct").css('border-width', '2px');
        msgDsply = msgDsply + "<b>Credit Account Number</b></br>";
        cnta = cnta + 1;
    } else {
        $("#paybackAcct").css('border-color', '#ccc');
        $("#paybackAcct").css('border-width', '1px');
    }

    if (cnta > 0) {
        bootbox.alert({
            size: "small",
            title: "Validation Errors",
            message: msgDsplyHdr + "<span style='color:red; font-weight:bold !important;'>" + msgDsply + "</span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else {
        $("#applctnDate").css('border-color', '#ccc');
        $("#applctnDate").css('border-width', '1px');
        $("#bnkBranch").css('border-color', '#ccc');
        $("#bnkBranch").css('border-width', '1px');
        $("#invstmntOfficer").css('border-color', '#ccc');
        $("#invstmntOfficer").css('border-width', '1px');
        $("#bnkCustomer").css('border-color', '#ccc');
        $("#bnkCustomer").css('border-width', '1px');
        $("#prdtType").css('border-color', '#ccc');
        $("#prdtType").css('border-width', '1px');
        $("#invstmntAmount").css('border-color', '#ccc');
        $("#invstmntAmount").css('border-width', '1px');
        $("#invstmntTenor").css('border-color', '#ccc');
        $("#invstmntTenor").css('border-width', '1px');
        $("#interestRate").css('border-color', '#ccc');
        $("#interestRate").css('border-width', '1px');
        $("#startDate").css('border-color', '#ccc');
        $("#startDate").css('border-width', '1px');
        $("#mtrtyDate").css('border-color', '#ccc');
        $("#mtrtyDate").css('border-width', '1px');
        $("#rolloverType").css('border-color', '#ccc');
        $("#rolloverType").css('border-width', '1px');
        $("#pymntMtdSrc").css('border-color', '#ccc');
        $("#pymntMtdSrc").css('border-width', '1px');
        $("#payBckMthod").css('border-color', '#ccc');
        $("#payBckMthod").css('border-width', '1px');
        return true;
    }
}

function modifyAutrzSvngsPrdtRqst(pgNo, subPgNo, vtyp)
{
    var box;
    var prmtMsg = "Are you sure you want MODIFY this AUTHORIZED DATA?";
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var prdtID = typeof $("#prdtID").val() === 'undefined' ? -1 : $("#prdtID").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">Preparing Data. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('prdtID', prdtID);
                    formData.append('actyp', 4);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                getProductsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Savings and Investment Product', 12, 7.1,0,'EDIT', prdtID,'','indCustTableRow1', -1, function () {
                                    box.modal('hide');
                                });                                
                                
//                                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Customer Profile', 11, subPgNo, 0, 'EDIT', custID, '', 'indCustTableRow1', -1, function () {
//                                    box.modal('hide');
//                                });
                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function wthdrwRjctAutrzSvngsPrdtDataRqst(wthdrwRjct, pgNo, subPgNo, vtyp)
{
    var box;
    var box2;
    var p_actyp = 1;
    var svOrsbmt = "Withdrawing.";
    var prmtMsg = "Are you sure you want to " + wthdrwRjct + " this Change Request?"

    if (wthdrwRjct == "REJECT") {
        svOrsbmt = "Rejecting.";
        p_actyp = 2;
    } else if (wthdrwRjct == "AUTHORIZE") {
        svOrsbmt = "Authorizing.";
        p_actyp = 3;
    }

    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var prdtID = typeof $("#prdtID").val() === 'undefined' ? -1 : $("#prdtID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">' + svOrsbmt + '. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('prdtID', prdtID);
                    formData.append('actyp', p_actyp);
                    formData.append('rvsnTtl', rvsnTtl);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                if (wthdrwRjct == "REJECT") {
                                    msg = "Change Request Successfully REJECTED!";
                                } else if (wthdrwRjct == "AUTHORIZE") {
                                    msg = "Change Request Successfully AUTHORIZED!";
                                } else {
                                    msg = "Change Request successfully WITHDRAWN";
                                }

                                getProductsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Savings and Investment Product', 12, 7.1,0,'EDIT', prdtID,'','indCustTableRow1', -1, function () {
                                    box.modal('hide');
                                    bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: msg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });                                 

                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                                                       
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function deleteSvngsWtdwlCmsn(rowID, prdtID, isApproved)
{
    var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();    
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this COT line?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                if (!($("#status").val() == "Incomplete" || $("#status").val() == "Rejected" || $("#status").val() == "Withdrawn")) {
                    //alert("Error Here");
                    mnBox.modal('hide');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Sorry! Only COT Lines for Products with Status <b>Incomplete</b>, <b>Rejected</b> or <b>Withdrawn</b> can be deleted.",
                        callback: function () { /* your callback code */
                        }
                    });
                    return false;
                }

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        //box.modal('hide');
                        getProductsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Savings and Investment Product', 12, 7.1,0,'EDIT', prdtID,'','indCustTableRow1', -1, function () {
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });                             
                        });  
                        
//                        box2 = bootbox.alert({
//                            size: "small",
//                            title: "Rhomicom Message",
//                            message: data,
//                            callback: function () { /* your callback code */
//                                getProductsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Savings and Investment Product', 12, 7.1,0,'EDIT', prdtID,'','indCustTableRow1');                                  
//                            }
//                        });
                        
//                        box2.find('.modal-content').css({
//                            'margin-top': function () {
//                                var w = $(window).height();
//                                var b = $(".modal-dialog").height();
//                                // should not be (w-h)/2
//                                var h = (w - b - 150) / 2;
//                                return h + "px";
//                            }
//                        });                                           
                        
                        //$('table#acctSignatoryTblAdd tbody tr#acctSignatoryTblAddRow' + acctSignId).remove();
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=12&subPgNo=7.1&q=DELETE&vtyp=5&PKeyID=" + prdtID + "&rowID=" + rowID+
                         "&rvsnTtl="+rvsnTtl+"&isApproved="+isApproved);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}


function modifyAutrzCrdtPrdtRqst(pgNo, subPgNo, vtyp)
{
    var box;
    var prmtMsg = "Are you sure you want MODIFY this AUTHORIZED DATA?";
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var sbmtdPrdtID = typeof $("#sbmtdPrdtID").val() === 'undefined' ? -1 : $("#sbmtdPrdtID").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">Preparing Data. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('sbmtdPrdtID', sbmtdPrdtID);
                    formData.append('actyp', 4);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                getProductsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Credit Product', 12, 7.2,0,'EDIT', sbmtdPrdtID,'','indCustTableRow1', -1, function () {
                                    box.modal('hide');
                                });                                
                                
//                                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Customer Profile', 11, subPgNo, 0, 'EDIT', custID, '', 'indCustTableRow1', -1, function () {
//                                    box.modal('hide');
//                                });
                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function wthdrwRjctAutrzCrdtPrdtDataRqst(wthdrwRjct, pgNo, subPgNo, vtyp)
{
    var box;
    var box2;
    var p_actyp = 1;
    var svOrsbmt = "Withdrawing.";
    var prmtMsg = "Are you sure you want to " + wthdrwRjct + " this Change Request?"

    if (wthdrwRjct == "REJECT") {
        svOrsbmt = "Rejecting.";
        p_actyp = 2;
    } else if (wthdrwRjct == "AUTHORIZE") {
        svOrsbmt = "Authorizing.";
        p_actyp = 3;
    }

    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var sbmtdPrdtID = typeof $("#sbmtdPrdtID").val() === 'undefined' ? -1 : $("#sbmtdPrdtID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">' + svOrsbmt + '. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('sbmtdPrdtID', sbmtdPrdtID);
                    formData.append('actyp', p_actyp);
                    formData.append('rvsnTtl', rvsnTtl);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                if (wthdrwRjct == "REJECT") {
                                    msg = "Change Request Successfully REJECTED!";
                                } else if (wthdrwRjct == "AUTHORIZE") {
                                    msg = "Change Request Successfully AUTHORIZED!";
                                } else {
                                    msg = "Change Request successfully WITHDRAWN";
                                }

                                getProductsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Savings and Investment Product', 12, 7.2,0,'EDIT', sbmtdPrdtID,'','indCustTableRow1', -1, function () {
                                    box.modal('hide');
                                    bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: msg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });                                 

                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                                                       
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function saveAccountTrns_LoansMgmt(pgNo, subPgNo, vtyp, trnsType, shdSbmt)
{
    var trnsAmntRaw1 = typeof $("#trnsAmntRaw1").val() === 'undefined' ? 0.00 : $("#trnsAmntRaw1").val();
    trnsAmntRaw1 = Number(trnsAmntRaw1.replace(/,/g, ""));
    var ttlAmount1 = 0;
    var loanRpmntSrcAmnt = typeof $("#loanRpmntSrcAmnt").val() === 'undefined' ? 0.00 : $("#loanRpmntSrcAmnt").val(); 

    if(loanRpmntSrcAmnt == ""){
        loanRpmntSrcAmnt = 0.00;
    }
    loanRpmntSrcAmnt = Number(loanRpmntSrcAmnt);
    var val1;
    var rate1;
    var crncyNm = $('#mcfPymtCrncyNm').val();
    $('#oneVmsTrnsLnsTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum1 = $(el).attr('id').split("_")[1];

                val1 = $("#oneVmsTrnsRow_" + rndmNum1 + " .chqValCls").val().replace(/,/g, "");
                rate1 = $("#oneVmsTrnsRow_" + rndmNum1 + " .chqRatesCls").val().replace(/,/g, "");
                ttlAmount1 = ttlAmount1 + (Number(val1) * Number(rate1));
            }
        }
    });
    
    //alert("ttlAmount1"+ttlAmount1+"trnsAmntRaw1="+trnsAmntRaw1+"loanRpmntSrcAmnt="+loanRpmntSrcAmnt);
    
    $('#tllrTrnsAmntTtlFld').text(crncyNm + ' ' + addCommas((ttlAmount1 + trnsAmntRaw1 + loanRpmntSrcAmnt).toFixed(2)));
    $('#ttlDocAmntVal').val((ttlAmount1 + trnsAmntRaw1 + loanRpmntSrcAmnt).toFixed(2));
    

    var obj;
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var acctTrnsId = typeof $("#acctTrnsId").val() === 'undefined' ? -1 : $("#acctTrnsId").val();
    var acctID = typeof $("#acctID").val() === 'undefined' ? -1 : $("#acctID").val();
    var docType = typeof $("#docType").val() === 'undefined' ? '' : $("#docType").val();
    var docNum = typeof $("#docNum").val() === 'undefined' ? '' : $("#docNum").val();
    var trnsAmnt = typeof $("#trnsAmount").val() === 'undefined' ? 0.00 : $("#trnsAmount").val();
    var ttlDocAmntVal = typeof $("#ttlDocAmntVal").val() === 'undefined' ? 0.00 : $("#ttlDocAmntVal").val();
    var mcfPymtCrncyNm = typeof $("#mcfPymtCrncyNm").val() === 'undefined' ? '' : $("#mcfPymtCrncyNm").val();
    var trnsDesc = typeof $("#trnsDesc").val() === 'undefined' ? '' : $("#trnsDesc").val();
    var isSelf = typeof $("input[name='trnsPersonType']:checked").val() === 'undefined' ? 'Others' : $("input[name='trnsPersonType']:checked").val();
    var trnsPersonName = typeof $("#trnsPersonName").val() === 'undefined' ? '' : $("#trnsPersonName").val();
    var trnsPersonTelNo = typeof $("#trnsPersonTelNo").val() === 'undefined' ? '' : $("#trnsPersonTelNo").val();
    var trnsPersonAddress = typeof $("#trnsPersonAddress").val() === 'undefined' ? '' : $("#trnsPersonAddress").val();
    var trnsPersonIDType = typeof $("#trnsPersonIDType").val() === 'undefined' ? '' : $("#trnsPersonIDType").val();
    var trnsPersonIDNumber = typeof $("#trnsPersonIDNumber").val() === 'undefined' ? '' : $("#trnsPersonIDNumber").val();
    var loanRepayType = typeof $("#loanRepayType").val() === 'undefined' ? 'REPAYMENT' : $("#loanRepayType").val();
    var loanRpmntSrcAcctID = typeof $("#loanRpmntSrcAcctID").val() === 'undefined' ? -1 : $("#loanRpmntSrcAcctID").val();

    /** NEW 12062017 **/
    var disbmntHdrID = typeof $("#disbmntHdrID").val() === 'undefined' ? -1 : $("#disbmntHdrID").val();
    var disbmntDetID = typeof $("#disbmntDetID").val() === 'undefined' ? -1 : $("#disbmntDetID").val();

    var errMsg = "";
    if (acctID == "" || acctID == -1)
    {
        errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                'font-weight:bold;color:red;">Please Provide Account First!</span></p>';
    }
    if (trnsDesc == "")
    {
        errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                'font-weight:bold;color:red;">Transaction Narration is required!</span></p>';
    }
    if ((docType == "Cheque" || docType == "Voucher Slip") && docNum.trim() == "")
    {
        errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                'font-weight:bold;color:red;">Provide Document Number!</span></p>';
    }
    if (mcfPymtCrncyNm.trim() == "")
    {
        errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                'font-weight:bold;color:red;">Amount Currency cannot be blank!</span></p>';
    }
    if (docNum.trim() != "" && docType == "")
    {
        errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                'font-weight:bold;color:red;">Select Document Type!</span></p>';
    }
    if (parseInt(loanRpmntSrcAcctID) <= 0 && parseFloat(loanRpmntSrcAmnt) > 0)
    {
        errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                'font-weight:bold;color:red;">Select Cash Account Number for Loan '+loanRepayType+'!</span></p>';
    }
    if (parseInt(loanRpmntSrcAcctID) > 0 && (loanRpmntSrcAmnt == "" || parseFloat(loanRpmntSrcAmnt) <= 0))
    {
        errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                'font-weight:bold;color:red;">Enter non-zero '+loanRepayType+' Amount!</span></p>';
    }
    /** NEW 12062017 **/
    if (trnsType.trim() == "LOAN_PYMNT") {
        if (disbmntHdrID == -1)
        {
            errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;color:red;">Select Disbursement No.!</span></p>';
        }
        if (disbmntDetID == -1)
        {
            errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;color:red;">Select Disbursed Loan Request!</span></p>';
        }
    }
    trnsAmnt = fmtAsNumber('trnsAmount').toFixed(2);
    ttlDocAmntVal = fmtAsNumber('ttlDocAmntVal').toFixed(2);
    if (ttlDocAmntVal == 0)
    {
        errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                'font-weight:bold;color:red;">Please provide a valid Non-Zero Value for the Total Amount Involved!</span></p>';
    }
    if (isSelf === "Others") {
        if (trnsPersonName.trim() == "")
        {
            errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;color:red;">Person Name cannot be empty!</span></p>';
        }
        if (trnsPersonTelNo.trim() == "")
        {
            errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;color:red;">Contact No. cannot be empty!</span></p>';
        }
        if (trnsPersonIDType.trim() == "")
        {
            errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;color:red;">ID Type cannot be empty!</span></p>';
        }
        if (trnsPersonIDNumber.trim() == "")
        {
            errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;color:red;">ID Number cannot be empty!</span></p>';
        }
    }
    var acctSignatories = "";
    var cntaSignLines = 0;
    $('#acctSignatoriesTblAdd').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#acctSignatoriesTblAddRow_' + rndmNum).val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {
                    if ($('#acctSignatoriesTblAddRow_' + rndmNum).find('input[type="checkbox"]:checked').length == "1") {
                        acctSignatories = acctSignatories
                                + $('#acctSignatoriesTblAddRow' + rndmNum + '_ID').text().replace(/(~)+/g, "{-;-;}").replace(/(\|)+/g, "{:;:;}") + "|";
                        //alert('NAME row '+ rndmNum + ' ' + $('#acctSignatoriesTblAddRow' + rndmNum + '_name').text());
                        cntaSignLines = cntaSignLines + 1;
                    }
                }
            }
        }
    });
    if ((acctSignatories.trim() == "" || cntaSignLines <= 0) && trnsType.trim() == "WITHDRAWAL")
    {
        errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                'font-weight:bold;color:red;">Mandate for Withdrawal cannot be empty!</span></p>';
    }
    var slctdTrnsChqLines = "";
    var cntaChqLines = 0;
    var isVld = true;
    $('#oneVmsTrnsLnsTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#oneVmsTrnsRow' + rndmNum + '_chqNo').val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {
                    var lnChqTypeID = typeof $('#oneVmsTrnsRow' + rndmNum + '_chqType').val() === 'undefined' ? '' : $('#oneVmsTrnsRow' + rndmNum + '_chqType').val();
                    if (lnChqTypeID.trim() == "")
                    {
                        isVld = false;
                        $('#oneVmsTrnsRow' + rndmNum + '_chqType').addClass('rho-error');
                    } else {
                        $('#oneVmsTrnsRow' + rndmNum + '_chqType').removeClass('rho-error');
                    }
                    var lnBnkID = typeof $('#oneVmsTrnsRow' + rndmNum + '_bnkID').val() === 'undefined' ? 0 : $('#oneVmsTrnsRow' + rndmNum + '_bnkID').val();
                    if (lnBnkID <= 0)
                    {
                        if (lnChqTypeID != 'In-House') {
                            isVld = false;
                            $('#oneVmsTrnsRow' + rndmNum + '_bnkID').addClass('rho-error');
                        }
                    } else {
                        $('#oneVmsTrnsRow' + rndmNum + '_bnkID').removeClass('rho-error');
                    }
                    var lnBrnchID = typeof $('#oneVmsTrnsRow' + rndmNum + '_brnchID').val() === 'undefined' ? 0 : $('#oneVmsTrnsRow' + rndmNum + '_brnchID').val();
                    if (lnBrnchID <= 0)
                    {
                        if (lnChqTypeID != 'In-House') {
                            isVld = false;
                            $('#oneVmsTrnsRow' + rndmNum + '_brnchID').addClass('rho-error');
                        }
                    } else {
                        $('#oneVmsTrnsRow' + rndmNum + '_brnchID').removeClass('rho-error');
                    }
                    var lnChqNo = typeof $('#oneVmsTrnsRow' + rndmNum + '_chqNo').val() === 'undefined' ? 0 : $('#oneVmsTrnsRow' + rndmNum + '_chqNo').val();
                    if (lnChqNo <= 0)
                    {
                        isVld = false;
                        $('#oneVmsTrnsRow' + rndmNum + '_chqNo').addClass('rho-error');
                    } else {
                        $('#oneVmsTrnsRow' + rndmNum + '_chqNo').removeClass('rho-error');
                    }
                    var lnChqDte = typeof $('#oneVmsTrnsRow' + rndmNum + '_chqDte').val() === 'undefined' ? '' : $('#oneVmsTrnsRow' + rndmNum + '_chqDte').val();
                    if (lnChqDte == '')
                    {
                        isVld = false;
                        $('#oneVmsTrnsRow' + rndmNum + '_chqDte').addClass('rho-error');
                    } else {
                        $('#oneVmsTrnsRow' + rndmNum + '_chqDte').removeClass('rho-error');
                    }
                    var lnChqVal = typeof $('#oneVmsTrnsRow' + rndmNum + '_chqVal').val() === 'undefined' ? 0 : $('#oneVmsTrnsRow' + rndmNum + '_chqVal').val();
                    if (lnChqVal <= 0)
                    {
                        isVld = false;
                        $('#oneVmsTrnsRow' + rndmNum + '_chqVal').addClass('rho-error');
                    } else {
                        $('#oneVmsTrnsRow' + rndmNum + '_chqVal').removeClass('rho-error');
                    }
                    var lnChqValDte = typeof $('#oneVmsTrnsRow' + rndmNum + '_chqValDte').val() === 'undefined' ? '' : $('#oneVmsTrnsRow' + rndmNum + '_chqValDte').val();
                    if (lnChqValDte == '')
                    {
                        isVld = false;
                        $('#oneVmsTrnsRow' + rndmNum + '_chqValDte').addClass('rho-error');
                    } else {
                        $('#oneVmsTrnsRow' + rndmNum + '_chqValDte').removeClass('rho-error');
                    }
                    var exchngRate = typeof $('#oneVmsTrnsRow' + rndmNum + '_exchngRate').val() === 'undefined' ? 0 : $('#oneVmsTrnsRow' + rndmNum + '_exchngRate').val();
                    if (exchngRate == 0)
                    {
                        isVld = false;
                        $('#oneVmsTrnsRow' + rndmNum + '_exchngRate').addClass('rho-error');
                    } else {
                        $('#oneVmsTrnsRow' + rndmNum + '_exchngRate').removeClass('rho-error');
                    }
                    var crncyName = typeof $('#oneVmsTrnsRow' + rndmNum + '_chqCurNm').val() === 'undefined' ? '' : $('#oneVmsTrnsRow' + rndmNum + '_chqCurNm').val();
                    if (crncyName.trim() == "")
                    {
                        isVld = false;
                        $('#oneVmsTrnsRow' + rndmNum + '_chqCurNm1').addClass('rho-error');
                    } else {
                        $('#oneVmsTrnsRow' + rndmNum + '_chqCurNm1').removeClass('rho-error');
                    }
                    if (isVld === true)
                    {
                        slctdTrnsChqLines = slctdTrnsChqLines + $('#oneVmsTrnsRow' + rndmNum + '_TrnsLnID').val() + "~"
                                + $('#oneVmsTrnsRow' + rndmNum + '_chqType').val().replace(/(~)/g, '').replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#oneVmsTrnsRow' + rndmNum + '_bnkID').val().replace(/[^-?0-9\.]/g, '').replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#oneVmsTrnsRow' + rndmNum + '_brnchID').val().replace(/[^-?0-9\.]/g, '').replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#oneVmsTrnsRow' + rndmNum + '_chqNo').val().replace(/[^-?0-9\.]/g, '').replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#oneVmsTrnsRow' + rndmNum + '_chqDte').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#oneVmsTrnsRow' + rndmNum + '_chqVal').val().replace(/[^-?0-9\.]/g, '').replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#oneVmsTrnsRow' + rndmNum + '_chqValDte').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#oneVmsTrnsRow' + rndmNum + '_chqCurNm').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#oneVmsTrnsRow' + rndmNum + '_exchngRate').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                        cntaChqLines = cntaChqLines + 1;
                    }
                }
            }
        }
    });
    if (isVld === false && (trnsType.trim() == "DEPOSIT" || trnsType.trim() == "LOAN_REPAY"))
    {
        errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                'font-weight:bold;color:red;">Please fix all Cheque Details Errors!</span></p>';
    }
    if (rhotrim(errMsg, '; ') !== '')
    {
        $body.removeClass("mdlloadingDiag");
        bootbox.alert({
            title: 'System Alert!',
            size: 'small',
            message: errMsg});
        return false;
    }
    var isMndVld = validateAcctTrnsSignatories();
    if (isMndVld === false && trnsType.trim() == "WITHDRAWAL") {
        return false;
    }
    $body.removeClass("mdlloadingDiag");
    var msg = 'Banking Transaction';
    var dialog = bootbox.alert({
        title: 'Save ' + msg,
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> Saving ' + msg + '...Please Wait...</p>',
        callback: function () {
            acctTrnsId = typeof $("#acctTrnsId").val() === 'undefined' ? -1 : $("#acctTrnsId").val();
            if (acctTrnsId > 0) {
                getCoreBankingForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', trnsType, pgNo, subPgNo, 0, 'ADD', acctTrnsId);
            }
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: pgNo,
                    q: 'UPDATE',
                    subPgNo: subPgNo,
                    vtyp: vtyp,
                    acctID: acctID,
                    docType: docType,
                    docNum: docNum,
                    trnsAmnt: trnsAmnt,
                    trnsDesc: trnsDesc,
                    acctSignatories: acctSignatories,
                    slctdTrnsChqLines: slctdTrnsChqLines,
                    PKeyID: acctTrnsId,
                    trnsType: trnsType,
                    isSelf: isSelf,
                    trnsPersonName: trnsPersonName,
                    trnsPersonTelNo: trnsPersonTelNo,
                    trnsPersonAddress: trnsPersonAddress,
                    trnsPersonIDType: trnsPersonIDType,
                    trnsPersonIDNumber: trnsPersonIDNumber,
                    shdSbmt: shdSbmt,
                    ttlDocAmntVal: ttlDocAmntVal,
                    mcfPymtCrncyNm: mcfPymtCrncyNm,
                    disbmntHdrID: disbmntHdrID,
                    disbmntDetID: disbmntDetID,
                    loanRepayType: loanRepayType,
                    loanRpmntSrcAmnt: loanRpmntSrcAmnt,
                    loanRpmntSrcAcctID: loanRpmntSrcAcctID
                },
                success: function (result) {
                    var msg = "";
                    var data = result;
                    var p_acctTrnsId = -1;

                    if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                            replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                            replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                        obj = $.parseJSON(data);
                        //SET ROW ID
                        p_acctTrnsId = obj.acctTrnsId;
                        msg = obj.sbmtMsg;

                        if (p_acctTrnsId > 0) {
                            $("#acctTrnsId").val(p_acctTrnsId);
                        }
                        if (msg.trim() === '') {
                            msg = "Transaction Saved Successfully!";
                        }
                    } else {
                        msg = data;
                    }
                    setTimeout(function () {
                        dialog.find('.bootbox-body').html(msg);
                    }, 500);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function prepareMcf_del(lnkArgs, htBody, targ, rspns)
{
    $('[data-toggle="tooltip"]').tooltip();
    if (lnkArgs.indexOf("&pg=1") !== -1 || (lnkArgs.indexOf("&pg=11") !== -1 && lnkArgs.indexOf("&vtypActn=VIEW") !== -1))//CUSTOMER LIST
    {
//alert("Hi");
        prepareCustRO(lnkArgs, htBody, targ, rspns);
    } else if (lnkArgs.indexOf("&vtypActn=EDIT") !== -1)
    {
//alert("Hello");
        prepareCustEDT(lnkArgs, htBody, targ, rspns);
    } else {
//alert("Hello Hi");
        $(targ).html(rspns);
        htBody.removeClass("mdlloading");
        if (lnkArgs.indexOf("&pg=8&subPgNo=1.2") !== -1)
        {
            var table2 = null;
            if (!$.fn.DataTable.isDataTable('#allCrncysTable')) {
                table2 = $('#allCrncysTable').DataTable({
                    "paging": false,
                    "ordering": false,
                    "info": false,
                    "bFilter": false,
                    "scrollX": false
                });
                $('#allCrncysTable').wrap('<div class="dataTables_scroll"/>');
                $('#allCrncysForm').submit(function (e) {
                    e.preventDefault();
                    return false;
                });
                if (!$.fn.DataTable.isDataTable('#crncyDenomsTable')) {
                    var table3 = $('#crncyDenomsTable').DataTable({
                        "paging": false,
                        "ordering": false,
                        "info": false,
                        "bFilter": false,
                        "scrollX": false
                    });
                    $('#crncyDenomsTable').wrap('<div class="dataTables_scroll"/>');
                }
                $('#allCrncysTable tbody').on('click', 'tr', function () {
                    if ($(this).hasClass('selected')) {
                        $(this).removeClass('selected');
                    } else {
                        table2.$('tr.selected').removeClass('selected');
                        $(this).addClass('selected');
                    }
                    var rndmNum = $(this).attr('id').split("_")[1];
                    var pKeyID = typeof $('#allCrncysRow' + rndmNum + '_CrncyID').val() === 'undefined' ? '%' : $('#allCrncysRow' + rndmNum + '_CrncyID').val();
                    getOneCrncyForm(pKeyID, 1);
                });
                $('#allCrncysTable tbody')
                        .on('mouseenter', 'tr', function () {
                            if ($(this).hasClass('highlight')) {
                                $(this).removeClass('highlight');
                            } else {
                                table2.$('tr.highlight').removeClass('highlight');
                                $(this).addClass('highlight');
                            }
                        });
            }
        } else if (lnkArgs.indexOf("&pg=8&subPgNo=1.3") !== -1)
        {
            var table2 = null;
            if (!$.fn.DataTable.isDataTable('#allVmsCgsTable')) {
                table2 = $('#allVmsCgsTable').DataTable({
                    "paging": false,
                    "ordering": false,
                    "info": false,
                    "bFilter": false,
                    "scrollX": false
                });
                $('#allVmsCgsTable').wrap('<div class="dataTables_scroll"/>');
            }
        } else if (lnkArgs.indexOf("&pg=8&subPgNo=1.4") !== -1)
        {
            var table2 = null;
            if (!$.fn.DataTable.isDataTable('#allExchRatesTable')) {
                table2 = $('#allExchRatesTable').DataTable({
                    "paging": false,
                    "ordering": false,
                    "info": false,
                    "bFilter": false,
                    "scrollX": false
                });
                $('#allExchRatesTable').wrap('<div class="dataTables_scroll"/>');
                $(".mcfExRate").focus(function () {
                    $(this).select();
                });
                $(".mcfExRate").change(function () {
                    var curValue = $(this).val();
                    $(this).val((Number(curValue.replace(/[^-?0-9\.]/g, '')).toFixed(15)));
                });
            }
        } else if (lnkArgs.indexOf("&pg=8&subPgNo=1.6") !== -1)
        {
            var table2 = null;
            if (!$.fn.DataTable.isDataTable('#allBnksTable')) {
                table2 = $('#allBnksTable').DataTable({
                    "paging": false,
                    "ordering": false,
                    "info": false,
                    "bFilter": false,
                    "scrollX": false
                });
                $('#allBnksTable').wrap('<div class="dataTables_scroll"/>');
                $('#allBnksForm').submit(function (e) {
                    e.preventDefault();
                    return false;
                });
                if (!$.fn.DataTable.isDataTable('#allBnkBrnchsTable')) {
                    var table3 = $('#allBnkBrnchsTable').DataTable({
                        "paging": false,
                        "ordering": false,
                        "info": false,
                        "bFilter": false,
                        "scrollX": false
                    });
                    $('#allBnkBrnchsTable').wrap('<div class="dataTables_scroll"/>');
                }
                $('#allBnksTable tbody').on('click', 'tr', function () {
                    if ($(this).hasClass('selected')) {
                        $(this).removeClass('selected');
                    } else {
                        table2.$('tr.selected').removeClass('selected');
                        $(this).addClass('selected');
                    }
                    var rndmNum = $(this).attr('id').split("_")[1];
                    var pKeyID = typeof $('#allBnksRow' + rndmNum + '_BankID').val() === 'undefined' ? '%' : $('#allBnksRow' + rndmNum + '_BankID').val();
                    getOneBankDetail(pKeyID, 1);
                });
                $('#allBnksTable tbody')
                        .on('mouseenter', 'tr', function () {
                            if ($(this).hasClass('highlight')) {
                                $(this).removeClass('highlight');
                            } else {
                                table2.$('tr.highlight').removeClass('highlight');
                                $(this).addClass('highlight');
                            }
                        });
            }
        } else if (lnkArgs.indexOf("&pg=4&subPgNo=4.6&subVwtyp=3") !== -1)
        {
            var table2 = null;
            if (!$.fn.DataTable.isDataTable('#allRiskProfilesTable')) {
                table2 = $('#allRiskProfilesTable').DataTable({
                    "paging": false,
                    "ordering": false,
                    "info": false,
                    "bFilter": false,
                    "scrollX": false
                });
                $('#allRiskProfilesTable').wrap('<div class="dataTables_scroll"/>');
            }
            $('#allRiskProfilesForm').submit(function (e) {
                e.preventDefault();
                return false;
            });
            if (!$.fn.DataTable.isDataTable('#allRiskProfileFctrsTable')) {
                var table3 = $('#allRiskProfileFctrsTable').DataTable({
                    "paging": false,
                    "ordering": false,
                    "info": false,
                    "bFilter": false,
                    "scrollX": false
                });
                $('#allRiskProfileFctrsTable').wrap('<div class="dataTables_scroll"/>');
            }
            $('#allRiskProfilesTable tbody').on('click', 'tr', function () {
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                } else {
                    table2.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
                var rndmNum = $(this).attr('id').split("_")[1];
                var pKeyID = typeof $('#allRiskProfilesRow' + rndmNum + '_RiskProfileID').val() === 'undefined' ? '%' : $('#allRiskProfilesRow' + rndmNum + '_RiskProfileID').val();
                getOneRiskProfileDetail(pKeyID, 1);
                //$('#allOtherInputData99').val(0);
            });
            $('#allRiskProfilesTable tbody')
                    .on('mouseenter', 'tr', function () {
                        if ($(this).hasClass('highlight')) {
                            $(this).removeClass('highlight');
                        } else {
                            table2.$('tr.highlight').removeClass('highlight');
                            $(this).addClass('highlight');
                        }
                    });
            $('#allOtherInputData99').val(0);
        } else if (lnkArgs.indexOf("&pg=4&subPgNo=4.6&subVwtyp=4") !== -1)
        {
            var table2 = null;
            if (!$.fn.DataTable.isDataTable('#allAssessmentSetsTable')) {
                table2 = $('#allAssessmentSetsTable').DataTable({
                    "paging": false,
                    "ordering": false,
                    "info": false,
                    "bFilter": false,
                    "scrollX": false
                });
                $('#allAssessmentSetsTable').wrap('<div class="dataTables_scroll"/>');
            }
            $('#allAssessmentSetsForm').submit(function (e) {
                e.preventDefault();
                return false;
            });
            if (!$.fn.DataTable.isDataTable('#allAssessmentSetPrflsTable')) {
                var table3 = $('#allAssessmentSetPrflsTable').DataTable({
                    "paging": false,
                    "ordering": false,
                    "info": false,
                    "bFilter": false,
                    "scrollX": false
                });
                $('#allAssessmentSetPrflsTable').wrap('<div class="dataTables_scroll"/>');
            }
            $('#allAssessmentSetsTable tbody').on('click', 'tr', function () {
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                } else {
                    table2.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
                var rndmNum = $(this).attr('id').split("_")[1];
                var pKeyID = typeof $('#allAssessmentSetsRow' + rndmNum + '_AssessmentSetID').val() === 'undefined' ? '%' : $('#allAssessmentSetsRow' + rndmNum + '_AssessmentSetID').val();
                getOneAssessmentSetDetail(pKeyID, 1);
                //$('#allOtherInputData99').val(0);
            });
            $('#allAssessmentSetsTable tbody')
                    .on('mouseenter', 'tr', function () {
                        if ($(this).hasClass('highlight')) {
                            $(this).removeClass('highlight');
                        } else {
                            table2.$('tr.highlight').removeClass('highlight');
                            $(this).addClass('highlight');
                        }
                    });
            $('#allOtherInputData99').val(0);
        }
    }
    $(document).ready(function () {

        $('#mcfIndCstmrForm').submit(function (e) {
            e.preventDefault();
            return false;
        });
        $('#allVmsCgsForm').submit(function (e) {
            e.preventDefault();
            return false;
        });
        $('#mcfCorpCstmrForm').submit(function (e) {
            e.preventDefault();
            return false;
        });
        $('#mcfGrpCstmrForm').submit(function (e) {
            e.preventDefault();
            return false;
        });
        $('#mcfOthPCstmrForm').submit(function (e) {
            e.preventDefault();
            return false;
        });
        $('#mcfAcntTrnsForm').submit(function (e) {
            e.preventDefault();
            return false;
        });
        $('#mcfAcntOthPForm').submit(function (e) {
            e.preventDefault();
            return false;
        });
        $('#dataAdminForm').submit(function (e) {
            e.preventDefault();
            return false;
        });
        $('.form_date').datetimepicker({
            format: "dd-M-yyyy",
            language: 'en',
            weekStart: 0,
            todayBtn: true,
            autoclose: true,
            todayHighlight: true,
            keyboardNavigation: true,
            startView: 2,
            minView: 2,
            maxView: 4,
            forceParse: true
        });
        //LOAD HOLIDAYS AND DATES
        //alert("Him");
        var i = 0;
        $("#trnsNtAllwdDysSlt option").each(function ()
        {
//alert($(this).val());
            trnsNtAllwdDys[i] = $(this).val();
            i = i + 1;
        });
        var k = 0;
        $("#trnsNtAllwdDtsSlt option").each(function ()
        {
//alert($(this).val());
            trnsNtAllwdDys[k] = $(this).val();
            k = k + 1;
        });
//        var j = 0;
//        for(j = 0; j < trnsNtAllwdDys.length; j++)
//        {
//           alert(trnsNtAllwdDys[j]);
//        }       

    });
}

function getPrptyColtsForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, listTableID, rowID, callBackFunc)
{
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }
//alert('Hello');
    if (!$.fn.DataTable.isDataTable('#' + listTableID)) {
        var table1 = $('#' + listTableID).DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#' + listTableID + ' tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table1.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
        $('#' + listTableID + ' tbody').on('mouseenter', 'tr', function () {
            if ($(this).hasClass('highlight')) {
                $(this).removeClass('highlight');
            } else {
                table1.$('tr.highlight').removeClass('highlight');
                $(this).addClass('highlight');
            }
        });
    }

//var p_statusTitle = "Incomplete";

    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
            $('#' + modalBodyID).html(xmlhttp.responseText);
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.7', 'prptyColts');
                $('#' + modalBodyID).html('');
                $('#' + titleElementID).html('');
                $(e.currentTarget).unbind();
            });
            $('#' + titleElementID).html(formTitle);
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            //$body.removeClass("mdlloading");

            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + elementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/

                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + pKeyID);
}

function deletePrptyColt(prptyColtID)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Property Collateral?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        if (data == "SORRY") {
                            $msg = "SORRY! Can't Delete an Property Collateral that is in active Use.";
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: $msg,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        } else {

                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                            getCustData('', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.7', 'prptyColts');
                        }
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.7&q=DELETE&PKeyID=" + prptyColtID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function savePrptyColt(pgNo, subPgNo, vtyp)
{

    var box;
    var box2;
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var prptyColtId = typeof $("#prptyColtId").val() === 'undefined' ? -1 : $("#prptyColtId").val();
        var prptyColtNm = typeof $("#prptyColtNm").val() === 'undefined' ? '' : $("#prptyColtNm").val();
        var prptyColtDesc = typeof $("#prptyColtDesc").val() === 'undefined' ? '' : $("#prptyColtDesc").val();
        var prptyColtType = typeof $("#prptyColtType").val() === 'undefined' ? '' : $("#prptyColtType").val();
        var prptyOwnerCustID = typeof $("#prptyOwnerCustID").val() === 'undefined' ? -1 : $("#prptyOwnerCustID").val();
        var prptyOwnerCustType = typeof $("#prptyOwnerCustType").val() === 'undefined' ? '' : $("#prptyOwnerCustType").val();
        var prptyValue = typeof $("#prptyValue").val() === 'undefined' ? 0 : $("#prptyValue").val().trim().length === 0 ? 0 : $("#prptyValue").val();
        var prptyValuerSupID = typeof $("#prptyValuerSupID").val() === 'undefined' ? -1 : $("#prptyValuerSupID").val();
        var prptyColtParentID = typeof $("#prptyColtParentID").val() === 'undefined' ? -1 : $("#prptyColtParentID").val(); 
        
        if (prptyColtNm.trim() == "" || prptyColtNm == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide Property Name/Title/Registration No.",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }
        if (prptyColtType.trim() == "" || prptyColtType == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide Property Type",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }
        if (prptyOwnerCustID.trim() == "" || prptyOwnerCustID == undefined || prptyOwnerCustID == -1) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide Property Owner",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }
        if (prptyValue.trim() == "" || prptyValue == undefined || parseFloat(prptyValue) < 0) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide Property Value",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }        

        $body.removeClass("mdlloading");
        $body.removeClass("mdlloadingDiag");
        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('prptyColtId', prptyColtId);
        formData.append('prptyColtNm', prptyColtNm);
        formData.append('prptyColtDesc', prptyColtDesc);
        formData.append('prptyColtType', prptyColtType);
        
        formData.append('prptyOwnerCustID', prptyOwnerCustID);
        formData.append('prptyOwnerCustType', prptyOwnerCustType);
        formData.append('prptyValue', prptyValue);
        formData.append('prptyValuerSupID', prptyValuerSupID);      
        formData.append('prptyColtParentID', prptyColtParentID);            
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                //$body.removeClass("mdlloadingDiag");
                //$body.removeClass("mdlloading");

                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    $("#prptyColtId").val(obj.prptyColtId);
                    box.modal('hide');
                    getPrptyColtsForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Property Collateral', 15, subPgNo, 0, 'EDIT', obj.prptyColtId, 'indCustTable', 'indCustTableRow1', function () {

                        msg = "Property Collateral Successfully Saved!";
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                            }
                        });
                    });
                } else {

                    msg = data;
                    box.modal('hide');
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function submitWithdrawPrptyColt(pgNo, subPgNo, vtyp, actn)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var box;
        var box2;
        var mnBox;
        var waitMsg = "";
        var rtrnSuccessMsg = "";
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        var prptyColtId = typeof $("#prptyColtId").val() === 'undefined' ? -1 : $("#prptyColtId").val();
        var prptyColtNm = typeof $("#prptyColtNm").val() === 'undefined' ? '' : $("#prptyColtNm").val();
        var prptyColtDesc = typeof $("#prptyColtDesc").val() === 'undefined' ? '' : $("#prptyColtDesc").val();
        var prptyColtType = typeof $("#prptyColtType").val() === 'undefined' ? '' : $("#prptyColtType").val();
        var prptyOwnerCustID = typeof $("#prptyOwnerCustID").val() === 'undefined' ? -1 : $("#prptyOwnerCustID").val();
        var prptyOwnerCustType = typeof $("#prptyOwnerCustType").val() === 'undefined' ? '' : $("#prptyOwnerCustType").val();
        var prptyValue = typeof $("#prptyValue").val() === 'undefined' ? 0 : $("#prptyValue").val().trim().length === 0 ? 0 : $("#prptyValue").val();
        var prptyValuerSupID = typeof $("#prptyValuerSupID").val() === 'undefined' ? -1 : $("#prptyValuerSupID").val();
        var prptyColtParentID = typeof $("#prptyColtParentID").val() === 'undefined' ? -1 : $("#prptyColtParentID").val(); 

        var actnTyp;
        var prmtMsg = "Are you sure you want to submit Property Collateral for Authorization?";
        if (actn == 'SUBMIT')
        {
            actnTyp = 99;
            rtrnSuccessMsg = "SUBMITTED for Authorization";
            waitMsg = "Submitting...";
            if (prptyColtNm.trim() == "" || prptyColtNm == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide Property Name/Title/Registration No.",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
            if (prptyColtType.trim() == "" || prptyColtType == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide Property Type",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
            if (prptyOwnerCustID.trim() == "" || prptyOwnerCustID == undefined || prptyOwnerCustID == -1) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide Property Owner",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
            if (prptyValue.trim() == "" || prptyValue == undefined || parseFloat(prptyValue) < 0) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide Property Value",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }

        } else if (actn == 'WITHDRAW') {
            rtrnSuccessMsg = "WITHDRAWN";
            waitMsg = "Withdrawing...";
            actnTyp = 3;
            prmtMsg = "Are you sure you want to Withdrawal Property Collateral?";
        } else if (actn == 'REJECT') {
            rtrnSuccessMsg = "REJECTED";
            waitMsg = "Rejecting...";
            actnTyp = 4;
            prmtMsg = "Are you sure you want to Reject Property Collateral?";
        } else if (actn == 'AUTHORIZE') {
            rtrnSuccessMsg = "AUTHORIZED";
            waitMsg = "Authorizing...";
            actnTyp = 5;
            prmtMsg = "Are you sure you want to Authorize Property Collateral?";
        } else if (actn == 'REVERSE') {
             rtrnSuccessMsg = "REVERSED";
            waitMsg = "Reversing...";
            actnTyp = 6;
            prmtMsg = "Are you sure you want to REVERSE this Property Collateral?";
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Constructing.......Please Wait",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }

        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('q', 'UPDATE');
        formData.append('vtyp', vtyp);
        formData.append('actyp', actnTyp);
        formData.append('prptyColtId', prptyColtId);
        formData.append('prptyColtNm', prptyColtNm);
        formData.append('prptyColtDesc', prptyColtDesc);
        formData.append('prptyColtType', prptyColtType);
        formData.append('prptyOwnerCustID', prptyOwnerCustID);
        formData.append('prptyOwnerCustType', prptyOwnerCustType);
        formData.append('prptyValue', prptyValue);
        formData.append('prptyValuerSupID', prptyValuerSupID);      
        formData.append('prptyColtParentID', prptyColtParentID); 
        
       mnBox = bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {
                   $body.removeClass("mdlloading");
                   $body.removeClass("mdlloadingDiag");
                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> '+waitMsg+' Please Wait...</div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = (w - b) / 2;
                            return h + "px";
                        }
                    });
                
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            
                            box.modal('hide');
                            
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                            
                            getPrptyColtsForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Property Collateral', 15, 4.7,0,'EDIT', prptyColtId,'indCustTable','indCustTableRow1', function () {
                                    box2 = bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: "Property Collateral Successfully "+rtrnSuccessMsg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });                            
                                

                            } else {

                                box2 = bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: data,
                                    callback: function () { /* your callback code */
                                    }
                                });
                                return false;

                            }


                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });

                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
    
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });    
}


//MAJOR SECTOR
function deleteSectorMajor(sectorMajorID)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        title: 'Delete Major Sector?',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">DELETE</span> this Major Sector?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        if (data == "SORRY") {
                            $msg = "SORRY! Can't Delete an Major Sector that is in active Use.";
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: $msg,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        } else {

                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                            getAllSectorMajors('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.8");
                        }
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.8&q=DELETE&PKeyID=" + sectorMajorID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function saveSectorMajor(pgNo, subPgNo, subVwtyp, vtyp)
{

    var box;
    var box2;
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var sectorMajorId = typeof $("#oneSectorMajorDetID").val() === 'undefined' ? '-1' : $("#oneSectorMajorDetID").val();
        var sectorName = typeof $("#oneSectorMajorDetName").val() === 'undefined' ? '' : $("#oneSectorMajorDetName").val();
        var sectorDesc = typeof $("#oneSectorMajorDetDesc").val() === 'undefined' ? '' : $("#oneSectorMajorDetDesc").val();
        var isEnabled = typeof $("#oneSectorMajorDetIsEnbld").val() === 'undefined' ? 'Yes' : $("#oneSectorMajorDetIsEnbld").val();
        if (sectorName.trim() == "" || sectorName == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide Major Sector Name",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }

        $body.removeClass("mdlloading");
        $body.removeClass("mdlloadingDiag");
        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', 15);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('sectorMajorId', sectorMajorId);
        formData.append('sectorName', sectorName);
        formData.append('sectorDesc', sectorDesc);
        formData.append('isEnabled', isEnabled);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                //$body.removeClass("mdlloadingDiag");
                //$body.removeClass("mdlloading");

                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    box.modal('hide');
                    getAllSectorMajors('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.8");
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: "Major Sector Saved Successfully",
                        callback: function () { /* your callback code */
                        }
                    });
                } else {

                    msg = data;
                    box.modal('hide');
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function getOneSectorMajorDetail(pKeyID, vwtype)
{
//alert('Hi');
    var lnkArgs = 'grp=17&typ=1&pg=4&subPgNo=4.81&vtyp=0&sbmtdSectorMajorID=' + pKeyID;
    doAjaxWthCallBck(lnkArgs, 'allSectorMajorsDetailInfo', 'PasteDirect', '', '', '', function () {
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();
            var table2 = $('#allSectorMinorTable').DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "bFilter": false,
                "scrollX": false
            });
            $('#allSectorMinorTable').wrap('<div class="dataTables_scroll"/>');
        });
    });
}

function getAllSectorMajors(actionText, slctr, linkArgs)
{
    var srchFor = typeof $("#allSectorMajorsSrchFor").val() === 'undefined' ? '%' : $("#allSectorMajorsSrchFor").val();
    var srchIn = typeof $("#allSectorMajorsSrchIn").val() === 'undefined' ? 'Both' : $("#allSectorMajorsSrchIn").val();
    var pageNo = typeof $("#allSectorMajorsPageNo").val() === 'undefined' ? 1 : $("#allSectorMajorsPageNo").val();
    var limitSze = typeof $("#allSectorMajorsDsplySze").val() === 'undefined' ? 10 : $("#allSectorMajorsDsplySze").val();
    var sortBy = typeof $("#allSectorMajorsSortBy").val() === 'undefined' ? '' : $("#allSectorMajorsSortBy").val();
    var isEnabled = typeof $("#allSectorMajorsIsEnabled").val() === 'undefined' ? '' : $("#allSectorMajorsIsEnabled").val();
    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy + "&isEnabled=" + isEnabled
    openATab(slctr, linkArgs);
}

function enterKeyFuncAllSectorMajors(e, actionText, slctr, linkArgs)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAllSectorMajors(actionText, slctr, linkArgs);
    }
}

function getAllSectorMinor(actionText, slctr, linkArgs)
{
    var srchFor = typeof $("#allSectorMinorSrchFor").val() === 'undefined' ? '%' : $("#allSectorMinorSrchFor").val();
    var srchIn = typeof $("#allSectorMinorSrchIn").val() === 'undefined' ? 'Both' : $("#allSectorMinorSrchIn").val();
    var pageNo = typeof $("#allSectorMinorPageNo").val() === 'undefined' ? 1 : $("#allSectorMinorPageNo").val();
    var limitSze = typeof $("#allSectorMinorDsplySze").val() === 'undefined' ? 10 : $("#allSectorMinorDsplySze").val();
    var sortBy = typeof $("#allSectorMinorSortBy").val() === 'undefined' ? '' : $("#allSectorMinorSortBy").val();
    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy;
    openATab(slctr, linkArgs);
}

function enterKeyFuncAllSectorMinor(e, actionText, slctr, linkArgs)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAllSectorMinor(actionText, slctr, linkArgs);
    }
}

function getOneSectorMajorForm(pKeyID, vwtype)
{
    var lnkArgs = 'grp=17&typ=1&pg=4&subPgNo=4.81&vtyp=' + vwtype + '&sbmtdSectorMajorID=' + pKeyID;
    doAjaxWthCallBck(lnkArgs, 'allSectorMajorsDetailInfo', 'PasteDirect', '', '', '', function () {
        var table1 = $('#allSectorMinorTable').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#allSectorMinorTable').wrap('<div class="dataTables_scroll"/>');
    });
    $('#allSectorMajorsForm').submit(function (e) {
        e.preventDefault();
        return false;
    });
}

//MINOR SECTOR
function saveSectorMinor()
{
//alert("Hi");
    var sbmtdSectorMajorID = typeof $("#sbmtdSectorMajorID").val() === 'undefined' ? '-1' : $("#sbmtdSectorMajorID").val();
    var slctdSectorMinor = "";
    var errCount = 0;
    var rcdCount = 0;
    var rngPrflFctrScoreTtl = 0;
    $('#allSectorMinorTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#allSectorMinorRow' + rndmNum + '_MinorSectorNm').val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {
                    if ($('#allSectorMinorRow' + rndmNum + '_MinorSectorNm').val() == "") {
                        $('#allSectorMinorRow' + rndmNum + '_MinorSectorNm').css('border-color', 'red');
                        $('#allSectorMinorRow' + rndmNum + '_MinorSectorNm').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allSectorMinorRow' + rndmNum + '_MinorSectorNm').css('border-color', '#ccc');
                        $('#allSectorMinorRow' + rndmNum + '_MinorSectorNm').css('border-width', '1px');
                    }
                    if ($('#allSectorMinorRow' + rndmNum + '_MinorSectorDesc').val() == "") {
                        $('#allSectorMinorRow' + rndmNum + '_MinorSectorDesc').css('border-color', 'red');
                        $('#allSectorMinorRow' + rndmNum + '_MinorSectorDesc').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allSectorMinorRow' + rndmNum + '_MinorSectorDesc').css('border-color', '#ccc');
                        $('#allSectorMinorRow' + rndmNum + '_MinorSectorDesc').css('border-width', '1px');
                    }
                    if (errCount <= 0) {
                        slctdSectorMinor = slctdSectorMinor
                                + $('#allSectorMinorRow' + rndmNum + '_MinorSectorID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allSectorMinorRow' + rndmNum + '_MinorSectorNm').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allSectorMinorRow' + rndmNum + '_MinorSectorDesc').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allSectorMinorRow' + rndmNum + '_isEnabledNm').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";

                        rcdCount = rcdCount + 1;
                    }

                }
            }
        }
    });
    if (errCount > 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please enter data in all highlighted Minor Sector record</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (rcdCount <= 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please provide at lease One Minor Sector record</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    var dialog = bootbox.alert({
        title: 'Save Minor Sectors?',
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> Saving Minor Sector...Please Wait...</p>',
        callback: function () {
            getAllSectorMajors('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.8");
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 15,
                    q: 'UPDATE',
                    subPgNo: 4.8,
                    actyp: 1,
                    sbmtdSectorMajorID: sbmtdSectorMajorID,
                    slctdSectorMinor: slctdSectorMinor
                },
                success: function (result) {
                    setTimeout(function () {
                        dialog.find('.bootbox-body').html(result);
                    }, 500);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function delSectorMinor(rowIDAttrb)
{
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    var MinorSectorNm = '';
    if (typeof $('#allSectorMinorRow' + rndmNum + '_MinorSectorID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#allSectorMinorRow' + rndmNum + '_MinorSectorID').val();
        MinorSectorNm = $('#allSectorMinorRow' + rndmNum + '_MinorSectorID').val();
    }
    var dialog = bootbox.confirm({
        title: 'Remove Minor Sector?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">REMOVE</span> this Minor Sector?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Remove Minor Sector?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Removing Minor Sector...Please Wait...</p>',
                    callback: function () {
                        getAllSectorMajors('', "#allmodules", "grp=17&typ=1&pg=4&subPgNo=4.8");
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 15,
                                    q: 'DELETE',
                                    subPgNo: 4.8,
                                    actyp: 1,
                                    MinorSectorNm: MinorSectorNm,
                                    PKeyID: pKeyID
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                        if (result1.indexOf("Success") !== -1) {
                                            $("#" + rowIDAttrb).remove();
                                        }
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            $("#" + rowIDAttrb).remove();
                            dialog1.find('.bootbox-body').html('Row Removed Successfully!');
                        }, 500);
                    }
                });
            }
        }
    });
}

function getMnlSvngsIntrstPymntForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, listTableID, rowID, callBackFunc)
{
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }
//alert('Hello');
    if (!$.fn.DataTable.isDataTable('#' + listTableID)) {
        var table1 = $('#' + listTableID).DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#' + listTableID + ' tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table1.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
        $('#' + listTableID + ' tbody').on('mouseenter', 'tr', function () {
            if ($(this).hasClass('highlight')) {
                $(this).removeClass('highlight');
            } else {
                table1.$('tr.highlight').removeClass('highlight');
                $(this).addClass('highlight');
            }
        });
    }

//var p_statusTitle = "Incomplete";

    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
            $('#' + modalBodyID).html(xmlhttp.responseText);
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=2&subPgNo=2.2', 'mnlSvngsIntrstPymnt');
                $('#' + modalBodyID).html('');
                $('#' + titleElementID).html('');
                $(e.currentTarget).unbind();
            });
            $('#' + titleElementID).html(formTitle);
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            //$body.removeClass("mdlloading");

            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + elementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/

                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + pKeyID);
}

function deleteMnlSvngsIntrstPymnt(mnlpymntSvngsHdrID)
{
     var mnlpymntSvngsHdrStatus = typeof $("#mnlpymntSvngsHdrStatus").val() === 'undefined' ? -1 : $("#mnlpymntSvngsHdrStatus").val();
       if (mnlpymntSvngsHdrStatus == "Unauthorized, Unprocessed"  || mnlpymntSvngsHdrStatus == "Authorized, Processed") {
           bootbox.alert({
               size: "small",
               title: "Rhomicom Message",
               message: "<span style='color:red; font-weight:bold !important;'>Sorry! Cannot delete Batch with the following statuses:</br>i) Unauthorized, Unprocessed</br>ii) Authorized, Unprocessed</span>",
               callback: function () { /* your callback code */
               }
           });
           return false;
       }
    
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Batch?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        if (data == "SORRY") {
                            $msg = "<span style='color:red; font-weight:bold !important;'>Sorry! Cannot delete Batch with the following statuses:</br>i) Unauthorized, Unprocessed</br>ii) Authorized, Unprocessed</span>";
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: $msg,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        } else {

                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                            getCustData('', '#allmodules', 'grp=17&typ=1&pg=2&subPgNo=2.2', 'mnlSvngsIntrstPymnt');
                        }
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=13&subPgNo=2.2&q=DELETE&PKeyID=" + mnlpymntSvngsHdrID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function saveMnlSvngsIntrstPymnt(pgNo, subPgNo, vtyp)
{

    var box;
    var box2;
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var mnlpymntSvngsHdrId = typeof $("#mnlpymntSvngsHdrId").val() === 'undefined' ? -1 : $("#mnlpymntSvngsHdrId").val();
        var mnlpymntSvngsHdrDesc = typeof $("#mnlpymntSvngsHdrDesc").val() === 'undefined' ? '' : $("#mnlpymntSvngsHdrDesc").val();
        var currencyNm = typeof $("#currencyNm").val() === 'undefined' ? -1 : $("#currencyNm").val();
        var branchID = typeof $("#branchID").val() === 'undefined' ? -1 : $("#branchID").val(); 
        
        if (mnlpymntSvngsHdrDesc.trim() == "" || mnlpymntSvngsHdrDesc == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide a Description",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }       

        $body.removeClass("mdlloading");
        $body.removeClass("mdlloadingDiag");
        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('mnlpymntSvngsHdrId', mnlpymntSvngsHdrId);
        formData.append('mnlpymntSvngsHdrDesc', mnlpymntSvngsHdrDesc);
        formData.append('currencyNm', currencyNm);      
        formData.append('branchID', branchID);            
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                //$body.removeClass("mdlloadingDiag");
                //$body.removeClass("mdlloading");

                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    $("#mnlpymntSvngsHdrId").val(obj.mnlpymntSvngsHdrId);
                    box.modal('hide');
                    getMnlSvngsIntrstPymntForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Batch', 13, subPgNo, 0, 'EDIT', obj.mnlpymntSvngsHdrId, 'indCustTable', 'indCustTableRow1', function () {

                        msg = "Batch Successfully Saved!";
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                            }
                        });
                    });
                } else {

                    msg = data;
                    box.modal('hide');
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function processMnlSvngsIntrstPymnt()
{
    var mnlpymntSvngsHdrStatus = typeof $("#mnlpymntSvngsHdrStatus").val() === 'undefined' ? -1 : $("#mnlpymntSvngsHdrStatus").val();
    var mnlpymntSvngsHdrId = typeof $("#mnlpymntSvngsHdrId").val() === 'undefined' ? -1 : $("#mnlpymntSvngsHdrId").val();
    var currencyNm = typeof $("#currencyNm").val() === 'undefined' ? -1 : $("#currencyNm").val();
    var branchID = typeof $("#branchID").val() === 'undefined' ? -1 : $("#branchID").val(); 
    
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to process this Batch and Credit Interest?</br>Please Note: This action cannot be undone if you select 'Yes'",
        callback: function (result) {
            /* your callback code */
            if (result) {

//                box = bootbox.dialog({size: "small",
//                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Processing. Please Wait...</div>'});
                box = bootbox.alert({
                        title: 'Processing.....',
                        size: 'small',
                        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Processesing...Please Wait...</div>',
                        callback: function () {
                            //getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.1', 'mcfIndCstmr');
                            //getAllRpts('clear', '#allmodules', 'grp=9&typ=1&pg=1&vtyp=0');
                        }
                    });                
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b-150) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                
                xmlhttp.onreadystatechange = function ()
                {
                    var data;
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {
                        data = xmlhttp.responseText;
                        if (data != "SUCCESS") {
                            $msg = "<span style='color:red; font-weight:bold !important;'>Sorry! Failed to process Batch</br>"+data+"</span>";
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: $msg,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        } else if (data == "SUCCESS") {

                            getMnlSvngsIntrstPymntForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Batch', 13, 2.2, 0, 'EDIT', mnlpymntSvngsHdrId, 'indCustTable', 'indCustTableRow1', function(){
                                box.modal('hide');
                                box2 = bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: "Payment Batch Completed Successfully",
                                    callback: function () { /* your callback code */
                                    }
                                });
                                box2.find('.modal-content').css({
                                    'margin-top': function () {
                                        var w = $(window).height();
                                        var b = $(".modal-dialog").height();
                                        // should not be (w-h)/2
                                        var h = (w - b - 150) / 2;
                                        return h + "px";
                                    }
                                });
                            });  
                        }
                    }                                         
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=13&subPgNo=2.2&q=UPDATE&actyp=1"+
                "&mnlpymntSvngsHdrId=" + mnlpymntSvngsHdrId +
                "&currencyNm=" + currencyNm +
                "&branchID=" + branchID); 

            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function submitWithdrawMnlSvngsIntrstPymnt(pgNo, subPgNo, vtyp, actn)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var box;
        var box2;
        var mnBox;
        var waitMsg = "";
        var rtrnSuccessMsg = "";
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        var mnlpymntSvngsHdrId = typeof $("#mnlpymntSvngsHdrId").val() === 'undefined' ? -1 : $("#mnlpymntSvngsHdrId").val();
        var mnlpymntSvngsHdrDesc = typeof $("#mnlpymntSvngsHdrDesc").val() === 'undefined' ? '' : $("#mnlpymntSvngsHdrDesc").val();
        var currencyNm = typeof $("#currencyNm").val() === 'undefined' ? -1 : $("#currencyNm").val();
        var branchID = typeof $("#branchID").val() === 'undefined' ? -1 : $("#branchID").val(); 

        var actnTyp;
        var prmtMsg = "Are you sure you want to submit Interest Batch for Authorization?";
        if (actn == 'SUBMIT')
        {
            actnTyp = 99;
            rtrnSuccessMsg = "SUBMITTED for Authorization";
            waitMsg = "Submitting...";
            if (mnlpymntSvngsHdrDesc.trim() == "" || mnlpymntSvngsHdrDesc == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide a Description",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            } 

        } else if (actn == 'WITHDRAW') {
            rtrnSuccessMsg = "WITHDRAWN";
            waitMsg = "Withdrawing...";
            actnTyp = 3;
            prmtMsg = "Are you sure you want to Withdrawal Payment Batch?";
        } else if (actn == 'REJECT') {
            rtrnSuccessMsg = "REJECTED";
            waitMsg = "Rejecting...";
            actnTyp = 4;
            prmtMsg = "Are you sure you want to Reject Payment Batch?";
        } else if (actn == 'AUTHORIZE') {
            rtrnSuccessMsg = "AUTHORIZED";
            waitMsg = "Authorizing...";
            actnTyp = 5;
            prmtMsg = "Are you sure you want to Authorize Payment Batch?";
        } else if (actn == 'REVERSE') {
             rtrnSuccessMsg = "REVERSED";
            waitMsg = "Reversing...";
            actnTyp = 6;
            prmtMsg = "Are you sure you want to REVERSE this Payment Batch?";

            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Constructing.......Please Wait",
                callback: function () { /* your callback code */
                }
            });
            return false;

        }

        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('q', 'UPDATE');
        formData.append('vtyp', vtyp);
        formData.append('actyp', actnTyp);
        formData.append('mnlpymntSvngsHdrId', mnlpymntSvngsHdrId);
        formData.append('mnlpymntSvngsHdrDesc', mnlpymntSvngsHdrDesc);
        formData.append('currencyNm', currencyNm);
        formData.append('branchID', branchID);
        
       mnBox = bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {
                   $body.removeClass("mdlloading");
                   $body.removeClass("mdlloadingDiag");
                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> '+waitMsg+' Please Wait...</div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = (w - b) / 2;
                            return h + "px";
                        }
                    });
                
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            
                            box.modal('hide');
                            
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                            
                            getMnlSvngsIntrstPymntForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Batch', 13, 2.2,0,'EDIT', mnlpymntSvngsHdrId,'indCustTable','indCustTableRow1', function () {
                                    box2 = bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: "Batch Successfully "+rtrnSuccessMsg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });                            
                                

                            } else {

                                box2 = bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: data,
                                    callback: function () { /* your callback code */
                                    }
                                });
                                return false;

                            }


                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });

                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
    
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });    
}

function processMnlSvngsIntrstPymnt_WIP()
{
    var mnlpymntSvngsHdrStatus = typeof $("#mnlpymntSvngsHdrStatus").val() === 'undefined' ? -1 : $("#mnlpymntSvngsHdrStatus").val();
    var mnlpymntSvngsHdrId = typeof $("#mnlpymntSvngsHdrId").val() === 'undefined' ? -1 : $("#mnlpymntSvngsHdrId").val();
    var currencyNm = typeof $("#currencyNm").val() === 'undefined' ? -1 : $("#currencyNm").val();
    var branchID = typeof $("#branchID").val() === 'undefined' ? -1 : $("#branchID").val(); 
    
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to process this Batch and Credit Interest?</br>Please Note: This action cannot be undone if you select 'Yes'",
        callback: function (result) {
            /* your callback code */
            if (result) {

//                box = bootbox.dialog({size: "small",
//                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Processing. Please Wait...</div>'});
                box = bootbox.alert({
                        title: 'Processing.....',
                        size: 'small',
                        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Processesing...Please Wait...</div>',
                        callback: function () {
                            //getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.1', 'mcfIndCstmr');
                            //getAllRpts('clear', '#allmodules', 'grp=9&typ=1&pg=1&vtyp=0');
                        }
                    });                
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b-150) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                
                xmlhttp.onreadystatechange = function ()
                {
                    var data;
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {
                        data = xmlhttp.responseText;
                        if (data == "SORRY") {
                            $msg = "<span style='color:red; font-weight:bold !important;'>Sorry! Cannot delete Batch with the following statuses:</br>i) Unauthorized, Unprocessed</br>ii) Authorized, Unprocessed</span>";
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: $msg,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        } else {

                            if(data >= 91){

                                box.modal('hide');
                                box2 = bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: data,
                                    callback: function () { /* your callback code */
                                    }
                                });
                                box2.find('.modal-content').css({
                                    'margin-top': function () {
                                        var w = $(window).height();
                                        var b = $(".modal-dialog").height();
                                        // should not be (w-h)/2
                                        var h = (w - b - 150) / 2;
                                        return h + "px";
                                    }
                                });
                                getCustData('', '#allmodules', 'grp=17&typ=1&pg=2&subPgNo=2.2', 'mnlSvngsIntrstPymnt');
                            }
                        }
                    } else {
                        setTimeout("sendRequest()", 500);
                    }                                         
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=13&subPgNo=2.2&q=UPDATE&actyp=1"+
                "&mnlpymntSvngsHdrId=" + mnlpymntSvngsHdrId +
                "&currencyNm=" + currencyNm +
                "&branchID=" + branchID); 

            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function unfreezeDialog(){
    var box = bootbox.alert({
        size: "small",
        title: "Rhomicom Message",
        message: "Form Refresh Successfully!"
    });
//    box.modal('hide');
//    setTimeout(function() {
//    // be careful not to call box.hide() here, which will invoke jQuery's hide method
//    box.modal('hide');
//}, 500);
}


function createRequestObject() {
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    return xmlhttp;
}

function sendRequest() {
    var xmlhttp = createRequestObject();
    var prgrs = typeof $("#prgrs").val() === 'undefined' ? 0 : $("#prgrs").val(); 

    xmlhttp.open("POST", "index.php", true);
    xmlhttp.onreadystatechange = function () { handleResponse(xmlhttp); };    
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=13&subPgNo=2.2&q=UPDATE&actyp=2"+
    "&mnlpymntSvngsHdrId=" + mnlpymntSvngsHdrId +
    "&currencyNm=" + currencyNm +
    "&branchID=" + branchID +
    "&prgrs="+prgrs);      
}

function handleResponse(xmlhttp) {
    var response;
    var mnlpymntSvngsHdrId = typeof $("#mnlpymntSvngsHdrId").val() === 'undefined' ? -1 : $("#mnlpymntSvngsHdrId").val();    
    if (xmlhttp.readyState <= 4) {
        response = xmlhttp.responseText;

        var elem = document.getElementById('myBar1');   
        
        if (response < 101) { 
            $("#prgrs").val(response);
            if(response == 100){
                    bootbox.hideAll();
                    var msg = "Batch Successfully Processed!";
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                            getMnlSvngsIntrstPymntForm('myFormsModalx', 'myFormsModalxBody', 'myFormsModalxTitle', 'Edit Batch', 13, 2.2, 0, 'EDIT', mnlpymntSvngsHdrId, 'indCustTable', 'indCustTableRow1');                                
                        }
                    });                 
            } else {
                elem.style.width = response + '%';  
                setTimeout("sendRequest()", 500);
            }
        }
    }
}


function blockCloseReopenAccnts(actn)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var acctID = typeof $("#acctID").val() === 'undefined' ? -1 : $("#acctID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        var closeReason = typeof $("#closeReason").val() === 'undefined' ? -1 : $("#closeReason").val();
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        //var qstnNoId
        //alert('chkedAssmntID'+chkedAssmntID)
        var actnTyp = "BLOCKED";
        var prmtMsg = "Are you sure you want to BLOCK this Account?"
        if (actn == 2) {
            actnTyp = "UNBLOCKED";
            prmtMsg = "Are you sure you want to UNBLOCK this Account?"
        } else if (actn == 3) {
            actnTyp = "CLOSED";
            prmtMsg = "Are you sure you want to CLOSE this Account?"
        } else if (actn == 4) {
            actnTyp = "RE-OPENED";
            prmtMsg = "Are you sure you want to RE-OPEN this Account?"
        }

        if (closeReason.trim() === "") {
            $body.removeClass("mdlloadingDiag");
            $body.removeClass("mdlloading");
            
            $("#closeReason").css('border-color', 'red');
            $("#closeReason").css('border-width', '2px');
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please Provide a reason for this transaction in the Comments field",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }
        
        $("#closeReason").css('border-color', '#ccc');
        $("#closeReason").css('border-width', '1px');

        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', 13);
        formData.append('subPgNo', 2.1);
        formData.append('q', 'UPDATE');
        formData.append('vtyp', actn);
        formData.append('acctID', acctID);
        formData.append('closeReason', closeReason);
        formData.append('rvsnTtl',rvsnTtl);
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    $body = $("body");
                    $body.addClass("mdlloadingDiag");
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                acctID = obj.acctID;
                                
                                getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'Edit Customer Account', 13, 2.1, 0, 'EDIT', acctID, 'custAcctTable', 'indCustTableRow1', -1, function(){
                                    bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: "Account has been "+actnTyp+"</br><b>Please submit for AUTHORIZATION</b>",
                                        callback: function () { /* your callback code */

                                         }
                                    });
                                });                                
                            } else {
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: data,
                                    callback: function () { /* your callback code */
                                    }
                                });
                                return false;
                            }                            

                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function dsplyPrdtForm(){
    var prdtTypeID = typeof $("#prdtTypeID").val() === 'undefined' ? -1 : $("#prdtTypeID").val();
    if(parseInt(prdtTypeID) <= 0){
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please Select a Product First",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
    getProductsForm('myFormsModalLgCA', 'myFormsModalBodyLgCA', 'myFormsModalTitleLgCA', 'Edit Savings and Investment Product', 12, 7.1,0,'VIEW', prdtTypeID,'','indCustTableRow1');
}

function dsplyAllBankCustsLov2(){
    
    var gnrlOrgID = typeof $("#gnrlOrgID").val() === 'undefined' ? -1 : $("#gnrlOrgID").val();
    var branchSrchIn = typeof $("#branchSrchIn").val() === 'undefined' ? "All Branhes" : $("#branchSrchIn").val();

    if(branchSrchIn == "All Branches"){
        branchSrchIn = '';
    } else {
        branchSrchIn = "branchSrchIn";
    }
    
    getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'MCF All Customer Accounts', 'gnrlOrgID', branchSrchIn, '', 'radio', true, '', 'acctNoFindAccId', 'acctNoFindRawTxt', 'clear', 1, '', function () {
         $('#acctNoFind').val($('#acctNoFindRawTxt').val().split(' [')[0]);
         getAccountStatement2('', '#allmodules', 2, 2.3);
    });    
}

function dsplyAllBankCustsLov(){
    
    var gnrlOrgID = typeof $("#gnrlOrgID").val() === 'undefined' ? -1 : $("#gnrlOrgID").val();
    var branchSrchIn = typeof $("#branchSrchIn").val() === 'undefined' ? "All Branhes" : $("#branchSrchIn").val();

    if(branchSrchIn == "All Branches"){
        branchSrchIn = '';
    } else {
        branchSrchIn = "branchSrchIn";
    }
    
    getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'MCF All Customer Accounts', 'gnrlOrgID', branchSrchIn, '', 'radio', true, '', 'acctNoFindAccId', 'acctNoFindRawTxt', 'clear', 1, '', function () {
         $('#acctNoFind').val($('#acctNoFindRawTxt').val().split(' [')[0]);
        //getAccountStatement('', '#allmodules', 'grp=17&typ=1&pg=2&subPgNo=2.3');
    });    
}

function getAccountStatement2(actionText, slctr, pgNo, subPgNo)
{

    var acctNoFind = $('#acctNoFind').val();
    if (acctNoFind.trim() == "") {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Enter Account Number!", //json.signatories[0].id + ' 1.name' + json.signatories[1].name, //json.accountDetails.prsnTypeEntity,
            callback: function () { /* your callback code */
            }
        });
        return;
    }    

    var pageNoAH = typeof $("#pageNoAH").val() === 'undefined' ? 1 : $("#pageNoAH").val();
    var limitSze = typeof $("#DsplySze").val() === 'undefined' ? 10 : $("#DsplySze").val();
    var sortBy = typeof $("#SortBy").val() === 'undefined' ? '' : $("#SortBy").val();
   
    var qStrtDte = typeof $("#StrtDate").val() === 'undefined' ? '' :  $("#StrtDate").val();
    var qEndDte = typeof $("#EndDate").val() === 'undefined' ? '' :  $("#EndDate").val();

    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNoAH = 1;
    } else if (actionText == 'next')
    {
        pageNoAH = parseInt(pageNoAH) + 1;
    } else if (actionText == 'previous')
    {
        pageNoAH = parseInt(pageNoAH) - 1;
    }
    linkArgs = "grp=17&typ=1&pg="+pgNo+"&subPgNo="+subPgNo+ "&pageNoAH=" + pageNoAH + "&limitSze=" + limitSze + "&sortBy=" + sortBy  +"&qStrtDte="+qStrtDte + "&qEndDte="+qEndDte
    + "&acctNoFind="+acctNoFind;
    $body = $('body');

    openATab(slctr, linkArgs);
}


function getAccountStatement(actionText, slctr, linkArgs)
{

    var acctNoFind = $('#acctNoFind').val();
    if (acctNoFind.trim() == "") {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Enter Account Number!", //json.signatories[0].id + ' 1.name' + json.signatories[1].name, //json.accountDetails.prsnTypeEntity,
            callback: function () { /* your callback code */
            }
        });
        return;
    }    

    var pageNoAH = typeof $("#pageNoAH").val() === 'undefined' ? 1 : $("#pageNoAH").val();
    var limitSze = typeof $("#DsplySze").val() === 'undefined' ? 10 : $("#DsplySze").val();
    var sortBy = typeof $("#SortBy").val() === 'undefined' ? '' : $("#SortBy").val();
   
    var qStrtDte = typeof $("#StrtDate").val() === 'undefined' ? '' :  $("#StrtDate").val();
    var qEndDte = typeof $("#EndDate").val() === 'undefined' ? '' :  $("#EndDate").val();

    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNoAH = 1;
    } else if (actionText == 'next')
    {
        pageNoAH = parseInt(pageNoAH) + 1;
    } else if (actionText == 'previous')
    {
        pageNoAH = parseInt(pageNoAH) - 1;
    }
    linkArgs = linkArgs + "&pageNoAH=" + pageNoAH + "&limitSze=" + limitSze + "&sortBy=" + sortBy  +"&qStrtDte="+qStrtDte + "&qEndDte="+qEndDte
    + "&acctNoFind="+acctNoFind;
    $body = $('body');

    openATab(slctr, linkArgs);
}

/*LOAN WRITEOFF*/
function getLoanWriteOffForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, listTableID, rowID, callBackFunc)
{
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }

    if (!$.fn.DataTable.isDataTable('#' + listTableID)) {
        var table1 = $('#' + listTableID).DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#' + listTableID + ' tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table1.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
        $('#' + listTableID + ' tbody').on('mouseenter', 'tr', function () {
            if ($(this).hasClass('highlight')) {
                $(this).removeClass('highlight');
            } else {
                table1.$('tr.highlight').removeClass('highlight');
                $(this).addClass('highlight');
            }
        });
    }



    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {

            $('#' + modalBodyID).html(xmlhttp.responseText);
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.9', 'loanWriteOffs');
                $('#' + modalBodyID).html('');
                $('#' + titleElementID).html('');
                $(e.currentTarget).unbind();
            });
            $('#' + titleElementID).html(formTitle);
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            //$body.removeClass("mdlloading");

            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + elementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/

                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + pKeyID);
}

function deleteLoanWriteOff(loanWriteoffID)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Loan Write-Off?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        if (data == "SORRY") {
                            $msg = "SORRY! Can't Delete an Loan Write-Off that is in active Use.";
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: $msg,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        } else {

                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                            getCustData('', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.9','loanWriteOffs');
                        }
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.9&q=DELETE&PKeyID=" + loanWriteoffID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function saveLoanWriteOff(pgNo, subPgNo, vtyp)
{

    var box;
    var box2;
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var loanWriteOffId = typeof $("#loanWriteOffId").val() === 'undefined' ? -1 : $("#loanWriteOffId").val();
        var loanWriteOffTrnsDte = typeof $("#loanWriteOffTrnsDte").val() === 'undefined' ? '' : $("#loanWriteOffTrnsDte").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
        var loanRqstID = typeof $("#loanRqstID").val() === 'undefined' ? -1 : $("#loanRqstID").val();        
        var loanWriteOffReason = typeof $("#loanWriteOffReason").val() === 'undefined' ? '' : $("#loanWriteOffReason").val();
        var loanWriteOffAmount = typeof $("#loanWriteOffAmount").val() === 'undefined' ? 0 : $("#loanWriteOffAmount").val();

        if (parseInt(loanRqstID) <= 0 || loanRqstID == -1 || loanRqstID == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please select a Loan Request",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }           
        if (loanWriteOffReason.trim() == "" || loanWriteOffReason == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide Write-Off Reason",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }     

        $body.removeClass("mdlloading");
        $body.removeClass("mdlloadingDiag");
        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('loanWriteOffId', loanWriteOffId);
        formData.append('loanWriteOffTrnsDte', loanWriteOffTrnsDte);
        formData.append('bnkBranchID', bnkBranchID);
        formData.append('loanRqstID', loanRqstID);           
        formData.append('loanWriteOffReason', loanWriteOffReason);          
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                //$body.removeClass("mdlloadingDiag");
                //$body.removeClass("mdlloading");

                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    $("#loanWriteOffId").val(obj.loanWriteOffId);
                    box.modal('hide');
                    getLoanWriteOffForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Loan Write-Off', 15, subPgNo, 0, 'EDIT', obj.loanWriteOffId, 'indCustTable', 'indCustTableRow1', function () {

                        msg = "Loan Write-Off Successfully Saved!";
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                            }
                        });
                    });
                } else {

                    msg = data;
                    box.modal('hide');
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function submitWithdrawLoanWriteOff(pgNo, subPgNo, vtyp, actn)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var box;
        var box2;
        var mnBox;
        var waitMsg = "";
        var rtrnSuccessMsg = "";
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        var loanWriteOffId = typeof $("#loanWriteOffId").val() === 'undefined' ? -1 : $("#loanWriteOffId").val();
        var loanWriteOffTrnsDte = typeof $("#loanWriteOffTrnsDte").val() === 'undefined' ? '' : $("#loanWriteOffTrnsDte").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
        var loanRqstID = typeof $("#loanRqstID").val() === 'undefined' ? -1 : $("#loanRqstID").val();        
        var loanWriteOffReason = typeof $("#loanWriteOffReason").val() === 'undefined' ? '' : $("#loanWriteOffReason").val();
        var loanWriteOffAmount = typeof $("#loanWriteOffAmount").val() === 'undefined' ? 0 : $("#loanWriteOffAmount").val();

        
        var actnTyp;
        var prmtMsg = "Are you sure you want to submit Loan Write-Off for Authorization?";
        if (actn == 'SUBMIT')
        {
            actnTyp = 99;
            rtrnSuccessMsg = "SUBMITTED for Authorization";
            waitMsg = "Submitting...";
            if (parseInt(loanRqstID) <= 0 || loanRqstID == -1 || loanRqstID == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please select a Loan Request",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
            if (loanWriteOffReason.trim() == "" || loanWriteOffReason == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide Write-Off Reason",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
            if (loanWriteOffAmount.trim() == "" || loanWriteOffAmount == undefined || loanWriteOffAmount.trim() == 0) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please select a Loan Request with a positive Balance",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            } 

        } else if (actn == 'WITHDRAW') {
            rtrnSuccessMsg = "WITHDRAWN";
            waitMsg = "Withdrawing...";
            actnTyp = 3;
            prmtMsg = "Are you sure you want to Withdrawal Loan Write-Off?";
        } else if (actn == 'REJECT') {
            rtrnSuccessMsg = "REJECTED";
            waitMsg = "Rejecting...";
            actnTyp = 4;
            prmtMsg = "Are you sure you want to Reject Loan Write-Off?";
        } else if (actn == 'AUTHORIZE') {
            rtrnSuccessMsg = "AUTHORIZED";
            waitMsg = "Authorizing...";
            actnTyp = 5;
            prmtMsg = "Are you sure you want to Authorize Loan Write-Off?";
        } else if (actn == 'REVERSE') {
             rtrnSuccessMsg = "REVERSED";
            waitMsg = "Reversing...";
            actnTyp = 6;
            prmtMsg = "Are you sure you want to REVERSE this Loan Write-Off?";
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Constructing.......Please Wait",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }

        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('q', 'UPDATE');
        formData.append('vtyp', vtyp);
        formData.append('actyp', actnTyp);
        formData.append('loanWriteOffId', loanWriteOffId);
        formData.append('loanWriteOffTrnsDte', loanWriteOffTrnsDte);
        formData.append('bnkBranchID', bnkBranchID);
        formData.append('loanRqstID', loanRqstID);           
        formData.append('loanWriteOffReason', loanWriteOffReason);      
        formData.append('loanWriteOffAmount', loanWriteOffAmount); 
        
       mnBox = bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {
                   $body.removeClass("mdlloading");
                   $body.removeClass("mdlloadingDiag");
                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> '+waitMsg+' Please Wait...</div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = (w - b) / 2;
                            return h + "px";
                        }
                    });
                
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            
                            box.modal('hide');
                            
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                            
                            getLoanWriteOffForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Loan Write-Off', 15, 4.9,0,'EDIT', loanWriteOffId,'indCustTable','indCustTableRow1', function () {
                                    box2 = bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: "Loan Write-Off Successfully "+rtrnSuccessMsg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });                            
                                

                            } else {

                                box2 = bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: data,
                                    callback: function () { /* your callback code */
                                    }
                                });
                                return false;

                            }


                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });

                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
    
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });    
}

function processLoanWriteOff(prcsOptn)
{
    var loanWriteOffId = typeof $("#loanWriteOffId").val() === 'undefined' ? -1 : $("#loanWriteOffId").val();
    
    var box;
    var box2;
    var mnBox;
    var prcsActn = "PROCESS";
    if(prcsOptn == 1){
        prcsActn = "VOID"
    }
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to "+prcsActn+" this Loan Write-Off?</br>Please Note: This action cannot be undone if you select 'Yes'",
        callback: function (result) {
            /* your callback code */
            if (result) {

//                box = bootbox.dialog({size: "small",
//                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Processing. Please Wait...</div>'});
                box = bootbox.alert({
                        title: 'Processing........',
                        size: 'small',
                        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Processesing...Please Wait...</div>',
                        callback: function () {
                            //getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.1', 'mcfIndCstmr');
                            //getAllRpts('clear', '#allmodules', 'grp=9&typ=1&pg=1&vtyp=0');
                        }
                    });                
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b-150) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                
                xmlhttp.onreadystatechange = function ()
                {
                    var data;
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {
                        data = xmlhttp.responseText;
                        getLoanWriteOffForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Loan Write-Off', 15, 4.9, 0, 'EDIT', loanWriteOffId, 'indCustTable', 'indCustTableRow1', function(){
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        });
                    }                                         
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.9&q=UPDATE&actyp=1"+
                "&loanWriteOffId=" + loanWriteOffId + "&prcsOptn="+prcsOptn); 

            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}


function getAllLoanClsfctns(actionText, slctr, linkArgs)
{
    var srchFor = typeof $("#allLoanClsfctnsSrchFor").val() === 'undefined' ? '%' : $("#allLoanClsfctnsSrchFor").val();
    var srchIn = typeof $("#allLoanClsfctnsSrchIn").val() === 'undefined' ? 'Both' : $("#allLoanClsfctnsSrchIn").val();
    var pageNo = typeof $("#allLoanClsfctnsPageNo").val() === 'undefined' ? 1 : $("#allLoanClsfctnsPageNo").val();
    var limitSze = typeof $("#allLoanClsfctnsDsplySze").val() === 'undefined' ? 10 : $("#allLoanClsfctnsDsplySze").val();
    var sortBy = typeof $("#allLoanClsfctnsSortBy").val() === 'undefined' ? '' : $("#allLoanClsfctnsSortBy").val();
    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy;
    openATab(slctr, linkArgs);
}

function enterKeyFuncAllLoanClsfctns(e, actionText, slctr, linkArgs)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAllLoanClsfctns(actionText, slctr, linkArgs);
    }
}

function delLoanClsfctns(rowIDAttrb)
{
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    var msgsTitle = 'Loan Classification';
    if (typeof $('#allLoanClsfctnsRow' + rndmNum + '_PkeyID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#allLoanClsfctnsRow' + rndmNum + '_PkeyID').val();
    }
    var dialog = bootbox.confirm({
        title: 'Remove ' + msgsTitle + '?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">REMOVE</span> this ' + msgsTitle + '?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Remove ' + msgsTitle + '?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Removing ' + msgsTitle + '...Please Wait...</p>'
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 8,
                                    q: 'DELETECONF',
                                    subPgNo: '1.9',
                                    actyp: 11,
                                    pKeyID: pKeyID
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                        if (result1.indexOf("Success") !== -1) {
                                            $("#" + rowIDAttrb).remove();
                                        }
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            $("#" + rowIDAttrb).remove();
                            dialog1.find('.bootbox-body').html('Row Removed Successfully!');
                        }, 500);
                    }
                });
            }
        }
    });
}

function saveLoanClsfctns(slctr, linkArgs)
{
    var msgsTitle = 'Loan Classifications';
    var slctdLoanClsfctns = "";
    var isVld = true;
    var errMsg = "";
    $('#allLoanClsfctnsTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                var pKeyID = $('#allLoanClsfctnsRow' + rndmNum + '_PkeyID').val();
                var clsfctnNm = $('#allLoanClsfctnsRow' + rndmNum + '_ClsfctnNm').val();
                if (clsfctnNm.trim() === '')
                {
                    isVld = false;
                    errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                            'font-weight:bold;color:red;">Name for Column No. ' + i + ' cannot be empty!</span></p>';
                    $('#allLoanClsfctnsRow' + rndmNum + '_ClsfctnNm').addClass('rho-error');
                } else {
                    $('#allLoanClsfctnsRow' + rndmNum + '_ClsfctnNm').removeClass('rho-error');
                }
                var rangeLow = $('#allLoanClsfctnsRow' + rndmNum + '_RangeLow').val();
                if (rangeLow.trim() === '')
                {
                    isVld = false;
                    errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                            'font-weight:bold;color:red;">Range Low for Column No. ' + i + ' cannot be empty!</span></p>';
                    $('#allLoanClsfctnsRow' + rndmNum + '_RangeLow').addClass('rho-error');
                } else {
                    $('#allLoanClsfctnsRow' + rndmNum + '_RangeLow').removeClass('rho-error');
                }
                var rangeHigh = $('#allLoanClsfctnsRow' + rndmNum + '_RangeHigh').val();
                if (rangeHigh.trim() === '')
                {
                    isVld = false;
                    errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                            'font-weight:bold;color:red;">Range High for Column No. ' + i + ' cannot be empty!</span></p>';
                    $('#allLoanClsfctnsRow' + rndmNum + '_RangeHigh').addClass('rho-error');
                } else {
                    $('#allLoanClsfctnsRow' + rndmNum + '_RangeHigh').removeClass('rho-error');
                }				
                var prvsnPrcnt = $('#allLoanClsfctnsRow' + rndmNum + '_PrvsnPrcnt').val();
                if (prvsnPrcnt.trim() === '')
                {
                    isVld = false;
                    errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                            'font-weight:bold;color:red;">Provision percentage for Column No. ' + i + ' cannot be empty!</span></p>';
                    $('#allLoanClsfctnsRow' + rndmNum + '_PrvsnPrcnt').addClass('rho-error');
                } else {
                    $('#allLoanClsfctnsRow' + rndmNum + '_PrvsnPrcnt').removeClass('rho-error');
                }
		if (parseFloat(rangeHigh) < parseFloat(rangeLow)){
                    isVld = false;
                    errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                            'font-weight:bold;color:red;">Range High for Column No. ' + i + ' cannot be greater than Range High!</span></p>';
                        $('#allLoanClsfctnsRow' + rndmNum + '_RangeLow').addClass('rho-error');
                        $('#allLoanClsfctnsRow' + rndmNum + '_RangeHigh').addClass('rho-error');
                } else {

                }												
                if (isVld === false)
                {
                    /*Do Nothing*/
                } else {
                    $('#allLoanClsfctnsRow' + rndmNum + '_RangeLow').removeClass('rho-error');
                    $('#allLoanClsfctnsRow' + rndmNum + '_RangeHigh').removeClass('rho-error');
                    
                    var isEnabled = typeof $("input[name='allLoanClsfctnsRow" + rndmNum + "_IsEnbld']:checked").val() === 'undefined' ? 'NO' : 'YES';
                    slctdLoanClsfctns = slctdLoanClsfctns + $('#allLoanClsfctnsRow' + rndmNum + '_PkeyID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#allLoanClsfctnsRow' + rndmNum + '_ClsfctnNm').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#allLoanClsfctnsRow' + rndmNum + '_RangeLow').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#allLoanClsfctnsRow' + rndmNum + '_RangeHigh').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#allLoanClsfctnsRow' + rndmNum + '_PrvsnPrcnt').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + isEnabled.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                }
            }
        }
    });
    if (rhotrim(errMsg, '; ') !== '')
    {
        bootbox.alert({
            title: 'System Alert!',
            /*size: 'small',*/
            message: errMsg});
        return false;
    }
    var dialog = bootbox.alert({
        title: 'Save ' + msgsTitle,
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> Saving ' + msgsTitle + '...Please Wait...</p>',
        callback: function () {
            openATab(slctr, linkArgs);
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 8,
                    subPgNo: '1.9',
                    q: 'UPDATECONF',
                    actyp: 11,
                    slctdLoanClsfctns: slctdLoanClsfctns
                },
                success: function (result) {
                    setTimeout(function () {
                        dialog.find('.bootbox-body').html(result);
                    }, 500);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function getAllDfltGlobalVars(actionText, slctr, linkArgs)
{
    var srchFor = typeof $("#allDfltGlobalVarsSrchFor").val() === 'undefined' ? '%' : $("#allDfltGlobalVarsSrchFor").val();
    var srchIn = typeof $("#allDfltGlobalVarsSrchIn").val() === 'undefined' ? 'Both' : $("#allDfltGlobalVarsSrchIn").val();
    var pageNo = typeof $("#allDfltGlobalVarsPageNo").val() === 'undefined' ? 1 : $("#allDfltGlobalVarsPageNo").val();
    var limitSze = typeof $("#allDfltGlobalVarsDsplySze").val() === 'undefined' ? 10 : $("#allDfltGlobalVarsDsplySze").val();
    var sortBy = typeof $("#allDfltGlobalVarsSortBy").val() === 'undefined' ? '' : $("#allDfltGlobalVarsSortBy").val();
    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&searchin=" + srchIn +
            "&pageNo=" + pageNo + "&limitSze=" + limitSze + "&sortBy=" + sortBy;
    openATab(slctr, linkArgs);
}

function enterKeyFuncAllDfltGlobalVars(e, actionText, slctr, linkArgs)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAllDfltGlobalVars(actionText, slctr, linkArgs);
    }
}

function saveDfltGlobalVars(slctr, linkArgs)
{
    var msgsTitle = 'Global Variables';
    var slctdDfltGlobalVars = "";
    var isVld = true;
    var errMsg = "";
    $('#allDfltGlobalVarsTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                var pKeyID = $('#allDfltGlobalVarsRow' + rndmNum + '_PkeyID').val();
                var VarDataType = $('#allDfltGlobalVarsRow' + rndmNum + '_VarDataType').val();
                if (VarDataType.trim() === '')
                {
                    isVld = false;
                    errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                            'font-weight:bold;color:red;">Data Type for Column No. ' + i + ' cannot be empty!</span></p>';
                    $('#allDfltGlobalVarsRow' + rndmNum + '_VarDataType').addClass('rho-error');
                } else {
                    $('#allDfltGlobalVarsRow' + rndmNum + '_VarDataType').removeClass('rho-error');
                }
                var VarValue = $('#allDfltGlobalVarsRow' + rndmNum + '_VarValue').val();
                if (VarValue.trim() === '')
                {
                    isVld = false;
                    errMsg += '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                            'font-weight:bold;color:red;">Value for Column No. ' + i + ' cannot be empty!</span></p>';
                    $('#allDfltGlobalVarsRow' + rndmNum + '_VarValue').addClass('rho-error');
                } else {
                    $('#allDfltGlobalVarsRow' + rndmNum + '_VarValue').removeClass('rho-error');
                }
							
                if (isVld === false)
                {
                    /*Do Nothing*/
                } else {
                    slctdDfltGlobalVars = slctdDfltGlobalVars + $('#allDfltGlobalVarsRow' + rndmNum + '_PkeyID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                            + $('#allDfltGlobalVarsRow' + rndmNum + '_VarValue').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"						
                            + $('#allDfltGlobalVarsRow' + rndmNum + '_VarDataType').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                }
            }
        }
    });
    if (rhotrim(errMsg, '; ') !== '')
    {
        bootbox.alert({
            title: 'System Alert!',
            /*size: 'small',*/
            message: errMsg});
        return false;
    }
    var dialog = bootbox.alert({
        title: 'Save ' + msgsTitle,
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> Saving ' + msgsTitle + '...Please Wait...</p>',
        callback: function () {
            openATab(slctr, linkArgs);
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 8,
                    subPgNo: '1.8',
                    q: 'UPDATECONF',
                    actyp: 10,
                    slctdDfltGlobalVars: slctdDfltGlobalVars
                },
                success: function (result) {
                    setTimeout(function () {
                        dialog.find('.bootbox-body').html(result);
                    }, 500);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function processFixedDepositInvestment(prcsOptn)
{
    $("#prsFDInvBtn").attr('disabled','disabled');
    $("#voidFDInvBtn").attr('disabled','disabled');
    var invstmntID = typeof $("#invstmntID").val() === 'undefined' ? -1 : $("#invstmntID").val();
    
    var box;
    var box2;
    var mnBox;
    var prcsActn = "PROCESS";
    if(prcsOptn == 1){
        prcsActn = "REVERSE"
    }
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to "+prcsActn+" this Investment?</br>Please Note: This action cannot be undone if you select 'Yes'",
        callback: function (result) {
            /* your callback code */
            if (result) {

//                box = bootbox.dialog({size: "small",
//                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Processing. Please Wait...</div>'});
                box = bootbox.alert({
                        title: 'Processing........',
                        size: 'small',
                        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Processesing...Please Wait...</div>',
                        callback: function () {
                            //getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.1', 'mcfIndCstmr');
                            //getAllRpts('clear', '#allmodules', 'grp=9&typ=1&pg=1&vtyp=0');
                        }
                    });                
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b-150) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                
                xmlhttp.onreadystatechange = function ()
                {
                    var data;
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {
                        $("#prsFDInvBtn").removeAttr('disabled');
                        $("#voidFDInvBtn").removeAttr('disabled');
                        data = xmlhttp.responseText;
                        getInvestmentsForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Investment', 25, 5.2, 0, 'EDIT', invstmntID, 'indCustTableRow1', function () {
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        });
                    }                                         
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=25&subPgNo=5.2&q=UPDATE&actyp=3"+
                "&invstmntID=" + invstmntID + "&prcsOptn="+prcsOptn); 

            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function delTrnsChqLine_LoanRpmnt(rowIDAttrb)
{
    var msg = 'CHEQUE Transaction Line';
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    var chqNo = '';
    if (typeof $('#oneVmsTrnsRow' + rndmNum + '_TrnsLnID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#oneVmsTrnsRow' + rndmNum + '_TrnsLnID').val();
        chqNo = $('#oneVmsTrnsRow' + rndmNum + '_ChqNo').val();
    }
    var dialog = bootbox.confirm({
        title: 'Delete ' + msg + '?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">DELETE</span> this linked role set?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Delete ' + msg + '?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Deleting ' + msg + '...Please Wait...</p>'
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 15,
                                    subPgNo: 4.3,
                                    q: 'DELETE',
                                    actyp: 2,
                                    trnsLnID: pKeyID,
                                    chqNo: chqNo
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                        if (result1.indexOf("Success") !== -1) {
                                            $("#" + rowIDAttrb).remove();
                                            //calcCshBrkdwnRowVal('oneVmsTrnsRow_1');
                                        }
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            $("#" + rowIDAttrb).remove();
                            dialog1.find('.bootbox-body').html('Row Removed Successfully!');
                            calcCshBrkdwnRowVal('oneVmsTrnsRow_1');
                        }, 500);
                    }
                });
            }
        }
    });
}

function listCustAccountsForRpmnt(){
    var acctID = typeof $("#acctID").val() === "undefined" ? -1 : $("#acctID").val();
    //var bnkCustomerID = typeof $("#bnkCustomerID").val() === "undefined" ? -1 : $("#bnkCustomerID").val();

    if(parseInt(acctID) <= 0){
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Get repayment details first!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
    getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'All Bank Accounts (For Loan Repayment)', 'gnrlOrgID', 'bnkCustomerID', '', 'radio', true, '', 'loanRpmntSrcAcctID', 'loanRpmntSrcAcct', 'clear', 1, '')
}

function getAcctDetails_LoanRpmnt(pgNo, subPgNo, vtyp, vtypActn)
{
    var acctNoFind = $('#acctNoFind').val();
    if (acctNoFind.trim() == "") {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Enter Account Number!", //json.signatories[0].id + ' 1.name' + json.signatories[1].name, //json.accountDetails.prsnTypeEntity,
            callback: function () { /* your callback code */
            }
        });
        return;
    }
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//$('#' + modalBodyID).html(xmlhttp.responseText);            
            var msg = "";
            var data = xmlhttp.responseText;
            //var rowValID = -1;

            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                json = $.parseJSON(data);
                //alert(json.signatories.length);

                $('#acctID').val(json.accountDetails.accountID);
                $('#acctNo').val(json.accountDetails.accountNo);
                $('#acctStatus').val(json.accountDetails.status);
                $('#acctCrncy').val(json.accountDetails.currNm);
                $('#acctType').val(json.accountDetails.acctType);
                $('#acctCustomer').val(json.accountDetails.custId);
                $('#prsnTypeEntity').val(json.accountDetails.prsnTypeEntity);
                $('#acctBranch').val(json.accountDetails.branchId);
                $('#acctTitle').val(json.accountDetails.acctTitle);
                $('#mandate').val(json.accountDetails.mandate);
                $('#bnkCustomerID').val(json.accountDetails.bnkCustomerID);
                //custAcctLien
                if (pgNo == 15 && subPgNo == "4.3") {
                    $('#clrdBal').css({
                        'color': 'red'
                    });
                    $('#clrdBal').val(addCommas(Number((json.accountBalance.clrBal + ',').replace(/[^-?0-9\.]/g, '')).toFixed(2)));
                    $('#unclrdBal').css({
                        'color': 'red'
                    });
                    $('#unclrdBal').val(addCommas(Number((json.accountBalance.unclrBal + ',').replace(/[^-?0-9\.]/g, '')).toFixed(2)));
                } else {
                    if (Number((json.accountBalance.clrBal + ',').replace(/[^-?0-9\.]/g, '')) > 0) {
                        $('#clrdBal').css({
                            'color': 'green'
                        });
                    } else {
                        $('#clrdBal').css({
                            'color': 'red'
                        });
                    }
                    $('#clrdBal').val(addCommas(Number((json.accountBalance.clrBal + ',').replace(/[^-?0-9\.]/g, '')).toFixed(2)));
                    if (Number((json.accountBalance.unclrBal + ',').replace(/[^-?0-9\.]/g, '')) > 0) {
                        $('#unclrdBal').css({
                            'color': 'green'
                        });
                    } else {
                        $('#unclrdBal').css({
                            'color': 'red'
                        });
                    }
                    $('#unclrdBal').val(addCommas(Number((json.accountBalance.unclrBal + ',').replace(/[^-?0-9\.]/g, '')).toFixed(2)));
                }
                $('#wtdrwlLimitNo').val(json.accountWdrwlLimit.limitNo);
                $('#wtdrwlLimitAmt').val(json.accountWdrwlLimit.limitAmount);
                //construct SIGNATORIES table dynamically
                var signCount = json.signatories.length;
                var acctSignatories = '';
                var i = 0;
                var cntr = 0;
                for (i = 0; i < signCount; i++) {
                    cntr++;
                    acctSignatories = acctSignatories + '<tr id="acctSignatoriesTblAddRow_' + cntr + '">' +
                            '<td class="lovtd">' + cntr + '</td>' +
                            '<td  class="lovtd" id="acctSignatoriesTblAddRow' + cntr + '_name">' + json.signatories[i].name + '</td>' +
                            '<td class="lovtd" style="text-align: center !important;"><input type="checkbox" class="form-check-input"></td>' +
                            '<td class="lovtd">' +
                            '<button type="button" class="btn btn-info btn-sm" onclick="viewSignatoryForm(\'myLovModal\', \'myLovModalBody\', \'myLovModalTitle\', \'acctSignatoryForm\', \'\', \'Signatory\', 13, 2.1, 5, \'VIEW\',' + json.signatories[i].id + ');" style="padding:2px !important;">View Signatory</button>' +
                            '</td>' +
                            '<td class="lovtd">' + json.signatories[i].bioData + '</td>' +
                            '<td  class="lovtd" style="display:none;" id="acctSignatoriesTblAddRow' + cntr + '_ID">' + json.signatories[i].id + '</td>' +
                            '<td style="display:none;" id="acctSignatoriesTblAddRow' + cntr + '_MndtrySign">' + json.signatories[i].toSignMndtry + '</td>' +
                            '</tr>';
                }
                $('#acctSignatoriesTblTbody').children('tr').remove();
                $('#acctSignatoriesTblAdd').append(acctSignatories);
                //construct HISTORIC ACCOUNTS table dynamically
                var acctHistoryCount = json.acctTrnsHistory.length;
                var acctHistory = '';
                var j = 0;
                var cntr1 = 0;
                for (j = 0; j < acctHistoryCount; j++) {
                    cntr1++;
                    acctHistory = acctHistory + '<tr id="acctHistoryTblAddAddRow' + cntr1 + '">' +
                            '<td class="lovtd">' +
                            '<button type="button" class="btn btn-default btn-sm" data-toggle="tooltip" data-placement="bottom" title="View Transaction Details" onclick="getOneVmsTrnsForm(' + json.acctTrnsHistory[j].acctTrnsId + ', \'' + json.acctTrnsHistory[j].trnsType + '\', 30, \'ShowDialog\',' + json.acctTrnsHistory[j].vwType + ');" style="padding:2px !important;">' +
                            '<img src="cmn_images/kghostview.png" style="height:20px; width:auto; position: relative; vertical-align: middle;">' +
                            '</button>' +
                            '</td>' +
                            '<td class="lovtd">' + json.acctTrnsHistory[j].trnsDate + '</td>' +
                            '<td class="lovtd">' + json.acctTrnsHistory[j].trnsDesc + '</td>' +
                            '<td class="lovtd">' + json.acctTrnsHistory[j].trnsNo + '</td>' +
                            '<td class="lovtd" style="text-align:right;font-weight:bold;">' + json.acctTrnsHistory[j].amount + '</td>' +
                            '<td class="lovtd" style="text-align:right;font-weight:bold;color:blue;">' + json.acctTrnsHistory[j].netClrdBal + '</td>' +
                            '<td class="lovtd" style="text-align:right;font-weight:bold;color:blue;">' + json.acctTrnsHistory[j].netUnclrdBal + '</td>' +
                            '<td class="lovtd">' + json.acctTrnsHistory[j].status + '</td>' +
                            '<td class="lovtd">' + json.acctTrnsHistory[j].authorizer + '</td>' +
                            '<td style="display:none;">' + json.acctTrnsHistory[j].acctTrnsId + '</td>' +
                            '</tr>';
                }

                $('#acctHistoryTblTbody').children('tr').remove();
                $('#acctHistoryTblAdd').append(acctHistory);
            } else {
                msg = data;
                if (msg == "INVALID ACCOUNT NUMBER") {
                    $('#acctID').val('');
                    $('#acctNo').val('');
                    $('#acctStatus').val('');
                    $('#acctCrncy').val('');
                    $('#acctType').val('');
                    $('#acctCustomer').val('');
                    $('#prsnTypeEntity').val('');
                    $('#acctBranch').val('');
                    $('#acctTitle').val('');
                    $('#mandate').val('');
                    $('#clrdBal').val('');
                    $('#unclrdBal').val('');
                    $('#wtdrwlLimitNo').val('');
                    $('#wtdrwlLimitAmt').val('');
                    $('#acctSignatoriesTblTbody').children('tr').remove();
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg, //json.signatories[0].id + ' 1.name' + json.signatories[1].name, //json.accountDetails.prsnTypeEntity,
                        callback: function () { /* your callback code */
                        }
                    });
                } else {
                    alert("Hello " + data);
                }
            }

            $body.removeClass("mdlloadingDiag");
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + acctNoFind);
}

function enterKeyFuncFind(e, actionText, slctr, linkArgs, fieldsPrfx)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getCustData(actionText, slctr, linkArgs, fieldsPrfx);
    }
}

function removeActivateLien(rowID){
     var lienStatus = typeof $("#lienStatus").val() === "undefined" ? "Incomplete" : $("#lienStatus").val();
     var lnMsg = "Approve and Save this Lien";
     if(lienStatus == "Remove"){
         $("#lienStatus").val("Active");
         $("#endDate").val("31-Dec-4000");
         $("#removeActivateBtn").html("Remove Lien and Save");
     } else {
         var today = new Date();
        var pday_TD = today.getDate();
	if(pday_TD < 10){
            pday_TD = '0'+pday_TD;
        }
        var pmonth_TD = today.getMonth() + 1;
        var pyear_TD = today.getFullYear();
         $("#lienStatus").val("Remove");
         $("#removeActivateBtn").html("Activate Lien and Save");
         $("#endDate").val(pday_TD+"-"+getMonthMon(pmonth_TD)+"-"+pyear_TD);
     }
     
     saveAccountLienForm('myLovModal', rowID);   
    
     
}

function getOvdrftIntrstPymntForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, listTableID, rowID, callBackFunc)
{
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }
//alert('Hello');
    if (!$.fn.DataTable.isDataTable('#' + listTableID)) {
        var table1 = $('#' + listTableID).DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#' + listTableID + ' tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table1.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
        $('#' + listTableID + ' tbody').on('mouseenter', 'tr', function () {
            if ($(this).hasClass('highlight')) {
                $(this).removeClass('highlight');
            } else {
                table1.$('tr.highlight').removeClass('highlight');
                $(this).addClass('highlight');
            }
        });
    }

//var p_statusTitle = "Incomplete";

    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
            $('#' + modalBodyID).html(xmlhttp.responseText);
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.12', 'ovdrftIntrstPymnt');
                $('#' + modalBodyID).html('');
                $('#' + titleElementID).html('');
                $(e.currentTarget).unbind();
            });
            $('#' + titleElementID).html(formTitle);
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            //$body.removeClass("mdlloading");

            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + elementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/

                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + pKeyID);
}

function deleteOvdrftIntrstPymnt(loanWriteoffID)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Loan Write-Off?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        if (data == "SORRY") {
                            $msg = "SORRY! Can't Delete an Loan Write-Off that is in active Use.";
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: $msg,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        } else {

                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                            getCustData('', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.12','ovdrftIntrstPymnt');
                        }
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.12&q=DELETE&PKeyID=" + loanWriteoffID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function saveOvdrftIntrstPymnt(pgNo, subPgNo, vtyp)
{

    var box;
    var box2;
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var ovdrftIntrstPymntId = typeof $("#ovdrftIntrstPymntId").val() === 'undefined' ? -1 : $("#ovdrftIntrstPymntId").val();
        var ovdrftIntrstPymntTrnsDte = typeof $("#ovdrftIntrstPymntTrnsDte").val() === 'undefined' ? '' : $("#ovdrftIntrstPymntTrnsDte").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
        var loanRqstID = typeof $("#loanRqstID").val() === 'undefined' ? -1 : $("#loanRqstID").val();        
        var ovdrftIntrstPymntReason = typeof $("#ovdrftIntrstPymntReason").val() === 'undefined' ? '' : $("#ovdrftIntrstPymntReason").val();
        var ovdrftIntrstPymntAmount = typeof $("#ovdrftIntrstPymntAmount").val() === 'undefined' ? 0 : $("#ovdrftIntrstPymntAmount").val();

        if (parseInt(loanRqstID) <= 0 || loanRqstID == -1 || loanRqstID == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please select a Loan Request",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }           
        if (ovdrftIntrstPymntReason.trim() == "" || ovdrftIntrstPymntReason == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide Interest Processing Description",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }     

        $body.removeClass("mdlloading");
        $body.removeClass("mdlloadingDiag");
        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('ovdrftIntrstPymntId', ovdrftIntrstPymntId);
        formData.append('ovdrftIntrstPymntTrnsDte', ovdrftIntrstPymntTrnsDte);
        formData.append('bnkBranchID', bnkBranchID);
        formData.append('loanRqstID', loanRqstID);           
        formData.append('ovdrftIntrstPymntReason', ovdrftIntrstPymntReason);
        formData.append('ovdrftIntrstPymntAmount', ovdrftIntrstPymntAmount);
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                //$body.removeClass("mdlloadingDiag");
                //$body.removeClass("mdlloading");

                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    $("#ovdrftIntrstPymntId").val(obj.ovdrftIntrstPymntId);
                    box.modal('hide');
                    getOvdrftIntrstPymntForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Overdraft Interest Processing', 15, subPgNo, 0, 'EDIT', obj.ovdrftIntrstPymntId, 'indCustTable', 'indCustTableRow1', function () {

                        msg = "Overdraft Interest Processing Successfully Saved!";
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                            }
                        });
                    });
                } else {

                    msg = data;
                    box.modal('hide');
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function submitWithdrawOvdrftIntrstPymnt(pgNo, subPgNo, vtyp, actn)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var box;
        var box2;
        var mnBox;
        var waitMsg = "";
        var rtrnSuccessMsg = "";
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        var ovdrftIntrstPymntId = typeof $("#ovdrftIntrstPymntId").val() === 'undefined' ? -1 : $("#ovdrftIntrstPymntId").val();
        var ovdrftIntrstPymntTrnsDte = typeof $("#ovdrftIntrstPymntTrnsDte").val() === 'undefined' ? '' : $("#ovdrftIntrstPymntTrnsDte").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
        var loanRqstID = typeof $("#loanRqstID").val() === 'undefined' ? -1 : $("#loanRqstID").val();        
        var ovdrftIntrstPymntReason = typeof $("#ovdrftIntrstPymntReason").val() === 'undefined' ? '' : $("#ovdrftIntrstPymntReason").val();
        var ovdrftIntrstPymntAmount = typeof $("#ovdrftIntrstPymntAmount").val() === 'undefined' ? 0 : $("#ovdrftIntrstPymntAmount").val();
        var ovdrftIntrstPymntAccruedAmnt = typeof $("#ovdrftIntrstPymntAccruedAmnt").val() === 'undefined' ? 0 : $("#ovdrftIntrstPymntAccruedAmnt").val();
        
        var actnTyp;
        var prmtMsg = "Are you sure you want to submit Overdraft Interest Processing for Authorization?";
        if (actn == 'SUBMIT')
        {
            actnTyp = 99;
            rtrnSuccessMsg = "SUBMITTED for Authorization";
            waitMsg = "Submitting...";
            if (parseInt(loanRqstID) <= 0 || loanRqstID == -1 || loanRqstID == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please select a Loan Request",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
            if (ovdrftIntrstPymntReason.trim() == "" || ovdrftIntrstPymntReason == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide Write-Off Reason",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
            if (parseInt(ovdrftIntrstPymntId) <= 0 || ovdrftIntrstPymntId == -1 || ovdrftIntrstPymntId == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please Save First",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }            
            if (ovdrftIntrstPymntAccruedAmnt.trim() == "" || ovdrftIntrstPymntAccruedAmnt == undefined || ovdrftIntrstPymntAccruedAmnt.trim() == 0) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please select an OD Request with a positive Balance",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            } 
            if (parseInt(ovdrftIntrstPymntId) <= 0 || ovdrftIntrstPymntId == -1 || ovdrftIntrstPymntId == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please Save First",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
            if (ovdrftIntrstPymntAmount.trim() == "" || ovdrftIntrstPymntAmount == undefined || ovdrftIntrstPymntAmount.trim() == 0) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please select a Positive Payment Amount",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            } 
            if (parseFloat(ovdrftIntrstPymntAmount) > 0 && parseFloat(ovdrftIntrstPymntAccruedAmnt) <  parseFloat(ovdrftIntrstPymntAmount)) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please Enter a Payment Amount less than the Total Accrued Interest of "+formatAsMoney(ovdrftIntrstPymntAccruedAmnt),
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }

        } else if (actn == 'WITHDRAW') {
            rtrnSuccessMsg = "WITHDRAWN";
            waitMsg = "Withdrawing...";
            actnTyp = 3;
            prmtMsg = "Are you sure you want to Withdrawal Overdraft Interest Processing?";
        } else if (actn == 'REJECT') {
            rtrnSuccessMsg = "REJECTED";
            waitMsg = "Rejecting...";
            actnTyp = 4;
            prmtMsg = "Are you sure you want to Reject Overdraft Interest Processing?";
        } else if (actn == 'AUTHORIZE') {
            rtrnSuccessMsg = "AUTHORIZED";
            waitMsg = "Authorizing...";
            actnTyp = 5;
            prmtMsg = "Are you sure you want to Authorize Overdraft Interest Processing?";
        } else if (actn == 'REVERSE') {
             rtrnSuccessMsg = "REVERSED";
            waitMsg = "Reversing...";
            actnTyp = 6;
            prmtMsg = "Are you sure you want to REVERSE this Overdraft Interest Processing?";
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Constructing.......Please Wait",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }

        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('q', 'UPDATE');
        formData.append('vtyp', vtyp);
        formData.append('actyp', actnTyp);
        formData.append('ovdrftIntrstPymntId', ovdrftIntrstPymntId);
        formData.append('ovdrftIntrstPymntTrnsDte', ovdrftIntrstPymntTrnsDte);
        formData.append('bnkBranchID', bnkBranchID);
        formData.append('loanRqstID', loanRqstID);           
        formData.append('ovdrftIntrstPymntReason', ovdrftIntrstPymntReason);      
        formData.append('ovdrftIntrstPymntAmount', ovdrftIntrstPymntAmount); 
        
       mnBox = bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {
                   $body.removeClass("mdlloading");
                   $body.removeClass("mdlloadingDiag");
                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> '+waitMsg+' Please Wait...</div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = (w - b) / 2;
                            return h + "px";
                        }
                    });
                
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            
                            box.modal('hide');
                            
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                            
                            getOvdrftIntrstPymntForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Overdraft Interest Processing', 15, 4.12,0,'EDIT', ovdrftIntrstPymntId,'indCustTable','indCustTableRow1', function () {
                                    box2 = bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: "Overdraft Interest Processing Successfully "+rtrnSuccessMsg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });                            
                                

                            } else {

                                box2 = bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: data,
                                    callback: function () { /* your callback code */
                                    }
                                });
                                return false;

                            }


                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });

                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
    
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });    
}

function processOvdrftIntrstPymnt(prcsOptn)
{
    var ovdrftIntrstPymntId = typeof $("#ovdrftIntrstPymntId").val() === 'undefined' ? -1 : $("#ovdrftIntrstPymntId").val();
    var loanRqstID = typeof $("#loanRqstID").val() === 'undefined' ? -1 : $("#loanRqstID").val();
    
    
    var box;
    var box2;
    var mnBox;
    var prcsActn = "PROCESS";
    if(prcsOptn == 1){
        prcsActn = "VOID"
    }
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to "+prcsActn+" this Overdraft Interest Processing?</br>Please Note: This action cannot be undone if you select 'Yes'",
        callback: function (result) {
            /* your callback code */
            if (result) {

//                box = bootbox.dialog({size: "small",
//                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Processing. Please Wait...</div>'});
                box = bootbox.alert({
                        title: 'Processing........',
                        size: 'small',
                        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Processesing...Please Wait...</div>',
                        callback: function () {
                            //getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.1', 'mcfIndCstmr');
                            //getAllRpts('clear', '#allmodules', 'grp=9&typ=1&pg=1&vtyp=0');
                        }
                    });                
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b-150) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                
                xmlhttp.onreadystatechange = function ()
                {
                    var data;
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {
                        data = xmlhttp.responseText;
                        getOvdrftIntrstPymntForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Overdraft Interest Processing', 15, 4.12, 0, 'EDIT', ovdrftIntrstPymntId, 'indCustTable', 'indCustTableRow1', function(){
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        });
                    }                                         
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=15&subPgNo=4.12&q=UPDATE&actyp=1"+
                "&ovdrftIntrstPymntId=" + ovdrftIntrstPymntId + "&prcsOptn="+prcsOptn+"&loanRqstID="+loanRqstID); 

            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}



//CUSTOMER CORRESPONDENCE

function getCstmrCrspndncForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, listTableID, rowID, callBackFunc)
{
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }
//alert('Hello');
    if (!$.fn.DataTable.isDataTable('#' + listTableID)) {
        var table1 = $('#' + listTableID).DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#' + listTableID + ' tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table1.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
        $('#' + listTableID + ' tbody').on('mouseenter', 'tr', function () {
            if ($(this).hasClass('highlight')) {
                $(this).removeClass('highlight');
            } else {
                table1.$('tr.highlight').removeClass('highlight');
                $(this).addClass('highlight');
            }
        });
    }

//var p_statusTitle = "Incomplete";

    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
//alert("Hello");
            $('#' + modalBodyID).html(xmlhttp.responseText);
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.5', 'cstmrCrspndnc');
                $('#' + modalBodyID).html('');
                $('#' + titleElementID).html('');
                $(e.currentTarget).unbind();
            });
            $('#' + titleElementID).html(formTitle);
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            //$body.removeClass("mdlloading");

            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + elementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/

                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&PKeyID=" + pKeyID);
}

function deleteCstmrCrspndnc(cstmrCrspndncID)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Correspondence?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        if (data == "SORRY") {
                            $msg = "SORRY! Can't Delete an Correspondence that is in active Use.";
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: $msg,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        } else {

                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                            getCustData('', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.5','cstmrCrspndnc');
                        }
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=11&subPgNo=1.5&q=DELETE&PKeyID=" + cstmrCrspndncID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function saveCstmrCrspndnc(pgNo, subPgNo, vtyp)
{

    var box;
    var box2;
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var cstmrCrspndncId = typeof $("#cstmrCrspndncId").val() === 'undefined' ? -1 : $("#cstmrCrspndncId").val();
        var acctNoFindAccId = typeof $("#acctNoFindAccId").val() === 'undefined' ? -1 : $("#acctNoFindAccId").val();
        var bnkCustomerID = typeof $("#bnkCustomerID").val() === 'undefined' ? -1 : $("#bnkCustomerID").val();         
        var branchID = typeof $("#branchID").val() === 'undefined' ? -1 : $("#branchID").val();       
        var custType = typeof $("#custType").val() === 'undefined' ? '' : $("#custType").val();
        var requestDate = typeof $("#requestDate").val() === 'undefined' ? '' : $("#requestDate").val();
        
        var requestorNm = typeof $("#requestorNm").val() === 'undefined' ? '' : $("#requestorNm").val();
        var trnsctnID = typeof $("#trnsctnID").val() === 'undefined' ? '' : $("#trnsctnID").val();
        var requestTypeID = typeof $("#requestTypeID").val() === 'undefined' ? '' : $("#requestTypeID").val();
        var requestDetails = typeof $("#requestDetails").val() === 'undefined' ? '' : $("#requestDetails").val();
        var assignedToPrsnID = typeof $("#assignedToPrsnID").val() === 'undefined' ? -1 : $("#assignedToPrsnID").val();
        var urgency = typeof $("#urgency").val() === 'undefined' ? '' : $("#urgency").val();
        var expectedCloseDate = typeof $("#expectedCloseDate").val() === 'undefined' ? '' : $("#expectedCloseDate").val();
        var requestStatus = typeof $("#requestStatus").val() === 'undefined' ? '' : $("#requestStatus").val();
        var actualCloseDate = typeof $("#actualCloseDate").val() === 'undefined' ? '' : $("#actualCloseDate").val();    
        
        var closedByPersonId = typeof $("#closedByPersonId").val() === 'undefined' ? -1 : $("#closedByPersonId").val();  
        var closedActionDetails = typeof $("#closedActionDetails").val() === 'undefined' ? '' : $("#closedActionDetails").val();          

        if (parseInt(acctNoFindAccId) <= 0 || acctNoFindAccId == -1 || acctNoFindAccId == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please enter a valid Account Number",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }           
        if (requestDate.trim() == "" || requestDate == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide a Request Date",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }       
        if (requestorNm.trim() == "" || requestorNm == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide Requestor's Details",
                callback: function () { /* your callback code */
                }
            });
            return false;
        } 
        if (requestTypeID.trim() == "" || requestTypeID == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please select a Correspondence/Request Type",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }     
        if (requestDetails.trim() == "" || requestDetails == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide details of request",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }         
        

        $body.removeClass("mdlloading");
        $body.removeClass("mdlloadingDiag");
        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('cstmrCrspndncId', cstmrCrspndncId);
        formData.append('acctNoFindAccId', acctNoFindAccId);
        formData.append('bnkCustomerID', bnkCustomerID);           
        formData.append('branchID', branchID); 
       
        formData.append('custType', custType);  
        formData.append('requestDate', requestDate);  
        formData.append('requestorNm', requestorNm);  
        formData.append('trnsctnID', trnsctnID);  
        formData.append('requestTypeID', requestTypeID);  
        formData.append('requestDetails', requestDetails);  
        formData.append('assignedToPrsnID', assignedToPrsnID);  
        formData.append('urgency', urgency);  
        formData.append('expectedCloseDate', expectedCloseDate);  
        formData.append('requestStatus', requestStatus);  
        formData.append('actualCloseDate', actualCloseDate);  
        formData.append('closedByPersonId', closedByPersonId);  
        formData.append('closedActionDetails', closedActionDetails);          
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                //$body.removeClass("mdlloadingDiag");
                //$body.removeClass("mdlloading");

                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    $("#cstmrCrspndncId").val(obj.cstmrCrspndncId);
                    box.modal('hide');
                    getCstmrCrspndncForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Correspondence', 11, subPgNo, 0, 'EDIT', obj.cstmrCrspndncId, 'indCustTable', 'indCustTableRow1', function () {

                        msg = "Correspondence Successfully Saved!";
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: msg,
                            callback: function () { /* your callback code */
                            }
                        });
                    });
                } else {

                    msg = data;
                    box.modal('hide');
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function submitWithdrawCstmrCrspndnc(pgNo, subPgNo, vtyp, actn)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var box;
        var box2;
        var mnBox;
        var waitMsg = "";
        var rtrnSuccessMsg = "";
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        var cstmrCrspndncId = typeof $("#cstmrCrspndncId").val() === 'undefined' ? -1 : $("#cstmrCrspndncId").val();
        var acctNoFindAccId = typeof $("#acctNoFindAccId").val() === 'undefined' ? -1 : $("#acctNoFindAccId").val();
        var bnkCustomerID = typeof $("#bnkCustomerID").val() === 'undefined' ? -1 : $("#bnkCustomerID").val();         
        var branchID = typeof $("#branchID").val() === 'undefined' ? -1 : $("#branchID").val();       
        var custType = typeof $("#custType").val() === 'undefined' ? '' : $("#custType").val();
        var requestDate = typeof $("#requestDate").val() === 'undefined' ? '' : $("#requestDate").val();
        
        var requestorNm = typeof $("#requestorNm").val() === 'undefined' ? '' : $("#requestorNm").val();
        var trnsctnID = typeof $("#trnsctnID").val() === 'undefined' ? '' : $("#trnsctnID").val();
        var requestTypeID = typeof $("#requestTypeID").val() === 'undefined' ? '' : $("#requestTypeID").val();
        var requestDetails = typeof $("#requestDetails").val() === 'undefined' ? '' : $("#requestDetails").val();
        var assignedToPrsnID = typeof $("#assignedToPrsnID").val() === 'undefined' ? -1 : $("#assignedToPrsnID").val();
        var urgency = typeof $("#urgency").val() === 'undefined' ? '' : $("#urgency").val();
        var expectedCloseDate = typeof $("#expectedCloseDate").val() === 'undefined' ? '' : $("#expectedCloseDate").val();
        var requestStatus = typeof $("#requestStatus").val() === 'undefined' ? '' : $("#requestStatus").val();
        var actualCloseDate = typeof $("#actualCloseDate").val() === 'undefined' ? '' : $("#actualCloseDate").val();    
        
        var closedByPersonId = typeof $("#closedByPersonId").val() === 'undefined' ? -1 : $("#closedByPersonId").val();  
        var closedActionDetails = typeof $("#closedActionDetails").val() === 'undefined' ? '' : $("#closedActionDetails").val(); 

        
        var actnTyp;
        var prmtMsg = "Are you sure you want to submit Correspondence for Authorization?";
        if (actn == 'SUBMIT')
        {
            actnTyp = 99;
            rtrnSuccessMsg = "SUBMITTED for Authorization";
            waitMsg = "Submitting...";
            if (parseInt(acctNoFindAccId) <= 0 || acctNoFindAccId == -1 || acctNoFindAccId == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please enter a valid Account Number",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }           
            if (requestDate.trim() == "" || requestDate == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide a Request Date",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }       
            if (requestorNm.trim() == "" || requestorNm == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide Requestor's Details",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            } 
            if (requestTypeID.trim() == "" || requestTypeID == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please select a Correspondence/Request Type",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }     
            if (requestDetails.trim() == "" || requestDetails == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide details of request",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }  
        } else if (actn == 'WITHDRAW') {
            rtrnSuccessMsg = "WITHDRAWN";
            waitMsg = "Withdrawing...";
            actnTyp = 3;
            prmtMsg = "Are you sure you want to Withdrawal Correspondence?";
        } else if (actn == 'REJECT') {
            rtrnSuccessMsg = "REJECTED";
            waitMsg = "Rejecting...";
            actnTyp = 4;
            prmtMsg = "Are you sure you want to Reject Correspondence?";
        } else if (actn == 'AUTHORIZE') {
            rtrnSuccessMsg = "AUTHORIZED";
            waitMsg = "Authorizing...";
            actnTyp = 5;
            prmtMsg = "Are you sure you want to Authorize Correspondence?";
        } else if (actn == 'CLOSE') {
             rtrnSuccessMsg = "CLOSED";
            waitMsg = "Closing...";
            actnTyp = 6;
            prmtMsg = "Are you sure you want to CLOSE this Correspondence?";
            if (actualCloseDate.trim() == "" || actualCloseDate == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please select a Close Date",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }   
            if (parseInt(closedByPersonId) <= 0 || closedByPersonId == -1 || closedByPersonId == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please select an Actioned By Person",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            } 
            if (closedActionDetails.trim() == "" || closedActionDetails == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide a summary of the Action Taken",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
        }

        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('q', 'UPDATE');
        formData.append('vtyp', vtyp);
        formData.append('actyp', actnTyp);
        formData.append('cstmrCrspndncId', cstmrCrspndncId);
        formData.append('acctNoFindAccId', acctNoFindAccId);
        formData.append('bnkCustomerID', bnkCustomerID);           
        formData.append('branchID', branchID); 
        formData.append('custType', custType);  
        formData.append('requestDate', requestDate);  
        formData.append('requestorNm', requestorNm);  
        formData.append('trnsctnID', trnsctnID);  
        formData.append('requestTypeID', requestTypeID);  
        formData.append('requestDetails', requestDetails);  
        formData.append('assignedToPrsnID', assignedToPrsnID);  
        formData.append('urgency', urgency);  
        formData.append('expectedCloseDate', expectedCloseDate);  
        formData.append('requestStatus', requestStatus);  
        formData.append('actualCloseDate', actualCloseDate);  
        formData.append('closedByPersonId', closedByPersonId);  
        formData.append('closedActionDetails', closedActionDetails);   
        
       mnBox = bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {
                   $body.removeClass("mdlloading");
                   $body.removeClass("mdlloadingDiag");
                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> '+waitMsg+' Please Wait...</div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = (w - b) / 2;
                            return h + "px";
                        }
                    });
                
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            
                            box.modal('hide');
                            
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                            
                            getCstmrCrspndncForm('myFormsModaLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Correspondence', 11, 1.5,0,'EDIT', cstmrCrspndncId,'indCustTable','indCustTableRow1', function () {
                                    box2 = bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: "Correspondence Successfully "+rtrnSuccessMsg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });                            
                                

                            } else {

                                box2 = bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: data,
                                    callback: function () { /* your callback code */
                                    }
                                });
                                return false;

                            }


                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });

                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
    
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });    
}

function getAcctDetails_CustCrspndnce(pgNo, subPgNo)
{
    var acctNoFind = $('#acctNoFind').val();
    if (acctNoFind.trim() == "") {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Enter Account Number!", 
            callback: function () { /* your callback code */
            }
        });
        return;
    }
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {         
            var msg = "";
            var data = xmlhttp.responseText;
            //var rowValID = -1;

            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                json = $.parseJSON(data);

                $('#acctNoFindAccId').val(json.accountDetails.accountID);
                $('#acctNoFind').val(json.accountDetails.acctNo);
                $('#custType').val(json.accountDetails.custType);
                $('#bnkCustomer').val(json.accountDetails.custNm);
                $('#bnkCustomerID').val(json.accountDetails.custID);
                $('#branchID').val(json.accountDetails.branchID);
                $('#acctTitle').val(json.accountDetails.acctTitle);
                $('#branchNm').val(json.accountDetails.branchNm);
                $('#mandate').val(json.accountDetails.mandate);

            } else {
                msg = data;
                if (msg == "INVALID ACCOUNT NUMBER") {
                $('#acctNoFindID').val(-1);
                $('#acctNoFind').val('');
                $('#custType').val('');
                $('#bnkCustomer').val('');
                $('#bnkCustomerID').val(-1);
                $('#branchID').val(-1);
                $('#acctTitle').val('');
                $('#branchNm').val('');
                $('#mandate').val('');
                    bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }
            }

            $body.removeClass("mdlloadingDiag");
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&PKeyID=" + acctNoFind);
}


function imprtNtnlID()
{
    var dataToSend = "";
    var isFileValid = true;
    var dialog1 = bootbox.confirm({
        title: 'Import National ID?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:green;font-weight:bold;font-style:italic;">IMPORT NATIONAL ID</span> to overwrite existing ones?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                if (isReaderAPIAvlbl()) {
                    $("#allOtherFileInput6").val('');
                    $("#allOtherFileInput6").off('change');
                    $("#allOtherFileInput6").change(function () {
                        var fileName = $(this).val();
                        var input = document.getElementById('allOtherFileInput6');
                        var file = input.files[0];
                        // read the file metadata
                        var output = '';
                        output += '<span style="font-weight:bold;">' + escape(file.name) + '</span><br />\n';
                        output += ' - FileType: ' + (file.type || 'n/a') + '<br />\n';
                        output += ' - FileSize: ' + file.size + ' bytes<br />\n';
                        output += ' - LastModified: ' + (file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() : 'n/a') + '<br />\n';
                        var reader = new FileReader();
                        BootstrapDialog.show({
                            size: BootstrapDialog.SIZE_LARGE,
                            type: BootstrapDialog.TYPE_DEFAULT,
                            title: 'Validating Selected File',
                            message: '<div id="myProgress"><div id="myBar"></div></div><div id="myInformation"><i class="fa fa-spin fa-spinner"></i> Validating Selected File...Please Wait...</div><br/><div id="fileInformation">' + output + '</div>',
                            animate: true,
                            closable: true,
                            closeByBackdrop: false,
                            closeByKeyboard: false,
                            onshow: function (dialogItself) {
                                setTimeout(function () {
                                    var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                    $footerButton.disable();
                                    // read the file content
                                    reader.onerror = function (evt) {
                                        switch (evt.target.error.code) {
                                            case evt.target.error.NOT_FOUND_ERR:
                                                alert('File Not Found!');
                                                break;
                                            case evt.target.error.NOT_READABLE_ERR:
                                                alert('File is not readable');
                                                break;
                                            case evt.target.error.ABORT_ERR:
                                                break; // noop
                                            default:
                                                alert('An error occurred reading this file.');
                                        }
                                        ;
                                    };
                                    reader.onprogress = function (evt) {
                                        // evt is an ProgressEvent.
                                        if (evt.lengthComputable) {
                                            var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
                                            // Increase the progress bar length.
                                            var elem = document.getElementById('myBar');
                                            elem.style.width = percentLoaded + '%';
                                            if (percentLoaded < 100) {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>' + percentLoaded + '% Validating Selected File...Please Wait...</span>');
                                            } else {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-check"></i>' + percentLoaded + '% Validating Selected File Completed!</span>');
                                                var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                                if (isFileValid == true) {
                                                    $footerButton.enable();
                                                } else {
                                                    $footerButton.disable();
                                                }
                                            }
                                        }
                                    };
                                    reader.onabort = function (e) {
                                        alert('File read cancelled');
                                    };
                                    reader.onloadstart = function (e) {
                                        var elem = document.getElementById('myBar');
                                        elem.style.width = '1%';
                                        $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>1% Started Importing National ID...Please Wait...</span>');
                                    };
                                    reader.onload = function (event) {
                                        try {
                                            var csv = event.target.result;
                                            var data = $.csv.toArrays(csv);
                                            var rwCntr = 0;
                                            var colCntr = 0;
                                            var vldRwCntr = 0;
                                            var custNo = "";
                                            var nicCountry = "";
                                            var nicIDType = "";
                                            var nicIDNo = "";
                                            var nicDateIssd = "";
                                            var nicExpDate = "";
                                            var nicPrsnType = "";
                                            var segment1 = "";
                                            for (var row in data) {
                                                for (var item in data[row]) {
                                                    colCntr++;
                                                    switch (colCntr) {
                                                        case 1:
                                                            custNo = data[row][item]; //number = data[row][item];
                                                            break;
                                                        case 2:
                                                            nicCountry = data[row][item];
                                                            break;
                                                        case 3:
                                                            nicIDType = data[row][item];
                                                            break;
                                                        case 4:
                                                            nicIDNo = data[row][item];
                                                            break;
                                                        case 5:
                                                            nicDateIssd = data[row][item];
                                                            break;
                                                        case 6:
                                                            nicExpDate = data[row][item];
                                                            break;
							case 7:
                                                            nicPrsnType = data[row][item];
                                                            break;
                                                        default:
                                                            var dialog = bootbox.alert({
                                                                title: 'Error-Validating Selected File',
                                                                size: 'small',
                                                                message: '<span style="color:red;font-weight:bold:">An error occurred reading this file.Invalid Column in File!</span>',
                                                                callback: function () {
                                                                    isFileValid = false;
                                                                    reader.abort();
                                                                }
                                                            });
                                                    }
                                                }
                                                if (rwCntr === 0) {
                                                    //alert(number.toUpperCase() + "|" + idNo.toUpperCase() + "|" + faxNo.toUpperCase());
                                                    if (custNo.toUpperCase() === "CUST NO" && nicCountry.toUpperCase() === "NATIONALITY**"
                                                            && nicIDType.toUpperCase() === "ID TYPE**")
                                                    {

                                                    } else {
                                                        var dialog = bootbox.alert({
                                                            title: 'Error-Import National ID',
                                                            size: 'small',
                                                            message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                            callback: function () {
                                                                isFileValid = false;
                                                                reader.abort();
                                                            }
                                                        });
                                                    }
                                                }
                                                if (1 == 1 /*idNo.trim() !== "" && title.trim() !== ""
                                                 && firstName.trim() !== ""
                                                 && surName.trim() !== "" && gender.trim() !== "" && maritalStatus.trim() !== "" && dob.trim() !== ""
                                                 && nationality.trim() !== "" && lnkdFirmName.trim() !== "" 
                                                 && mobileNo.trim() !== "" && prsnType.trim() !== "" && relation.trim() !== "" && startDate.trim() !== ""
                                                 && bnkBranch.trim() !== ""*/)
                                                {
                                                    //if valid data
                                                    /*.replace(/(~)+/g, "{-;-;}") .replace(/(\|)+/g, "{:;:;}")*/
                                                    dataToSend = dataToSend + custNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + nicCountry.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + nicIDType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + nicIDNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + nicDateIssd.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + nicExpDate.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + nicPrsnType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                                                    vldRwCntr++;
                                                }
                                                colCntr = 0;
                                                rwCntr++;
                                            }
                                            output += '<br/><span style="color:blue;font-weight:bold;">No. of Valid Rows:' + vldRwCntr;
                                            output += '<br/>Total No. of Rows:' + rwCntr + '</span>';
                                            $("#fileInformation").html(output);
                                        } catch (err) {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import National ID',
                                                size: 'small',
                                                message: 'Error:' + err.message,
                                                callback: function () {
                                                    isFileValid = false;
                                                    reader.abort();
                                                }
                                            });
                                        }
                                    };
                                    reader.readAsText(file);
                                }, 500);
                            },
                            buttons: [{
                                    label: 'Cancel',
                                    icon: 'glyphicon glyphicon-menu-left',
                                    cssClass: 'btn-default',
                                    action: function (dialogItself) {
                                        isFileValid = false;
                                        reader.abort();
                                        dialogItself.close();
                                    }
                                }, {
                                    id: 'btn-srvr-prcs',
                                    label: 'Start Server Processing',
                                    icon: 'glyphicon glyphicon-menu-right',
                                    cssClass: 'btn-primary',
                                    action: function (dialogItself) {
                                        if (isFileValid == true) {
                                            dialogItself.close();
                                            saveNtnlID(dataToSend);
                                        } else {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import National ID',
                                                size: 'small',
                                                message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                callback: function () {
                                                }
                                            });
                                        }
                                    }
                                }]
                        });
                    });
                    performFileClick('allOtherFileInput6');
                }
            }
        }
    });
}

function saveNtnlID(dataToSend)
{
    if (dataToSend.trim() === '')
    {
        bootbox.alert({
            title: 'System Alert!',
            size: 'small',
            message: '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;">No Data to Send!</span></p>'
        });
        return false;
    }
    var dialog = bootbox.alert({
        title: 'Importing National ID',
        size: 'small',
        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Importing National ID...Please Wait...</div>',
        callback: function () {
            clearInterval(prgstimerid2);
            getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.1', 'mcfIndCstmr');
            //getAllRpts('clear', '#allmodules', 'grp=9&typ=1&pg=1&vtyp=0');
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 11,
                    subPgNo: 1.1,
                    q: 'UPDATE',
                    actyp: 7,
                    dataToSend: dataToSend
                }
            });
            prgstimerid2 = window.setInterval(rfrshSaveNtnlID, 1000);
        });
    });
}

function rfrshSaveNtnlID() {
    $.ajax({
        method: "POST",
        url: "index.php",
        data: {
            grp: 17,
            typ: 1,
            pg: 11,
            subPgNo: 1.1,
            q: 'UPDATE',
            actyp: 6
        },
        success: function (data) {
            var elem = document.getElementById('myBar1');
            elem.style.width = data.percent + '%';
            $("#myInformation1").html(data.message);
            if (data.percent >= 100) {
                window.clearInterval(prgstimerid2);
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus + " " + errorThrown);
            console.warn(jqXHR.responseText);
        }
    });
}

function imprtOtherPersons()
{
    var dataToSend = "";
    var isFileValid = true;
    var dialog1 = bootbox.confirm({
        title: 'Import Other Persons?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:green;font-weight:bold;font-style:italic;">IMPORT OTHER PERSONS</span> to overwrite existing ones?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                if (isReaderAPIAvlbl()) {
                    $("#allOtherFileInput6").val('');
                    $("#allOtherFileInput6").off('change');
                    $("#allOtherFileInput6").change(function () {
                        var fileName = $(this).val();
                        var input = document.getElementById('allOtherFileInput6');
                        var file = input.files[0];
                        // read the file metadata
                        var output = '';
                        output += '<span style="font-weight:bold;">' + escape(file.name) + '</span><br />\n';
                        output += ' - FileType: ' + (file.type || 'n/a') + '<br />\n';
                        output += ' - FileSize: ' + file.size + ' bytes<br />\n';
                        output += ' - LastModified: ' + (file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() : 'n/a') + '<br />\n';
                        var reader = new FileReader();
                        BootstrapDialog.show({
                            size: BootstrapDialog.SIZE_LARGE,
                            type: BootstrapDialog.TYPE_DEFAULT,
                            title: 'Validating Selected File',
                            message: '<div id="myProgress"><div id="myBar"></div></div><div id="myInformation"><i class="fa fa-spin fa-spinner"></i> Validating Selected File...Please Wait...</div><br/><div id="fileInformation">' + output + '</div>',
                            animate: true,
                            closable: true,
                            closeByBackdrop: false,
                            closeByKeyboard: false,
                            onshow: function (dialogItself) {
                                setTimeout(function () {
                                    var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                    $footerButton.disable();
                                    // read the file content
                                    reader.onerror = function (evt) {
                                        switch (evt.target.error.code) {
                                            case evt.target.error.NOT_FOUND_ERR:
                                                alert('File Not Found!');
                                                break;
                                            case evt.target.error.NOT_READABLE_ERR:
                                                alert('File is not readable');
                                                break;
                                            case evt.target.error.ABORT_ERR:
                                                break; // noop
                                            default:
                                                alert('An error occurred reading this file.');
                                        }
                                        ;
                                    };
                                    reader.onprogress = function (evt) {
                                        // evt is an ProgressEvent.
                                        if (evt.lengthComputable) {
                                            var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
                                            // Increase the progress bar length.
                                            var elem = document.getElementById('myBar');
                                            elem.style.width = percentLoaded + '%';
                                            if (percentLoaded < 100) {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>' + percentLoaded + '% Validating Selected File...Please Wait...</span>');
                                            } else {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-check"></i>' + percentLoaded + '% Validating Selected File Completed!</span>');
                                                var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                                if (isFileValid == true) {
                                                    $footerButton.enable();
                                                } else {
                                                    $footerButton.disable();
                                                }
                                            }
                                        }
                                    };
                                    reader.onabort = function (e) {
                                        alert('File read cancelled');
                                    };
                                    reader.onloadstart = function (e) {
                                        var elem = document.getElementById('myBar');
                                        elem.style.width = '1%';
                                        $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>1% Started Importing Other Persons...Please Wait...</span>');
                                    };
                                    reader.onload = function (event) {
                                        try {
                                            var csv = event.target.result;
                                            var data = $.csv.toArrays(csv);
                                            var rwCntr = 0;
                                            var colCntr = 0;
                                            var vldRwCntr = 0;
                                            var number = "";
                                            var idNo = "";
                                            var title = "";
                                            var firstName = "";
                                            var surName = "";
                                            var otherNames = "";
                                            var gender = "";
                                            var maritalStatus = "";
                                            var dob = "";
                                            var pob = "";
                                            var nationality = "";
                                            var homeTown = "";
                                            var religion = "";
                                            var lnkdFirmName = "";
                                            var lnkdFirmLoc = "";
                                            var email = "";
                                            var telNo = "";
                                            var mobileNo = "";
                                            var faxNo = "";
                                            var postalAddress = "";
                                            var residentialAddress = "";
                                            var relation = "";
                                            var startDate = "";
                                            var endDate = "";
                                            var prsnType = "";
                                            var bnkBranch = "";
                                            var rcdStatus = "";
                                            var segment1 = "";
                                            for (var row in data) {
                                                for (var item in data[row]) {
                                                    colCntr++;
                                                    switch (colCntr) {
                                                        case 1:
                                                            number = data[row][item];
                                                            break;
                                                        case 2:
                                                            idNo = data[row][item];
                                                            break;
                                                        case 3:
                                                            title = data[row][item];
                                                            break;
                                                        case 4:
                                                            firstName = data[row][item];
                                                            break;
                                                        case 5:
                                                            surName = data[row][item];
                                                            break;
                                                        case 6:
                                                            otherNames = data[row][item];
                                                            break;
                                                        case 7:
                                                            gender = data[row][item];
                                                            break;
                                                        case 8:
                                                            maritalStatus = data[row][item];
                                                            break;
                                                        case 9:
                                                            dob = data[row][item];
                                                            break;
                                                        case 10:
                                                            pob = data[row][item];
                                                            break;
                                                        case 11:
                                                            nationality = data[row][item];
                                                            break;
                                                        case 12:
                                                            homeTown = data[row][item];
                                                            break;
                                                        case 13:
                                                            religion = data[row][item];
                                                            break;
                                                        case 14:
                                                            lnkdFirmName = data[row][item];
                                                            break;
                                                        case 15:
                                                            lnkdFirmLoc = data[row][item];
                                                            break;
                                                        case 16:
                                                            email = data[row][item];
                                                            break;
                                                        case 17:
                                                            telNo = data[row][item];
                                                            break;
                                                        case 18:
                                                            mobileNo = data[row][item];
                                                            break;
                                                        case 19:
                                                            faxNo = data[row][item];
                                                            break;
                                                        case 20:
                                                            postalAddress = data[row][item];
                                                            break;
                                                        case 21:
                                                            residentialAddress = data[row][item];
                                                            break;
                                                        case 22:
                                                            relation = data[row][item];
                                                            break;
                                                        case 23:
                                                            startDate = data[row][item];
                                                            break;
                                                        case 24:
                                                            endDate = data[row][item];
                                                            break;
                                                        case 25:
                                                            prsnType = data[row][item];
                                                            break;
                                                        case 26:
                                                            bnkBranch = data[row][item];
                                                            break;
                                                        case 27:
                                                            rcdStatus = data[row][item];
                                                            break;
                                                        case 28:
                                                            segment1 = data[row][item];
                                                            break;
                                                        default:
                                                            var dialog = bootbox.alert({
                                                                title: 'Error-Validating Selected File',
                                                                size: 'small',
                                                                message: '<span style="color:red;font-weight:bold:">An error occurred reading this file.Invalid Column in File!</span>',
                                                                callback: function () {
                                                                    isFileValid = false;
                                                                    reader.abort();
                                                                }
                                                            });
                                                    }
                                                }
                                                if (rwCntr === 0) {
                                                    //alert(number.toUpperCase() + "|" + idNo.toUpperCase() + "|" + faxNo.toUpperCase());
                                                    if (number.toUpperCase() === "NO." && idNo.toUpperCase() === "CUSTOMER ID**"
                                                            && title.toUpperCase() === "TITLE**")
                                                    {

                                                    } else {
                                                        var dialog = bootbox.alert({
                                                            title: 'Error-Import Other Persons',
                                                            size: 'small',
                                                            message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                            callback: function () {
                                                                isFileValid = false;
                                                                reader.abort();
                                                            }
                                                        });
                                                    }
                                                }
                                                if (1 == 1 /*idNo.trim() !== "" && title.trim() !== ""
                                                 && firstName.trim() !== ""
                                                 && surName.trim() !== "" && gender.trim() !== "" && maritalStatus.trim() !== "" && dob.trim() !== ""
                                                 && nationality.trim() !== "" && lnkdFirmName.trim() !== "" 
                                                 && mobileNo.trim() !== "" && prsnType.trim() !== "" && relation.trim() !== "" && startDate.trim() !== ""
                                                 && bnkBranch.trim() !== ""*/)
                                                {
                                                    //if valid data
                                                    /*.replace(/(~)+/g, "{-;-;}") .replace(/(\|)+/g, "{:;:;}")*/
                                                    dataToSend = dataToSend + number.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + idNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + title.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + firstName.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + surName.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + otherNames.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + gender.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + maritalStatus.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + dob.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + pob.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + nationality.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + homeTown.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + religion.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + lnkdFirmName.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + lnkdFirmLoc.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + email.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + telNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + mobileNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + faxNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + postalAddress.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + residentialAddress.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + relation.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + startDate.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + endDate.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prsnType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + bnkBranch.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + rcdStatus.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + segment1.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                                                    vldRwCntr++;
                                                }
                                                colCntr = 0;
                                                rwCntr++;
                                            }
                                            output += '<br/><span style="color:blue;font-weight:bold;">No. of Valid Rows:' + vldRwCntr;
                                            output += '<br/>Total No. of Rows:' + rwCntr + '</span>';
                                            $("#fileInformation").html(output);
                                        } catch (err) {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import Other Persons',
                                                size: 'small',
                                                message: 'Error:' + err.message,
                                                callback: function () {
                                                    isFileValid = false;
                                                    reader.abort();
                                                }
                                            });
                                        }
                                    };
                                    reader.readAsText(file);
                                }, 500);
                            },
                            buttons: [{
                                    label: 'Cancel',
                                    icon: 'glyphicon glyphicon-menu-left',
                                    cssClass: 'btn-default',
                                    action: function (dialogItself) {
                                        isFileValid = false;
                                        reader.abort();
                                        dialogItself.close();
                                    }
                                }, {
                                    id: 'btn-srvr-prcs',
                                    label: 'Start Server Processing',
                                    icon: 'glyphicon glyphicon-menu-right',
                                    cssClass: 'btn-primary',
                                    action: function (dialogItself) {
                                        if (isFileValid == true) {
                                            dialogItself.close();
                                            saveOtherPersons(dataToSend);
                                        } else {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import Other Persons',
                                                size: 'small',
                                                message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                callback: function () {
                                                }
                                            });
                                        }
                                    }
                                }]
                        });
                    });
                    performFileClick('allOtherFileInput6');
                }
            }
        }
    });
}

function saveOtherPersons(dataToSend)
{
    if (dataToSend.trim() === '')
    {
        bootbox.alert({
            title: 'System Alert!',
            size: 'small',
            message: '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;">No Data to Send!</span></p>'
        });
        return false;
    }
    var dialog = bootbox.alert({
        title: 'Importing Other Persons/Processes',
        size: 'small',
        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Importing Other Persons/Processes...Please Wait...</div>',
        callback: function () {
            clearInterval(prgstimerid2);
            getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.4', 'mcfOthPCstmr');
            //getAllRpts('clear', '#allmodules', 'grp=9&typ=1&pg=1&vtyp=0');
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 11,
                    subPgNo: 1.4,
                    q: 'UPDATE',
                    actyp: 5,
                    dataToSend: dataToSend
                }
            });
            prgstimerid2 = window.setInterval(rfrshSaveOtherPersons, 1000);
        });
    });
}

function rfrshSaveOtherPersons() {
    $.ajax({
        method: "POST",
        url: "index.php",
        data: {
            grp: 17,
            typ: 1,
            pg: 11,
            subPgNo: 1.4,
            q: 'UPDATE',
            actyp: 6
        },
        success: function (data) {
            var elem = document.getElementById('myBar1');
            elem.style.width = data.percent + '%';
            $("#myInformation1").html(data.message);
            if (data.percent >= 100) {
                window.clearInterval(prgstimerid2);
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus + " " + errorThrown);
            console.warn(jqXHR.responseText);
        }
    });
}

function imprtLoanApplctns()
{
    var dataToSend = "";
    var isFileValid = true;
    var dialog1 = bootbox.confirm({
        title: 'Import Loan Applications?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:green;font-weight:bold;font-style:italic;">IMPORT LOAN APPLICATIONS</span> to overwrite existing ones?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                if (isReaderAPIAvlbl()) {
                    $("#allOtherFileInput6").val('');
                    $("#allOtherFileInput6").off('change');
                    $("#allOtherFileInput6").change(function () {
                        var fileName = $(this).val();
                        var input = document.getElementById('allOtherFileInput6');
                        var file = input.files[0];
                        // read the file metadata
                        var output = '';
                        output += '<span style="font-weight:bold;">' + escape(file.name) + '</span><br />\n';
                        output += ' - FileType: ' + (file.type || 'n/a') + '<br />\n';
                        output += ' - FileSize: ' + file.size + ' bytes<br />\n';
                        output += ' - LastModified: ' + (file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() : 'n/a') + '<br />\n';
                        var reader = new FileReader();
                        BootstrapDialog.show({
                            size: BootstrapDialog.SIZE_LARGE,
                            type: BootstrapDialog.TYPE_DEFAULT,
                            title: 'Validating Selected File',
                            message: '<div id="myProgress"><div id="myBar"></div></div><div id="myInformation"><i class="fa fa-spin fa-spinner"></i> Validating Selected File...Please Wait...</div><br/><div id="fileInformation">' + output + '</div>',
                            animate: true,
                            closable: true,
                            closeByBackdrop: false,
                            closeByKeyboard: false,
                            onshow: function (dialogItself) {
                                setTimeout(function () {
                                    var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                    $footerButton.disable();
                                    // read the file content
                                    reader.onerror = function (evt) {
                                        switch (evt.target.error.code) {
                                            case evt.target.error.NOT_FOUND_ERR:
                                                alert('File Not Found!');
                                                break;
                                            case evt.target.error.NOT_READABLE_ERR:
                                                alert('File is not readable');
                                                break;
                                            case evt.target.error.ABORT_ERR:
                                                break; // noop
                                            default:
                                                alert('An error occurred reading this file.');
                                        }
                                        ;
                                    };
                                    reader.onprogress = function (evt) {
                                        // evt is an ProgressEvent.
                                        if (evt.lengthComputable) {
                                            var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
                                            // Increase the progress bar length.
                                            var elem = document.getElementById('myBar');
                                            elem.style.width = percentLoaded + '%';
                                            if (percentLoaded < 100) {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>' + percentLoaded + '% Validating Selected File...Please Wait...</span>');
                                            } else {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-check"></i>' + percentLoaded + '% Validating Selected File Completed!</span>');
                                                var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                                if (isFileValid == true) {
                                                    $footerButton.enable();
                                                } else {
                                                    $footerButton.disable();
                                                }
                                            }
                                        }
                                    };
                                    reader.onabort = function (e) {
                                        alert('File read cancelled');
                                    };
                                    reader.onloadstart = function (e) {
                                        var elem = document.getElementById('myBar');
                                        elem.style.width = '1%';
                                        $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>1% Started Importing Loan Applications...Please Wait...</span>');
                                    };
                                    reader.onload = function (event) {
                                        try {
                                            var csv = event.target.result;
                                            var data = $.csv.toArrays(csv);
                                            var rwCntr = 0;
                                            var colCntr = 0;
                                            var vldRwCntr = 0;
                                            var loanNo = "";
                                            var applctnDate = "";
                                            var loanAmount = "";
                                            var loanTenor  = "";
                                            var prpsOfLoan  = "";
                                            var bnkBranchCode = "";
                                            var rpmntSrcAcct = "";
                                            var apprvlStatus = "";
                                            var loanTenorType  = "";
                                            var apprvdAmount = "";
                                            var isDisbursed = "";
                                            var crdtOfficerCode = "";
                                            var rqstType = "";
                                            var crdtType = "";
                                            var apprvdLoanTenor = "";
                                            var apprvdInterestRate = "";
                                            var rpmntSrcType = "";
                                            var sectorMinor = "";
                                            var loanProductNo = "";
                                            var prncplBal = "";
                                            var intrstBal = "";
                                            var odStartDte = "";
                                            var odEndDte = "";
                                            var ttlLoanPymnts = "";
                                            for (var row in data) {
                                                for (var item in data[row]) {
                                                    colCntr++;
                                                    switch (colCntr) {
                                                        case 1:
                                                            loanNo = data[row][item];
                                                            break;
                                                        case 2:
                                                            applctnDate = data[row][item];
                                                            break;
                                                        case 3:
                                                            loanAmount  = data[row][item];
                                                            break;
                                                        case 4:
                                                            loanTenor  = data[row][item];
                                                            break;
                                                        case 5:
                                                            prpsOfLoan = data[row][item];
                                                            break;
                                                        case 6:
                                                            bnkBranchCode = data[row][item];
                                                            break;
                                                        case 7:
                                                            rpmntSrcAcct = data[row][item];
                                                            break;
                                                        case 8:
                                                            apprvlStatus = data[row][item];
                                                            break;
                                                        case 9:
                                                            loanTenorType  = data[row][item];
                                                            break;
                                                        case 10:
                                                            apprvdAmount = data[row][item];
                                                            break;
                                                        case 11:
                                                            isDisbursed = data[row][item];
                                                            break;
                                                        case 12:
                                                            crdtOfficerCode = data[row][item];
                                                            break;
                                                        case 13:
                                                            rqstType  = data[row][item];
                                                            break;
                                                        case 14:
                                                            crdtType  = data[row][item];
                                                            break;
                                                        case 15:
                                                            apprvdLoanTenor = data[row][item];
                                                            break;
                                                        case 16:
                                                            apprvdInterestRate = data[row][item];
                                                            break;
                                                        case 17:
                                                            rpmntSrcType = data[row][item];
                                                            break;
                                                        case 18:
                                                            sectorMinor = data[row][item];
                                                            break;
                                                        case 19:
                                                            loanProductNo = data[row][item];
                                                            break;
                                                        case 20:
                                                            prncplBal = data[row][item];
                                                            break;
                                                        case 21:
                                                            intrstBal = data[row][item];
                                                            break;
                                                        case 22:
                                                            odStartDte = data[row][item];
                                                            break;
                                                        case 23:
                                                            odEndDte = data[row][item];
                                                            break;
                                                        case 24:
                                                            ttlLoanPymnts = data[row][item];
                                                            break;
                                                        default:
                                                            var dialog = bootbox.alert({
                                                                title: 'Error-Validating Selected File',
                                                                size: 'small',
                                                                message: '<span style="color:red;font-weight:bold:">An error occurred reading this file.Invalid Column in File!</span>',
                                                                callback: function () {
                                                                    isFileValid = false;
                                                                    reader.abort();
                                                                }
                                                            });
                                                    }
                                                }
                                                if (rwCntr === 0) {
                                                    //alert(loanPrdtNo.toUpperCase() + "|" + applctnDate.toUpperCase() + "|" + faxNo.toUpperCase());
                                                    if (loanNo.toUpperCase() === "LOAN NO" && applctnDate.toUpperCase() === "APPLICATION DATE**"
                                                            && loanAmount.toUpperCase() === "LOAN AMOUNT**")
                                                    {

                                                    } else {
                                                        var dialog = bootbox.alert({
                                                            title: 'Error-Import Loan Applications',
                                                            size: 'small',
                                                            message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                            callback: function () {
                                                                isFileValid = false;
                                                                reader.abort();
                                                            }
                                                        });
                                                    }
                                                }
                                                if (1 == 1 /*applctnDate.trim() !== "" && applctnDate.trim() !== ""
                                                 && loanAmount .trim() !== ""
                                                 && loanTenor .trim() !== "" && rpmntSrcAcct.trim() !== "" && apprvlStatus.trim() !== "" && loanTenorType .trim() !== ""
                                                 && isDisbursed.trim() !== "" && crdtType .trim() !== "" 
                                                 && sectorMinor.trim() !== "" && prsnType.trim() !== "" && relation.trim() !== "" && startDate.trim() !== ""
                                                 && bnkBranch.trim() !== ""*/)
                                                {
                                                    //if valid data
                                                    /*.replace(/(~)+/g, "{-;-;}") .replace(/(\|)+/g, "{:;:;}")*/
                                                    dataToSend = dataToSend + loanNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + applctnDate.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + loanAmount.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + loanTenor.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prpsOfLoan.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + bnkBranchCode.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + rpmntSrcAcct.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + apprvlStatus.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + loanTenorType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + apprvdAmount.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + isDisbursed.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + crdtOfficerCode.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + rqstType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + crdtType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + apprvdLoanTenor.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + apprvdInterestRate.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + rpmntSrcType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + sectorMinor.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + loanProductNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prncplBal.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + intrstBal.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + odStartDte.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + odEndDte.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + ttlLoanPymnts.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                                                    vldRwCntr++;
                                                }
                                                colCntr = 0;
                                                rwCntr++;
                                            }
                                            output += '<br/><span style="color:blue;font-weight:bold;">No. of Valid Rows:' + vldRwCntr;
                                            output += '<br/>Total No. of Rows:' + rwCntr + '</span>';
                                            $("#fileInformation").html(output);
                                        } catch (err) {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import Loan Applications',
                                                size: 'small',
                                                message: 'Error:' + err.message,
                                                callback: function () {
                                                    isFileValid = false;
                                                    reader.abort();
                                                }
                                            });
                                        }
                                    };
                                    reader.readAsText(file);
                                }, 500);
                            },
                            buttons: [{
                                    label: 'Cancel',
                                    icon: 'glyphicon glyphicon-menu-left',
                                    cssClass: 'btn-default',
                                    action: function (dialogItself) {
                                        isFileValid = false;
                                        reader.abort();
                                        dialogItself.close();
                                    }
                                }, {
                                    id: 'btn-srvr-prcs',
                                    label: 'Start Server Processing',
                                    icon: 'glyphicon glyphicon-menu-right',
                                    cssClass: 'btn-primary',
                                    action: function (dialogItself) {
                                        if (isFileValid == true) {
                                            dialogItself.close();
                                            saveLoanApplctns(dataToSend);
                                        } else {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import Loan Applications',
                                                size: 'small',
                                                message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                callback: function () {
                                                }
                                            });
                                        }
                                    }
                                }]
                        });
                    });
                    performFileClick('allOtherFileInput6');
                }
            }
        }
    });
}

function saveLoanApplctns(dataToSend)
{
    if (dataToSend.trim() === '')
    {
        bootbox.alert({
            title: 'System Alert!',
            size: 'small',
            message: '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;">No Data to Send!</span></p>'
        });
        return false;
    }
    var dialog = bootbox.alert({
        title: 'Importing Loan Applications/Processes',
        size: 'small',
        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Importing Loan Applications/Processes...Please Wait...</div>',
        callback: function () {
            clearInterval(prgstimerid2);
            getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.1');
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 15,
                    subPgNo: 4.1,
                    q: 'UPDATE',
                    actyp: 5,
                    dataToSend: dataToSend
                }
            });
            prgstimerid2 = window.setInterval(rfrshSaveLoanApplctns, 1000);
        });
    });
}

function rfrshSaveLoanApplctns() {
    $.ajax({
        method: "POST",
        url: "index.php",
        data: {
            grp: 17,
            typ: 1,
            pg: 11,
            subPgNo: 1.1,
            q: 'UPDATE',
            actyp: 6
        },
        success: function (data) {
            var elem = document.getElementById('myBar1');
            elem.style.width = data.percent + '%';
            $("#myInformation1").html(data.message);
            if (data.percent >= 100) {
                window.clearInterval(prgstimerid2);
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus + " " + errorThrown);
            console.warn(jqXHR.responseText);
        }
    });
}

function imprtDisbursements()
{
    var msgsTitle = 'Loan Disbursements';
    var slctdLoanClsfctns = "";
    var isVld = true;
    var errMsg = "";

    if (rhotrim(errMsg, '; ') !== '')
    {
        bootbox.alert({
            title: 'System Alert!',
            message: errMsg});
        return false;
    }

   
    var box;
    var box2;
    var mnBox;  
    var dialog;
    
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to import Loan Disbursements?",
        callback: function (result) {
            /* your callback code */
            if (result) {
                dialog = bootbox.alert({
                    title: 'Save ' + msgsTitle,
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Processing ' + msgsTitle + '...Please Wait...</p>',
                    callback: function () {
                        getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.2');
                    }
                });
                
                dialog.init(function () {
                    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                        $body = $("body");
                        $body.removeClass("mdlloading");
                        $.ajax({
                            method: "POST",
                            url: "index.php",
                            data: {
                                grp: 17,
                                typ: 1,
                                pg: 15,
                                subPgNo: 4.2,
                                q: 'UPDATE',
                                actyp: 1,
                            },
                            success: function (result) {
                                setTimeout(function () {
                                    dialog.find('.bootbox-body').html(result);
                                }, 500);
                            },
                            error: function (jqXHR, textStatus, errorThrown)
                            {
                                /*dialog.find('.bootbox-body').html(errorThrown);*/
                                console.warn(jqXHR.responseText);
                            }
                        });
                    });
                });
            }

        }
    });
    mnBox.find('.modal-content').css({
    'margin-top': function () {
        var w = $(window).height();
        var b = $(".modal-dialog").height();
        // should not be (w-h)/2
        var h = (w - b - 150) / 2;
        return h + "px";
        }
    });    
}

function imprtLoanSchedules()
{
    var dataToSend = "";
    var isFileValid = true;
    var dialog1 = bootbox.confirm({
        title: 'Import Loan Schedules?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:green;font-weight:bold;font-style:italic;">IMPORT LOAN SCHEDULES</span> to overwrite existing ones?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                if (isReaderAPIAvlbl()) {
                    $("#allOtherFileInput6").val('');
                    $("#allOtherFileInput6").off('change');
                    $("#allOtherFileInput6").change(function () {
                        var fileName = $(this).val();
                        var input = document.getElementById('allOtherFileInput6');
                        var file = input.files[0];
                        // read the file metadata
                        var output = '';
                        output += '<span style="font-weight:bold;">' + escape(file.name) + '</span><br />\n';
                        output += ' - FileType: ' + (file.type || 'n/a') + '<br />\n';
                        output += ' - FileSize: ' + file.size + ' bytes<br />\n';
                        output += ' - LastModified: ' + (file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() : 'n/a') + '<br />\n';
                        var reader = new FileReader();
                        BootstrapDialog.show({
                            size: BootstrapDialog.SIZE_LARGE,
                            type: BootstrapDialog.TYPE_DEFAULT,
                            title: 'Validating Selected File',
                            message: '<div id="myProgress"><div id="myBar"></div></div><div id="myInformation"><i class="fa fa-spin fa-spinner"></i> Validating Selected File...Please Wait...</div><br/><div id="fileInformation">' + output + '</div>',
                            animate: true,
                            closable: true,
                            closeByBackdrop: false,
                            closeByKeyboard: false,
                            onshow: function (dialogItself) {
                                setTimeout(function () {
                                    var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                    $footerButton.disable();
                                    // read the file content
                                    reader.onerror = function (evt) {
                                        switch (evt.target.error.code) {
                                            case evt.target.error.NOT_FOUND_ERR:
                                                alert('File Not Found!');
                                                break;
                                            case evt.target.error.NOT_READABLE_ERR:
                                                alert('File is not readable');
                                                break;
                                            case evt.target.error.ABORT_ERR:
                                                break; // noop
                                            default:
                                                alert('An error occurred reading this file.');
                                        }
                                        ;
                                    };
                                    reader.onprogress = function (evt) {
                                        // evt is an ProgressEvent.
                                        if (evt.lengthComputable) {
                                            var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
                                            // Increase the progress bar length.
                                            var elem = document.getElementById('myBar');
                                            elem.style.width = percentLoaded + '%';
                                            if (percentLoaded < 100) {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>' + percentLoaded + '% Validating Selected File...Please Wait...</span>');
                                            } else {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-check"></i>' + percentLoaded + '% Validating Selected File Completed!</span>');
                                                var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                                if (isFileValid == true) {
                                                    $footerButton.enable();
                                                } else {
                                                    $footerButton.disable();
                                                }
                                            }
                                        }
                                    };
                                    reader.onabort = function (e) {
                                        alert('File read cancelled');
                                    };
                                    reader.onloadstart = function (e) {
                                        var elem = document.getElementById('myBar');
                                        elem.style.width = '1%';
                                        $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>1% Started Importing Loan Schedules...Please Wait...</span>');
                                    };
                                    reader.onload = function (event) {
                                        try {
                                            var csv = event.target.result;
                                            var data = $.csv.toArrays(csv);
                                            var rwCntr = 0;
                                            var colCntr = 0;
                                            var vldRwCntr = 0;
                                            var loanNo = "";
                                            var repayDate = "";
                                            var begnBal = "";
                                            var interestAmnt  = "";
                                            var prncplAmnt  = "";
                                            var endnBal = "";
                                            var isPaid = "";
                                            var interestAmntPaid = "";
                                            var prncplAmntPaid  = "";
                                            var shdWaiveInterest = "";
                                            var repayStartDate = "";
                                            var repayEndDate = "";
                                            var ttlInterest = "";
                                            for (var row in data) {
                                                for (var item in data[row]) {
                                                    colCntr++;
                                                    switch (colCntr) {
                                                        case 1:
                                                            loanNo = data[row][item];
                                                            break;
                                                        case 2:
                                                            repayDate = data[row][item];
                                                            break;
                                                        case 3:
                                                            begnBal  = data[row][item];
                                                            break;
                                                        case 4:
                                                            interestAmnt  = data[row][item];
                                                            break;
                                                        case 5:
                                                            prncplAmnt = data[row][item];
                                                            break;
                                                        case 6:
                                                            endnBal = data[row][item];
                                                            break;
                                                        case 7:
                                                            isPaid = data[row][item];
                                                            break;
                                                        case 8:
                                                            interestAmntPaid = data[row][item];
                                                            break;
                                                        case 9:
                                                            prncplAmntPaid  = data[row][item];
                                                            break;
                                                        case 10:
                                                            shdWaiveInterest = data[row][item];
                                                            break;
                                                        case 11:
                                                            repayStartDate = data[row][item];
                                                            break;
                                                        case 12:
                                                            repayEndDate = data[row][item];
                                                            break;
                                                        case 13:
                                                            ttlInterest  = data[row][item];
                                                            break;
                                                        default:
                                                            var dialog = bootbox.alert({
                                                                title: 'Error-Validating Selected File',
                                                                size: 'small',
                                                                message: '<span style="color:red;font-weight:bold:">An error occurred reading this file.Invalid Column in File!</span>',
                                                                callback: function () {
                                                                    isFileValid = false;
                                                                    reader.abort();
                                                                }
                                                            });
                                                    }
                                                }
                                                if (rwCntr === 0) {
                                                    //alert(loanPrdtNo.toUpperCase() + "|" + repayDate.toUpperCase() + "|" + faxNo.toUpperCase());
                                                    if (loanNo.toUpperCase() === "LOAN NO" && repayDate.toUpperCase() === "REPAY DATE**"
                                                            && begnBal.toUpperCase() === "BEGINNING BALANCE**")
                                                    {

                                                    } else {
                                                        var dialog = bootbox.alert({
                                                            title: 'Error-Import Loan Schedules',
                                                            size: 'small',
                                                            message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                            callback: function () {
                                                                isFileValid = false;
                                                                reader.abort();
                                                            }
                                                        });
                                                    }
                                                }
                                                if (1 == 1 /*repayDate.trim() !== "" && repayDate.trim() !== ""
                                                 && begnBal .trim() !== ""
                                                 && interestAmnt .trim() !== "" && isPaid.trim() !== "" && interestAmntPaid.trim() !== "" && prncplAmntPaid .trim() !== ""
                                                 && shdWaiveInterest.trim() !== "" && ttlInterest .trim() !== "" 
                                                 && sectorMinor.trim() !== "" && prsnType.trim() !== "" && relation.trim() !== "" && startDate.trim() !== ""
                                                 && bnkBranch.trim() !== ""*/)
                                                {
                                                    //if valid data
                                                    /*.replace(/(~)+/g, "{-;-;}") .replace(/(\|)+/g, "{:;:;}")*/
                                                    dataToSend = dataToSend + loanNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + repayDate.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + begnBal.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + interestAmnt.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prncplAmnt.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + endnBal.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + isPaid.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + interestAmntPaid.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prncplAmntPaid.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + shdWaiveInterest.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + repayStartDate.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + repayEndDate.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + ttlInterest.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                                                    vldRwCntr++;
                                                }
                                                colCntr = 0;
                                                rwCntr++;
                                            }
                                            output += '<br/><span style="color:blue;font-weight:bold;">No. of Valid Rows:' + vldRwCntr;
                                            output += '<br/>Total No. of Rows:' + rwCntr + '</span>';
                                            $("#fileInformation").html(output);
                                        } catch (err) {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import Loan Schedules',
                                                size: 'small',
                                                message: 'Error:' + err.message,
                                                callback: function () {
                                                    isFileValid = false;
                                                    reader.abort();
                                                }
                                            });
                                        }
                                    };
                                    reader.readAsText(file);
                                }, 500);
                            },
                            buttons: [{
                                    label: 'Cancel',
                                    icon: 'glyphicon glyphicon-menu-left',
                                    cssClass: 'btn-default',
                                    action: function (dialogItself) {
                                        isFileValid = false;
                                        reader.abort();
                                        dialogItself.close();
                                    }
                                }, {
                                    id: 'btn-srvr-prcs',
                                    label: 'Start Server Processing',
                                    icon: 'glyphicon glyphicon-menu-right',
                                    cssClass: 'btn-primary',
                                    action: function (dialogItself) {
                                        if (isFileValid == true) {
                                            dialogItself.close();
                                            saveLoanSchedules(dataToSend);
                                        } else {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import Loan Schedules',
                                                size: 'small',
                                                message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                callback: function () {
                                                }
                                            });
                                        }
                                    }
                                }]
                        });
                    });
                    performFileClick('allOtherFileInput6');
                }
            }
        }
    });
}

function saveLoanSchedules(dataToSend)
{
    if (dataToSend.trim() === '')
    {
        bootbox.alert({
            title: 'System Alert!',
            size: 'small',
            message: '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;">No Data to Send!</span></p>'
        });
        return false;
    }
    var dialog = bootbox.alert({
        title: 'Importing Loan Schedules/Processes',
        size: 'small',
        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Importing Loan Schedules/Processes...Please Wait...</div>',
        callback: function () {
            clearInterval(prgstimerid2);
            getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.2');
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 15,
                    subPgNo: 4.2,
                    q: 'UPDATE',
                    actyp: 5,
                    dataToSend: dataToSend
                }
            });
            prgstimerid2 = window.setInterval(rfrshSaveLoanSchedules, 1000);
        });
    });
}

function rfrshSaveLoanSchedules() {
    $.ajax({
        method: "POST",
        url: "index.php",
        data: {
            grp: 17,
            typ: 1,
            pg: 11,
            subPgNo: 1.1,
            q: 'UPDATE',
            actyp: 6
        },
        success: function (data) {
            var elem = document.getElementById('myBar1');
            elem.style.width = data.percent + '%';
            $("#myInformation1").html(data.message);
            if (data.percent >= 100) {
                window.clearInterval(prgstimerid2);
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus + " " + errorThrown);
            console.warn(jqXHR.responseText);
        }
    });
}

function viewRefLoanRqst(){
    var refLoanrqstID = typeof $("#refLoanrqstID").val() === 'undefined' ? -1 : $("#refLoanrqstID").val();
    
    if(parseInt(refLoanrqstID) > 0){
        getLoanRqstForm('myFormsModalLgz', 'myFormsModalBodyLgz', 'myFormsModalTitleLgz', 'View Loan Request', 15, 4.1,0,'VIEW', refLoanrqstID,'indCustTable','indCustTableRow1');
    } else {
        bootbox.alert({
            title: 'Rhomicom Alert',
            size: 'small',
            message: '<span style="color:red;font-weight:bold:">Invalid Reference Loan!</span>',
            callback: function () {
            }
        });
        return false;
    }
}

function rjctAutrzCustDataRqst(wthdrwRjct, pgNo, subPgNo, vtyp)
{
    var box;
    var box2;
    var p_actyp = 1;
    var svOrsbmt = "Withdrawing.";
    var prmtMsg = "Are you sure you want to " + wthdrwRjct + " this Change Request?"

    if (wthdrwRjct == "REJECT") {
        svOrsbmt = "Rejecting.";
        p_actyp = 2;
    } else if (wthdrwRjct == "AUTHORIZE") {
        svOrsbmt = "Authorizing.";
        p_actyp = 3;
    }

    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var custID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">' + svOrsbmt + '. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('custID', custID);
                    formData.append('actyp', p_actyp);
                    formData.append('rvsnTtl', rvsnTtl);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                if (wthdrwRjct == "REJECT") {
                                    msg = "Change Request Successfully REJECTED!";
                                } else if (wthdrwRjct == "AUTHORIZE") {
                                    msg = "Change Request Successfully AUTHORIZED!";
                                } else {
                                    msg = "Change Request successfully WITHDRAWN";
                                }

                                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'View Customer Profile', 11, subPgNo, 0, 'VIEW', custID, '', 'indCustTableRow1', -1, function () {
                                    box.modal('hide');
                                    bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: msg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });
                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function rjctAutrzCustDataRqstNew(wthdrwRjct, pgNo, subPgNo, vtyp)
{
    var box;
    var box2;
    var p_actyp = 1;
    var svOrsbmt = "Withdrawing.";
    var prmtMsg = "Are you sure you want to " + wthdrwRjct + " this Change Request?"
    var dlgHdr = "VIEW CORPORATE CUSTOMER PROFILE";
    if(subPgNo == 1.3){
        dlgHdr = "VIEW CUSTOMER GROUP"
    }
    
    if (wthdrwRjct == "REJECT") {
        svOrsbmt = "Rejecting.";
        p_actyp = 2;
    } else if (wthdrwRjct == "AUTHORIZE") {
        svOrsbmt = "Authorizing.";
        p_actyp = 3;
    }

    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var custID = typeof $("#custID").val() === 'undefined' ? -1 : $("#custID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">' + svOrsbmt + '. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('custID', custID);
                    formData.append('actyp', p_actyp);
                    formData.append('rvsnTtl', rvsnTtl);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                if (wthdrwRjct == "REJECT") {
                                    msg = "Change Request Successfully REJECTED!";
                                } else if (wthdrwRjct == "AUTHORIZE") {
                                    msg = "Change Request Successfully AUTHORIZED!";
                                } else {
                                    msg = "Change Request successfully WITHDRAWN";
                                }

                                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', dlgHdr, 11, subPgNo, 0, 'VIEW', custID, '', 'indCustTableRow1', -1, function () {
                                    box.modal('hide');
                                    bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: msg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });
                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function rjctAutrzPrsnDataRqst(wthdrwRjct, pgNo, subPgNo, vtyp)
{
    var box;
    var box2;
    var p_actyp = 1;
    var svOrsbmt = "Withdrawing.";
    var prmtMsg = "Are you sure you want to " + wthdrwRjct + " this Change Request?"

    if (wthdrwRjct == "REJECT") {
        svOrsbmt = "Rejecting.";
        p_actyp = 2;
    } else if (wthdrwRjct == "AUTHORIZE") {
        svOrsbmt = "Authorizing.";
        p_actyp = 3;
    }

    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
        $body = $("body");
        var obj;
        var personID = typeof $("#personID").val() === 'undefined' ? -1 : $("#personID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;">' + svOrsbmt + '. Please Wait...</span></div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = w / 2; //(w - b) / 2;
                            return h + "px";
                        }
                    });
                    var formData = new FormData();
                    formData.append('grp', 17);
                    formData.append('typ', 1);
                    formData.append('q', 'UPDATE');
                    formData.append('pg', pgNo);
                    formData.append('subPgNo', subPgNo);
                    formData.append('vtyp', vtyp);
                    formData.append('personID', personID);
                    formData.append('actyp', p_actyp);
                    formData.append('rvsnTtl', rvsnTtl);
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                if (wthdrwRjct == "REJECT") {
                                    msg = "Change Request Successfully REJECTED!";
                                } else if (wthdrwRjct == "AUTHORIZE") {
                                    msg = "Change Request Successfully AUTHORIZED!";
                                } else {
                                    msg = "Change Request successfully WITHDRAWN";
                                }

                                getCustomersForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'View Customer Profile', 11, subPgNo, 0, 'VIEW', personID, '', 'indCustTableRow1', -1, function () {
                                    box.modal('hide');
                                    bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: msg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });
                            } else {
                                msg = data;
                                box.modal('hide');
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: msg,
                                    callback: function () { /* your callback code */
                                    }
                                });
                            }
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function rejectAuthorizedCustAccnt(pgNo, subPgNo, vtyp, actn)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var acctID = typeof $("#acctID").val() === 'undefined' ? -1 : $("#acctID").val();
        var rvsnTtl = typeof $("#rvsnTtl").val() === 'undefined' ? 0 : $("#rvsnTtl").val();
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        //var qstnNoId
        //alert('chkedAssmntID'+chkedAssmntID)
        var actnTyp;
        var prmtMsg = "Are you sure you want to submit account for Approval?"
        if (actn == 'REJECT')
        {
            actnTyp = 2;
            prmtMsg = "Are you sure you want to reject this Customer Account?"
        } else if (actn == 'WITHDRAW') {
            actnTyp = 3;
            prmtMsg = "Are you sure you want to withdraw this Customer Account?"
        } else {
            actnTyp = 4;
            prmtMsg = "Are you sure you want to Authorize this Customer Account?"
        } 


        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('q', 'UPDATE');
        formData.append('vtyp', vtyp);
        formData.append('actyp', actnTyp);
        formData.append('acctID', acctID);
        formData.append('accMndte', accMndte);
        formData.append('rvsnTtl',rvsnTtl);
        bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {

                    $body = $("body");
                    $body.addClass("mdlloadingDiag");
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            $body.removeClass("mdlloadingDiag");
                            $body.removeClass("mdlloading");
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                                obj = $.parseJSON(data);
                                acctID = obj.acctID;
                            } else {

                            }
                            
                            getCustAcctsForm('myFormsModalCA', 'myFormsModalBodyCA', 'myFormsModalTitleCA', 'View Customer Account', 13, 2.1, 0, 'VIEW', acctID, 'custAcctTable', 'indCustTableRow1', -1, function(){
                                bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: data,
                                    callback: function () { /* your callback code */
 
                                     }
                                });
                            });
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
}

function imprtOverdraftDisbursements()
{
    var msgsTitle = 'Overdraft Disbursements';
    var slctdLoanClsfctns = "";
    var isVld = true;
    var errMsg = "";

    if (rhotrim(errMsg, '; ') !== '')
    {
        bootbox.alert({
            title: 'System Alert!',
            message: errMsg});
        return false;
    }

   
    var box;
    var box2;
    var mnBox;  
    var dialog;
    
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to import Overdraft Disbursements?",
        callback: function (result) {
            /* your callback code */
            if (result) {
                dialog = bootbox.alert({
                    title: 'Save ' + msgsTitle,
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Processing ' + msgsTitle + '...Please Wait...</p>',
                    callback: function () {
                        getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.2');
                    }
                });
                
                dialog.init(function () {
                    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                        $body = $("body");
                        $body.removeClass("mdlloading");
                        $.ajax({
                            method: "POST",
                            url: "index.php",
                            data: {
                                grp: 17,
                                typ: 1,
                                pg: 15,
                                subPgNo: 4.2,
                                q: 'UPDATE',
                                actyp: 2,
                            },
                            success: function (result) {
                                setTimeout(function () {
                                    dialog.find('.bootbox-body').html(result);
                                }, 500);
                            },
                            error: function (jqXHR, textStatus, errorThrown)
                            {
                                /*dialog.find('.bootbox-body').html(errorThrown);*/
                                console.warn(jqXHR.responseText);
                            }
                        });
                    });
                });
            }

        }
    });
    mnBox.find('.modal-content').css({
    'margin-top': function () {
        var w = $(window).height();
        var b = $(".modal-dialog").height();
        // should not be (w-h)/2
        var h = (w - b - 150) / 2;
        return h + "px";
        }
    });    
}


function getAllGuarantors(actionText, slctr, linkArgs)
{
    var srchFor = typeof $("#allGuarantorsSrchFor").val() === 'undefined' ? '%' : $("#allGuarantorsSrchFor").val();
    var pageNo = typeof $("#allGuarantorsPageNo").val() === 'undefined' ? 1 : $("#allGuarantorsPageNo").val();
    var limitSze = typeof $("#allGuarantorsDsplySze").val() === 'undefined' ? 10 : $("#allGuarantorsDsplySze").val();
    if (actionText == 'clear')
    {
        srchFor = "%";
        pageNo = 1;
    } else if (actionText == 'next')
    {
        pageNo = parseInt(pageNo) + 1;
    } else if (actionText == 'previous')
    {
        pageNo = parseInt(pageNo) - 1;
    }
    linkArgs = linkArgs + "&searchfor=" + srchFor + "&pageNo=" + pageNo + "&limitSze=" + limitSze;
    openATab(slctr, linkArgs);
}

function enterKeyFuncAllGuarantors(e, actionText, slctr, linkArgs)
{
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAllGuarantors(actionText, slctr, linkArgs);
    }
}

function onChangeOfGrpApplcntType() {
    var grpApplicantTypeSltd = typeof $("#grpApplicantType").val() === 'undefined' ? '' : $("#grpApplicantType").val(); //$("#custType option:selected").val();
    //resetLoanRqstDetls();
    if (grpApplicantTypeSltd == "Group") {
        $('#bnkCustomerLbl').css('display', 'none');
        $('#bnkCustomerID').val($('#custGrpID').val()); 
        $('#bnkCustomer').val($('#custGrp').val()); 
        $('#grpMembersDiv').css('display', 'block');
    } else {
        $('#bnkCustomerLbl').css('display', '');
        //bnkCustomerID
        $('#bnkCustomerID').val(-1); 
        $('#bnkCustomer').val('');
         $('#grpMembersDiv').css('display', 'none');
    }

}

function imprtCustAccntsTrnsctns()
{
    var dataToSend = "";
    var isFileValid = true;
    var dialog1 = bootbox.confirm({
        custNo: 'Import Customer Accounts Transactions?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:green;font-weight:bold;font-style:italic;">IMPORT CUSTOMER ACCOUNT TRANSACTIONS</span>?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                if (isReaderAPIAvlbl()) {
                    $("#allOtherFileInput6").val('');
                    $("#allOtherFileInput6").off('change');
                    $("#allOtherFileInput6").change(function () {
                        var fileName = $(this).val();
                        var input = document.getElementById('allOtherFileInput6');
                        var file = input.files[0];
                        // read the file metadata
                        var output = '';
                        output += '<span style="font-weight:bold;">' + escape(file.name) + '</span><br />\n';
                        output += ' - FileType: ' + (file.type || 'n/a') + '<br />\n';
                        output += ' - FileSize: ' + file.size + ' bytes<br />\n';
                        output += ' - LastModified: ' + (file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() : 'n/a') + '<br />\n';
                        var reader = new FileReader();
                        BootstrapDialog.show({
                            size: BootstrapDialog.SIZE_LARGE,
                            type: BootstrapDialog.TYPE_DEFAULT,
                            custNo: 'Validating Selected File',
                            message: '<div id="myProgress"><div id="myBar"></div></div><div id="myInformation"><i class="fa fa-spin fa-spinner"></i> Validating Selected File...Please Wait...</div><br/><div id="fileInformation">' + output + '</div>',
                            animate: true,
                            closable: true,
                            closeByBackdrop: false,
                            closeByKeyboard: false,
                            onshow: function (dialogItself) {
                                setTimeout(function () {
                                    var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                    $footerButton.disable();
                                    // read the file content
                                    reader.onerror = function (evt) {
                                        switch (evt.target.error.code) {
                                            case evt.target.error.NOT_FOUND_ERR:
                                                alert('File Not Found!');
                                                break;
                                            case evt.target.error.NOT_READABLE_ERR:
                                                alert('File is not readable');
                                                break;
                                            case evt.target.error.ABORT_ERR:
                                                break; // noop
                                            default:
                                                alert('An error occurred reading this file.');
                                        }
                                        ;
                                    };
                                    reader.onprogress = function (evt) {
                                        // evt is an ProgressEvent.
                                        if (evt.lengthComputable) {
                                            var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
                                            // Increase the progress bar length.
                                            var elem = document.getElementById('myBar');
                                            elem.style.width = percentLoaded + '%';
                                            if (percentLoaded < 100) {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>' + percentLoaded + '% Validating Selected File...Please Wait...</span>');
                                            } else {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-check"></i>' + percentLoaded + '% Validating Selected File Completed!</span>');
                                                var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                                if (isFileValid == true) {
                                                    $footerButton.enable();
                                                } else {
                                                    $footerButton.disable();
                                                }
                                            }
                                        }
                                    };
                                    reader.onabort = function (e) {
                                        alert('File read cancelled');
                                    };
                                    reader.onloadstart = function (e) {
                                        var elem = document.getElementById('myBar');
                                        elem.style.width = '1%';
                                        $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>1% Started Importing Customer Accounts...Please Wait...</span>');
                                    };
                                    reader.onload = function (event) {
                                        try {
                                            var csv = event.target.result;
                                            var data = $.csv.toArrays(csv);
                                            var rwCntr = 0;
                                            var colCntr = 0;
                                            var vldRwCntr = 0;
                                            var number = "";
                                            var custType = "";
                                            var custNo = "";
                                            var acctNumber = "";
                                            var acctTitle = "";
                                            var acctType = "";
                                            var prdtType = "";
                                            var acctTrnsTyp = "";
                                            var prsnTypeEntity = "";
                                            var prpsOfAcct = "";
                                            var prpsOfAcctOther = "";
                                            var srcOfFunds = "";
                                            var srcOfFundsOther = "";
                                            var trnsPerMnthNo = 999;
                                            var amountPerMnth = 99999999;
                                            var reltnOfficer = "";
                                            var accntStatus = "";
                                            var isDormant = "";
                                            var accMndte = "";
                                            var bnkBranch = "";
                                            var rcdStatus = "";
                                            var acctBal = 0.00;
                                            for (var row in data) {
                                                for (var item in data[row]) {
                                                    colCntr++;
                                                    switch (colCntr) {
                                                        case 1:
                                                            number = data[row][item];
                                                            break;
                                                        case 2:
                                                            custType = data[row][item];
                                                            break;
                                                        case 3:
                                                            custNo = data[row][item];
                                                            break;
                                                        case 4:
                                                            acctNumber = data[row][item];
                                                            break;
                                                        case 5:
                                                            acctTitle = data[row][item];
                                                            break;
                                                        case 6:
                                                            acctType = data[row][item];
                                                            break;
                                                        case 7:
                                                            prdtType = data[row][item];
                                                            break;
                                                        case 8:
                                                            acctTrnsTyp = data[row][item];
                                                            break;
                                                        case 9:
                                                            prsnTypeEntity = data[row][item];
                                                            break;
                                                        case 10:
                                                            prpsOfAcct = data[row][item];
                                                            break;
                                                        case 11:
                                                            prpsOfAcctOther = data[row][item];
                                                            break;
                                                        case 12:
                                                            srcOfFunds = data[row][item];
                                                            break;
                                                        case 13:
                                                            srcOfFundsOther = data[row][item];
                                                            break;
                                                        case 14:
                                                            trnsPerMnthNo = data[row][item];
                                                            break;
                                                        case 15:
                                                            amountPerMnth = data[row][item];
                                                            break;
                                                        case 16:
                                                            reltnOfficer = data[row][item];
                                                            break;
                                                        case 17:
                                                            accntStatus = data[row][item];
                                                            break;
                                                        case 18:
                                                            isDormant = data[row][item];
                                                            break;
                                                        case 19:
                                                            accMndte = data[row][item];
                                                            break;
                                                        case 20:
                                                            bnkBranch = data[row][item];
                                                            break;
                                                        case 21:
                                                            rcdStatus = data[row][item];
                                                            break;
                                                        case 22:
                                                            acctBal = data[row][item];
                                                            break;
                                                        default:
                                                            var dialog = bootbox.alert({
                                                                custNo: 'Error-Validating Selected File',
                                                                size: 'small',
                                                                message: '<span style="color:red;font-weight:bold:">An error occurred reading this file.Invalid Column in File!</span>',
                                                                callback: function () {
                                                                    isFileValid = false;
                                                                    reader.abort();
                                                                }
                                                            });
                                                    }
                                                }
                                                if (rwCntr === 0) {
                                                    //alert(number.toUpperCase() + "|" + custType.toUpperCase() + "|" + isDormant.toUpperCase());
                                                    if (number.toUpperCase() === "NO." && custType.toUpperCase() === "CUSTOMER TYPE**"
                                                            && custNo.toUpperCase() === "CUSTOMER NO.**")
                                                    {

                                                    } else {
                                                        var dialog = bootbox.alert({
                                                            custNo: 'Error-Import Customer Account Transactions',
                                                            size: 'small',
                                                            message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                            callback: function () {
                                                                isFileValid = false;
                                                                reader.abort();
                                                            }
                                                        });
                                                    }
                                                }
                                                if (1 == 1 /*custType.trim() !== "" && custNo.trim() !== ""
                                                 && acctNumber.trim() !== ""
                                                 && acctTitle.trim() !== "" && prdtType.trim() !== "" && acctTrnsTyp.trim() !== "" && prsnTypeEntity.trim() !== ""
                                                 && prpsOfAcct.trim() !== "" && srcOfFundsOther.trim() !== "" 
                                                 && accntStatus.trim() !== "" && prsnType.trim() !== "" && relation.trim() !== "" && startDate.trim() !== ""
                                                 && bnkBranch.trim() !== ""*/)
                                                {
                                                    //if valid data
                                                    /*.replace(/(~)+/g, "{-;-;}") .replace(/(\|)+/g, "{:;:;}")*/
                                                    dataToSend = dataToSend + number.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + custType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + custNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + acctNumber.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + acctTitle.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + acctType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prdtType.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + acctTrnsTyp.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prsnTypeEntity.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prpsOfAcct.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + prpsOfAcctOther.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + srcOfFunds.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + srcOfFundsOther.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + trnsPerMnthNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + amountPerMnth.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + reltnOfficer.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + accntStatus.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + isDormant.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + accMndte.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + bnkBranch.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + rcdStatus.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + acctBal.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                                                    vldRwCntr++;
                                                }
                                                colCntr = 0;
                                                rwCntr++;
                                            }
                                            output += '<br/><span style="color:blue;font-weight:bold;">No. of Valid Rows:' + vldRwCntr;
                                            output += '<br/>Total No. of Rows:' + rwCntr + '</span>';
                                            $("#fileInformation").html(output);
                                        } catch (err) {
                                            var dialog = bootbox.alert({
                                                custNo: 'Error-Import Customer Accounts',
                                                size: 'small',
                                                message: 'Error:' + err.message,
                                                callback: function () {
                                                    isFileValid = false;
                                                    reader.abort();
                                                }
                                            });
                                        }
                                    };
                                    reader.readAsText(file);
                                }, 500);
                            },
                            buttons: [{
                                    label: 'Cancel',
                                    icon: 'glyphicon glyphicon-menu-left',
                                    cssClass: 'btn-default',
                                    action: function (dialogItself) {
                                        isFileValid = false;
                                        reader.abort();
                                        dialogItself.close();
                                    }
                                }, {
                                    id: 'btn-srvr-prcs',
                                    label: 'Start Server Processing',
                                    icon: 'glyphicon glyphicon-menu-right',
                                    cssClass: 'btn-primary',
                                    action: function (dialogItself) {
                                        if (isFileValid == true) {
                                            dialogItself.close();
                                            saveCustAccnts(dataToSend);
                                        } else {
                                            var dialog = bootbox.alert({
                                                custNo: 'Error-Import Customer Accounts',
                                                size: 'small',
                                                message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                callback: function () {
                                                }
                                            });
                                        }
                                    }
                                }]
                        });
                    });
                    performFileClick('allOtherFileInput6');
                }
            }
        }
    });
}

function populateLoanSchedules()
{
    var msgsTitle = 'Overdraft Disbursements';
    var slctdLoanClsfctns = "";
    var isVld = true;
    var errMsg = "";

    if (rhotrim(errMsg, '; ') !== '')
    {
        bootbox.alert({
            title: 'System Alert!',
            message: errMsg});
        return false;
    }

   
    var box;
    var box2;
    var mnBox;  
    var dialog;
    
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to pupulate Loan Schedules?",
        callback: function (result) {
            /* your callback code */
            if (result) {
                dialog = bootbox.alert({
                    title: 'Pupulate Loan Schedules',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Populating Loan Schedules...Please Wait...</p>',
                    callback: function () {
                        getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.2');
                    }
                });
                
                dialog.init(function () {
                    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                        $body = $("body");
                        $body.removeClass("mdlloading");
                        $.ajax({
                            method: "POST",
                            url: "index.php",
                            data: {
                                grp: 17,
                                typ: 1,
                                pg: 15,
                                subPgNo: 4.2,
                                q: 'UPDATE',
                                actyp: 3,
                            },
                            success: function (result) {
                                setTimeout(function () {
                                    dialog.find('.bootbox-body').html(result);
                                }, 500);
                            },
                            error: function (jqXHR, textStatus, errorThrown)
                            {
                                /*dialog.find('.bootbox-body').html(errorThrown);*/
                                console.warn(jqXHR.responseText);
                            }
                        });
                    });
                });
            }

        }
    });
    mnBox.find('.modal-content').css({
    'margin-top': function () {
        var w = $(window).height();
        var b = $(".modal-dialog").height();
        // should not be (w-h)/2
        var h = (w - b - 150) / 2;
        return h + "px";
        }
    });    
}

function getOneMergeCustsForm(pKeyID, subPgNo, actionTxt, tblrVwTyp, hdrTxt, frmPrfx)
{
    if (typeof actionTxt === 'undefined' || actionTxt === null)
    {
        actionTxt = 'ShowDialog';
    }
    if (typeof tblrVwTyp === 'undefined' || tblrVwTyp === null)
    {
        tblrVwTyp = 13;
    }


    var lnkArgs = 'grp=17&typ=1&pg=1&subPgNo=1.9&sbmtdRowID=' + pKeyID + '&tblrVwTyp=' + tblrVwTyp;
    doAjaxWthCallBck(lnkArgs, 'myFormsModaly', actionTxt, hdrTxt, 'myFormsModalyTitle', 'myFormsModalyBody', function () {
            if (!$.fn.DataTable.isDataTable('#oneVmsTrnsLnsTable')) {
                var table1 = $('#oneVmsTrnsLnsTable').DataTable({
                    "paging": false,
                    "ordering": false,
                    "info": false,
                    "bFilter": false,
                    "scrollX": false
                });
           }
        $('#oneVmsTrnsLnsTable').wrap('<div class="dataTables_scroll"/>');
        $('#myFormsModaly').off('hidden.bs.modal');
        $('#myFormsModaly').one('hidden.bs.modal', function (e) {
            $('#myFormsModalyBody').html('');
            getCustData('', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo='+subPgNo, frmPrfx);
            $(e.currentTarget).unbind();
        });
    });
}

function insertNewMergeCustsRowsNew(tableElmntID, position, inptHtml)
{
    //alert("Hi");
    insertNewRowBe4(tableElmntID, position, inptHtml, function () {
        $('[data-toggle="tooltip"]').tooltip();
        $(".vmsCbTtl").focus(function () {
            $(this).select();
        });
        $(".vmsCbQty").focus(function () {
            $(this).select();
        });
        $(".vmsFncCrncy").focus(function () {
            $(this).select();
        });
    });
}


function mergeCustsNos(pgNo, vtyp, subPgNo)
{
    var obj;

    $body = $("body");

    var slctdTrnsCustNoLines = "";
    var cntaChqLines = 0;
    $('#oneMergeCustsLnsTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#oneMergeCustsRow' + rndmNum + '_prmryCustNo').val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {
                    var isVld = true;

                    var prmryCustNo = typeof $('#oneMergeCustsRow' + rndmNum + '_prmryCustNo').val() === 'undefined' ? '' : $('#oneMergeCustsRow' + rndmNum + '_prmryCustNo').val();
                    if (prmryCustNo == '')
                    {
                        isVld = false;
                        $('#oneMergeCustsRow' + rndmNum + '_prmryCustNo').addClass('rho-error');
                    } else {
                        $('#oneMergeCustsRow' + rndmNum + '_prmryCustNo').removeClass('rho-error');
                    }
					
		   var scndryCustNo = typeof $('#oneMergeCustsRow' + rndmNum + '_scndryCustNo').val() === 'undefined' ? 0 : $('#oneMergeCustsRow' + rndmNum + '_scndryCustNo').val();
                    if (scndryCustNo == '')
                    {
                        isVld = false;
                        $('#oneMergeCustsRow' + rndmNum + '_scndryCustNo').addClass('rho-error');
                    } else {
                        $('#oneMergeCustsRow' + rndmNum + '_scndryCustNo').removeClass('rho-error');
                    }

                    if (isVld === true)
                    {
                        slctdTrnsCustNoLines = slctdTrnsCustNoLines + $('#oneMergeCustsRow' + rndmNum + '_prmryCustNo').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
								    + $('#oneMergeCustsRow' + rndmNum + '_scndryCustNo').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                        cntaChqLines = cntaChqLines + 1;
                    } else {
                        $body.removeClass("mdlloadingDiag");
                        bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: "Please Fix all Highlighted Errors1!",
                            callback: function () {
                            }
                        });
                        return false;
                    }
                }
            }
        }
    });
    
    if (cntaChqLines <= 0) {
        $body.removeClass("mdlloadingDiag");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please Fix all Highlighted Errors2!",
            callback: function () {
            }
        });
        return false;
    }
    
    
    bootbox.confirm({
        title: "Rhomicom Message",
        message: "Are you sure you want to Merge these Customer Numbers?",
        buttons: {
            confirm: {
                label: 'Yes',
                className: 'btn-success'
            },
            cancel: {
                label: 'No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
        if (result) {
            
            $body.addClass("mdlloadingDiag");
            
            var xmlhttp;
            if (window.XMLHttpRequest)
            {
                /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                xmlhttp = new XMLHttpRequest();
            } else
            {
                /*code for IE6, IE5*/
                xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
            }
            xmlhttp.onreadystatechange = function ()
            {
                if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                {
                    var data = xmlhttp.responseText;
                    
                    if(data == "Merger Succcessful"){
                        
                         $("#myFormsModaly").modal("hide");
                        
                        bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });                        
                        
                    } else {

                        bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                    }

                    $body.removeClass("mdlloadingDiag");
                    $body.removeClass("mdlloadingDiag");
                }
            };
            xmlhttp.open("POST", "index.php", true);
            xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xmlhttp.send("grp=17&typ=1&pg=11&vtyp=" + vtyp + "&q=UPDATE" + "&subPgNo=" + subPgNo +
                    "&slctdTrnsCustNoLines=" + slctdTrnsCustNoLines);
            }
        }
    });
    
}

function removeSltdAgntRcd(rowIDAttrb)
{
    $("#" + rowIDAttrb).remove();
}

function autoLoadGrpMembers()
{
    var msgsTitle = 'Group Members';
    var slctdLoanClsfctns = "";
    var isVld = true;
    var errMsg = "";

    if (rhotrim(errMsg, '; ') !== '')
    {
        bootbox.alert({
            title: 'System Alert!',
            message: errMsg});
        return false;
    }

    var loanRqstID = typeof $("#loanRqstID").val() === 'undefined' ? -1 : $("#loanRqstID").val();
    var grpCustId = typeof $("#custGrpID").val() === 'undefined' ? -1 : $("#custGrpID").val();
    var custType = typeof $("#custType").val() === 'undefined' ? '' : $("#custType").val();

    if (custType == "Group" && grpCustId == -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        $("#custGrp").css('border-color', 'red');
        $("#custGrp").css('border-width', '2px');
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select a Group First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
    
    if (loanRqstID == "" || parseInt(loanRqstID) <= -1) {
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please save Loan Request First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
       
   
    var box;
    var box2;
    var mnBox;  
    var dialog;
    
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to AUTO-LOAD Group Members?",
        callback: function (result) {
            /* your callback code */
            if (result) {
                dialog = bootbox.alert({
                    title: 'AUTO-LOAD Group',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> AUTO-LOADING Group Members...Please Wait...</p>',
                    callback: function () {
                        getLoanRqstForm('myFormsModalLg', 'myFormsModalBodyLg', 'myFormsModalTitleLg', 'Edit Loan Request', 15, 4.1, 0, 'EDIT', loanRqstID, 'indCustTable', 'indCustTableRow1');
                    }
                });
                
                dialog.init(function () {
                    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                        $body = $("body");
                        $body.removeClass("mdlloading");
                        $.ajax({
                            method: "POST",
                            url: "index.php",
                            data: {
                                grp: 17,
                                typ: 1,
                                pg: 15,
                                subPgNo: 4.1,
                                q: 'UPDATE',
                                actyp: 3,
                                loanRqstID: loanRqstID,
                                grpCustId: grpCustId,
                            },
                            success: function (result) {
                                setTimeout(function () {
                                    dialog.find('.bootbox-body').html(result);
                                }, 500);
                            },
                            error: function (jqXHR, textStatus, errorThrown)
                            {
                                /*dialog.find('.bootbox-body').html(errorThrown);*/
                                console.warn(jqXHR.responseText);
                            }
                        });
                    });
                });
            }

        }
    });
    mnBox.find('.modal-content').css({
    'margin-top': function () {
        var w = $(window).height();
        var b = $(".modal-dialog").height();
        // should not be (w-h)/2
        var h = (w - b - 150) / 2;
        return h + "px";
        }
    });    
}

function delLoanGrpMembers(rowIDAttrb)
{
    var rndmNum = rowIDAttrb.split("_")[1];
    var pKeyID = -1;
    var msgsTitle = 'Group Member';
    if (typeof $('#grpMembersDetRow' + rndmNum + '_PkeyID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#grpMembersDetRow' + rndmNum + '_PkeyID').val();
    }
    var dialog = bootbox.confirm({
        title: 'Remove ' + msgsTitle + '?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">REMOVE</span> this ' + msgsTitle + '?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Remove ' + msgsTitle + '?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Removing ' + msgsTitle + '...Please Wait...</p>'
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 15,
                                    q: 'DELETE',
                                    subPgNo: 4.1,
                                    actyp: 2,
                                    PKeyID: pKeyID
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                        if (result1.indexOf("Success") !== -1) {
                                            $("#" + rowIDAttrb).remove();
                                        }
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            $("#" + rowIDAttrb).remove();
                            dialog1.find('.bootbox-body').html('Row Removed Successfully!');
                        }, 500);
                    }
                });
            }
        }
    });
}

function printStatementOfAccount(rptID, param1, param2, param3, param4, reportTitle){

    var StrtDate = typeof $("#StrtDate").val() === 'undefined' ? '01-Jan-1900' : $("#StrtDate").val();
    var EndDate = typeof $("#EndDate").val() === 'undefined' ? '31-Dec-4000' : $("#EndDate").val();
    var acctNoFindAccId = typeof $("#acctNoFindAccId").val() === 'undefined' ? -1 : $("#acctNoFindAccId").val();
    var paramStr = '';
    
    var paramRepsNVals = param1 + "~" + acctNoFindAccId + "|" + param3 + "~" + StrtDate + "|" + param4 + "~" + EndDate + "|" + param2 + "~" + reportTitle + "|-190~PDF";
    paramStr = encodeURI(paramRepsNVals);
    if(acctNoFindAccId > 0){
        getSilentRptsRnSts(rptID, -1, paramStr);
    } else {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please select an account number First!",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
}

function populateCashColt(cashColtElmntID, cashColtElmntNm, rpyAcctElmntID, rpyAcctElmntNm){
    var cshColtAcctId = $("#"+cashColtElmntID).val();

    if(cshColtAcctId == "" || parseInt(cshColtAcctId) <= 0){
        $("#"+cashColtElmntID).val($("#"+rpyAcctElmntID).val());
        $("#"+cashColtElmntNm).val($("#"+rpyAcctElmntNm).val());   
    }                                                                         
}

function getInvestmentsLqdtnForm(elementID, modalBodyID, titleElementID, formTitle, pgNo, subPgNo, vtyp, vtypActn, pKeyID, rowID, callBackFunc)
{
    $('#allOtherInputData99').val(0);
    if (typeof callBackFunc === 'undefined' || callBackFunc === null)
    {
        callBackFunc = function () {
            var tstabcd = 1;
        };
    }

    $("#tblRowID").val(rowID);
    if (!$.fn.DataTable.isDataTable('#indCustTable')) {
        var table1 = $('#indCustTable').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "bFilter": false,
            "scrollX": false
        });
        $('#indCustTable tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table1.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
        $('#indCustTable tbody').on('mouseenter', 'tr', function () {
            if ($(this).hasClass('highlight')) {
                $(this).removeClass('highlight');
            } else {
                table1.$('tr.highlight').removeClass('highlight');
                $(this).addClass('highlight');
            }
        });
    }
    $body = $("body");
    $body.addClass("mdlloadingDiag");
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
        /*code for IE7+, Firefox, Chrome, Opera, Safari*/
        xmlhttp = new XMLHttpRequest();
    } else
    {
        /*code for IE6, IE5*/
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
        {
            $('#' + titleElementID).html(formTitle);
            $('#' + modalBodyID).html(xmlhttp.responseText);
            $('#' + elementID).off('hidden.bs.modal');
            $('#' + elementID).one('hidden.bs.modal', function (e) {
                getCustData('', '#allmodules', 'grp=17&typ=1&pg=5&subPgNo=' + subPgNo, 'invstmntsLqdtn');
                $('#' + titleElementID).html('');
                $('#' + modalBodyID).html('');
                $(e.currentTarget).unbind();
            });
            /*$('.modal-content').resizable({
             //alsoResize: ".modal-dialog",
             minHeight: 600,
             minWidth: 300
             });*/
            /*$('.modal-dialog').draggable();*/
            $(function () {
                $('.form_date').datetimepicker({
                    format: "d-M-yyyy",
                    language: 'en',
                    weekStart: 0,
                    todayBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    keyboardNavigation: true,
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    forceParse: true
                });
            });
            $('#' + elementID).off('show.bs.modal');
            $('#' + elementID).on('show.bs.modal', function (e) {
                $(this).find('.modal-body').css({
                    'max-height': '100%'
                });
            });
            $body.removeClass("mdlloadingDiag");
            $('#' + elementID).modal({backdrop: 'static',keyboard:false});
            $body = $("body");
            $(document).ready(function () {
                /*$('#' + formElementID).submit(function (e) {
                 e.preventDefault();
                 return false;
                 });*/
                callBackFunc();
            });
        }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=" + pgNo + "&subPgNo=" + subPgNo + "&vtyp=" + vtyp + "&vtypActn=" + vtypActn + "&lqdtnID=" + pKeyID);
}

function deleteInvestmentLqdtn(lqdtnID)
{
    var box;
    var box2;
    var mnBox;
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to delete this Liquidation?",
        callback: function (result) {
            /* your callback code */
            if (result) {

                box = bootbox.dialog({size: "small",
                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Deleting. Please Wait...</div>'});
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {

                        var data = xmlhttp.responseText;
                        box.modal('hide');
                        if (data == "SORRY") {
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: "Failed to Delete Liquidation.</br>Only Liquidations with statuses 'Incomplete','Rejected' or 'Withdrawn' can be deleted.",
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                            return false;
                        }

                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: data,
                            callback: function () { /* your callback code */
                            }
                        });
                        box2.find('.modal-content').css({
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b - 150) / 2;
                                return h + "px";
                            }
                        });
                        getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=5&subPgNo=5.3', 'invstmntsLqdtn')
                    }
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=25&subPgNo=5.3&q=DELETE&lqdtnID=" + lqdtnID);
            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function dsplyInvstmntForm(){
    var invstmntID = typeof $("#invstmntID2").val() === 'undefined' ? -1 : $("#invstmntID2").val();
    if(parseInt(invstmntID) <= 0){
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "Please Select an Investment First",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }
   getInvestmentsForm('myFormsModalLgZ', 'myFormsModalLgZBody', 'myFormsModalLgZTitle', 'View Investment', 25, 5.2,0,'VIEW', invstmntID,'indCustTableRow1');
}

function saveInvestmentLqdtn(pgNo, subPgNo, vtyp)
{

    var box;
    var box2;
    getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var lqdtnId = typeof $("#lqdtnId").val() === 'undefined' ? -1 : $("#lqdtnId").val();
        var lqdtnTrnsDte = typeof $("#lqdtnTrnsDte").val() === 'undefined' ? '' : $("#lqdtnTrnsDte").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
	var lqdtnOfficerID = typeof $("#lqdtnOfficerID").val() === 'undefined' ? -1 : $("#lqdtnOfficerID").val();        
        var invstmntID = typeof $("#invstmntID").val() === 'undefined' ? -1 : $("#invstmntID").val();        
        var lqdtnReason = typeof $("#lqdtnReason").val() === 'undefined' ? '' : $("#lqdtnReason").val();
        var lqdtnTtlInterest = typeof $("#lqdtnTtlInterest").val() === 'undefined' ? 0 : $("#lqdtnTtlInterest").val();

        if (parseInt(invstmntID) <= 0 || invstmntID == -1 || invstmntID == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please select an Investment",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }           
        if (lqdtnReason.trim() == "" || lqdtnReason == undefined) {
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Please provide purpose of Liquidation",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }     

        $body.removeClass("mdlloading");
        $body.removeClass("mdlloadingDiag");
        box = bootbox.dialog({size: "small",
            message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i><span style="font-weight:bold; color:green;"> Saving. Please Wait...</span></div>'});
        box.find('.modal-content').css({
            'margin-top': function () {
                var w = $(window).height();
                var b = $(".modal-dialog").height();
                // should not be (w-h)/2
                var h = w / 2; //(w - b) / 2;
                return h + "px";
            }
        });
        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('q', 'UPDATE');
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('vtyp', vtyp);
        formData.append('lqdtnId', lqdtnId);
        formData.append('lqdtnTrnsDte', lqdtnTrnsDte);
        formData.append('bnkBranchID', bnkBranchID);
	formData.append('lqdtnOfficerID', lqdtnOfficerID);
        formData.append('invstmntID', invstmntID);           
        formData.append('lqdtnReason', lqdtnReason);          
        $.ajax({
            url: 'index.php',
            type: 'POST',
            data: formData,
            async: true,
            success: function (data) {
                //$body.removeClass("mdlloadingDiag");
                //$body.removeClass("mdlloading");

                var msg = "";
                if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                        replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                        replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    obj = $.parseJSON(data);
                    //SET PRODUCT ID
                    $("#lqdtnId").val(obj.lqdtnId);
                    box.modal('hide');
                    
                    getInvestmentsLqdtnForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Investment Liquidation', 25, subPgNo, 0, 'EDIT', obj.lqdtnId, 'indCustTableRow1', function() {
                        box2 = bootbox.alert({
                            size: "small",
                            title: "Rhomicom Message",
                            message: "Investment Liquidation Successfully Saved!",
                            callback: function () { /* your callback code */
                            }
                        });
                    });
                } else {

                    msg = data;
                    box.modal('hide');
                    box2 = bootbox.alert({
                        size: "small",
                        title: "Rhomicom Message",
                        message: msg,
                        callback: function () { /* your callback code */
                        }
                    });
                }

            },
            cache: false,
            contentType: false,
            processData: false
        });
    });
}

function submitWithdrawlqdtn(pgNo, subPgNo, vtyp, actn)
{
    getMsgAsync('grp=1&typ=11&q=Check Session', function () {

        var obj;
        var box;
        var box2;
        var mnBox;
        var waitMsg = "";
        var rtrnSuccessMsg = "";
        $body.removeClass("mdlloadingDiag");
        $body.removeClass("mdlloading");
        var lqdtnId = typeof $("#lqdtnId").val() === 'undefined' ? -1 : $("#lqdtnId").val();
        var lqdtnTrnsDte = typeof $("#lqdtnTrnsDte").val() === 'undefined' ? '' : $("#lqdtnTrnsDte").val();
        var bnkBranchID = typeof $("#bnkBranchID").val() === 'undefined' ? -1 : $("#bnkBranchID").val();
		var lqdtnOfficerID = typeof $("#lqdtnOfficerID").val() === 'undefined' ? -1 : $("#lqdtnOfficerID").val(); 		
        var invstmntID = typeof $("#invstmntID").val() === 'undefined' ? -1 : $("#invstmntID").val();  
        var lqdtnReason = typeof $("#lqdtnReason").val() === 'undefined' ? '' : $("#lqdtnReason").val();
        var lqdtnTtlInterest = typeof $("#lqdtnTtlInterest").val() === 'undefined' ? 0 : $("#lqdtnTtlInterest").val();

        
        var actnTyp;
        var prmtMsg = "Are you sure you want to submit Investment Liquidation for Authorization?";
        if (actn == 'SUBMIT')
        {
            actnTyp = 99;
            rtrnSuccessMsg = "SUBMITTED for Authorization";
            waitMsg = "Submitting...";
            if (parseInt(invstmntID) <= 0 || invstmntID == -1 || invstmntID == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please select a Loan Request",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
            if (lqdtnReason.trim() == "" || lqdtnReason == undefined) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please provide Write-Off Reason",
                    callback: function () { /* your callback code */
                    }
                });
                return false;
            }
            /*if (lqdtnTtlInterest.trim() == "" || lqdtnTtlInterest == undefined || lqdtnTtlInterest.trim() == 0) {
                bootbox.alert({
                    size: "small",
                    title: "Rhomicom Message",
                    message: "Please select an Investment with a positive Accrued Interest",
                    callback: function () { 
                    }
                });
                return false;
            } */

        } else if (actn == 'WITHDRAW') {
            rtrnSuccessMsg = "WITHDRAWN";
            waitMsg = "Withdrawing...";
            actnTyp = 3;
            prmtMsg = "Are you sure you want to Withdrawal Investment Liquidation?";
        } else if (actn == 'REJECT') {
            rtrnSuccessMsg = "REJECTED";
            waitMsg = "Rejecting...";
            actnTyp = 4;
            prmtMsg = "Are you sure you want to Reject Investment Liquidation?";
        } else if (actn == 'AUTHORIZE') {
            rtrnSuccessMsg = "AUTHORIZED";
            waitMsg = "Authorizing...";
            actnTyp = 5;
            prmtMsg = "Are you sure you want to Authorize Investment Liquidation?";
        } else if (actn == 'REVERSE') {
             rtrnSuccessMsg = "REVERSED";
            waitMsg = "Reversing...";
            actnTyp = 6;
            prmtMsg = "Are you sure you want to REVERSE this Investment Liquidation?";
            bootbox.alert({
                size: "small",
                title: "Rhomicom Message",
                message: "Constructing.......Please Wait",
                callback: function () { /* your callback code */
                }
            });
            return false;
        }

        var formData = new FormData();
        formData.append('grp', 17);
        formData.append('typ', 1);
        formData.append('pg', pgNo);
        formData.append('subPgNo', subPgNo);
        formData.append('q', 'UPDATE');
        formData.append('vtyp', vtyp);
        formData.append('actyp', actnTyp);
        formData.append('lqdtnId', lqdtnId);
        formData.append('lqdtnTrnsDte', lqdtnTrnsDte);
        formData.append('bnkBranchID', bnkBranchID);
	formData.append('lqdtnOfficerID', lqdtnOfficerID);
        formData.append('invstmntID', invstmntID);           
        formData.append('lqdtnReason', lqdtnReason);      
        formData.append('lqdtnTtlInterest', lqdtnTtlInterest); 
        
        mnBox = bootbox.confirm({
            title: "Rhomicom Message",
            message: prmtMsg,
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {
                   $body.removeClass("mdlloading");
                   $body.removeClass("mdlloadingDiag");
                    box = bootbox.dialog({size: "small",
                        message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> '+waitMsg+' Please Wait...</div>'});
                    box.find('.modal-content').css({
                        'margin-top': function () {
                            var w = $(window).height();
                            var b = $(".modal-dialog").height();
                            // should not be (w-h)/2
                            var h = (w - b) / 2;
                            return h + "px";
                        }
                    });
                
                    $.ajax({
                        url: 'index.php',
                        type: 'POST',
                        data: formData,
                        async: true,
                        success: function (data) {
                            
                            box.modal('hide');
                            
                            var msg = "";
                            if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                            
                            getInvestmentsLqdtnForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Investment Liquidation', 25, subPgNo, 0,'EDIT', lqdtnId,'indCustTableRow1', function () {
                                    box2 = bootbox.alert({
                                        size: "small",
                                        title: "Rhomicom Message",
                                        message: "Investment Liquidation Successfully "+rtrnSuccessMsg,
                                        callback: function () { /* your callback code */
                                        }
                                    });
                                });                            
                                

                            } else {

                                box2 = bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: data,
                                    callback: function () { /* your callback code */
                                    }
                                });
                                return false;

                            }


                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });

                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            }
        });
    });
    
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });    
}

function processlqdtn(prcsOptn)
{

    $("#prcsLqdtnBtn").attr('disabled','disabled');
    $("#rvsLqdtnBtn").attr('disabled','disabled');
    var lqdtnId = typeof $("#lqdtnId").val() === 'undefined' ? -1 : $("#lqdtnId").val();
    
    var box;
    var box2;
    var mnBox;
    var prcsActn = "PROCESS";
    if(prcsOptn == 1){
        prcsActn = "VOID"
    }
    mnBox = bootbox.confirm({
        size: "small",
        message: "Are you sure you want to "+prcsActn+" this Investment Liquidation?</br>Please Note: This action cannot be undone if you select 'Yes'",
        callback: function (result) {
            /* your callback code */
            if (result) {

//                box = bootbox.dialog({size: "small",
//                    message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Processing. Please Wait...</div>'});
                box = bootbox.alert({
                        title: 'Processing........',
                        size: 'small',
                        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Processesing...Please Wait...</div>',
                        callback: function () {
                            //getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=1&subPgNo=1.1', 'mcfIndCstmr');
                            //getAllRpts('clear', '#allmodules', 'grp=9&typ=1&pg=1&vtyp=0');
                        }
                    });                
                box.find('.modal-content').css({
                    'margin-top': function () {
                        var w = $(window).height();
                        var b = $(".modal-dialog").height();
                        // should not be (w-h)/2
                        var h = (w - b-150) / 2;
                        return h + "px";
                    }
                });
                var xmlhttp;
                if (window.XMLHttpRequest)
                {
                    /*code for IE7+, Firefox, Chrome, Opera, Safari*/
                    xmlhttp = new XMLHttpRequest();
                } else
                {
                    /*code for IE6, IE5*/
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                
                xmlhttp.onreadystatechange = function ()
                {
                    var data;
                    if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
                    {
                        $("#prcsLqdtnBtn").removeAttr('disabled');
                        $("#rvsLqdtnBtn").removeAttr('disabled');
                        data = xmlhttp.responseText;
                        getInvestmentsLqdtnForm('myFormsModalxLG', 'myFormsModalxLGBody', 'myFormsModalxLGTitle', 'Edit Investment Liquidation', 25, 5.3, 0, 'EDIT', lqdtnId, 'indCustTableRow1', function(){
                            box.modal('hide');
                            box2 = bootbox.alert({
                                size: "small",
                                title: "Rhomicom Message",
                                message: data,
                                callback: function () { /* your callback code */
                                }
                            });
                            box2.find('.modal-content').css({
                                'margin-top': function () {
                                    var w = $(window).height();
                                    var b = $(".modal-dialog").height();
                                    // should not be (w-h)/2
                                    var h = (w - b - 150) / 2;
                                    return h + "px";
                                }
                            });
                        });
                    }                                         
                };
                xmlhttp.open("POST", "index.php", true);
                xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xmlhttp.send("grp=17&typ=1&pg=25&subPgNo=5.3&q=UPDATE&actyp=1"+ "&lqdtnId=" + lqdtnId + "&prcsOptn="+prcsOptn); 

            }

        }
    });
    mnBox.find('.modal-content').css({
        'margin-top': function () {
            var w = $(window).height();
            var b = $(".modal-dialog").height();
            // should not be (w-h)/2
            var h = (w - b - 150) / 2;
            return h + "px";
        }
    });
}

function getAccountStatementKD(e) {
    var charCode = (typeof e.which === "number") ? e.which : e.keyCode;
    if (charCode == 13) {
        getAccountStatement('', '#allmodules', 'grp=17&typ=1&pg=2&subPgNo=2.3');
        //getAcctDetails(pgNo, subPgNo, vtyp, vtypActn);
    }
}

function onClickAcctProduct() {
    var prdtTypSltd = $("#dataAdminPrdtTypeSrchIn option:selected").val();
    if (prdtTypSltd === "All Account Types") {
        bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red !important;'><i>Please select an Account Type First!</i></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    } else if (prdtTypSltd === "Loan") {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'MCF All Loan Products', 'dataAdminPrdtTypeSrchInID', '', '', 'radio', true, '', 'dataAdminBnkPrdtTypeSrchInID', 'dataAdminBnkPrdtTypeSrchIn', 'clear', 1, '');
    } else {
        getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', 'MCF All Savings and Investments Products', 'dataAdminPrdtTypeSrchInID', '', '', 'radio', true, '', 'dataAdminBnkPrdtTypeSrchInID', 'dataAdminBnkPrdtTypeSrchIn', 'clear', 1, '');
    }
}

function imprtLoanDsbsmntDates()
{
    var dataToSend = "";
    var isFileValid = true;
    var dialog1 = bootbox.confirm({
        title: 'Import Loan Disbursement Dates?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:green;font-weight:bold;font-style:italic;">IMPORT LOAN DISBURSEMENT DATES</span>?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                if (isReaderAPIAvlbl()) {
                    $("#allOtherFileInput6").val('');
                    $("#allOtherFileInput6").off('change');
                    $("#allOtherFileInput6").change(function () {
                        var fileName = $(this).val();
                        var input = document.getElementById('allOtherFileInput6');
                        var file = input.files[0];
                        // read the file metadata
                        var output = '';
                        output += '<span style="font-weight:bold;">' + escape(file.name) + '</span><br />\n';
                        output += ' - FileType: ' + (file.type || 'n/a') + '<br />\n';
                        output += ' - FileSize: ' + file.size + ' bytes<br />\n';
                        output += ' - LastModified: ' + (file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() : 'n/a') + '<br />\n';
                        var reader = new FileReader();
                        BootstrapDialog.show({
                            size: BootstrapDialog.SIZE_LARGE,
                            type: BootstrapDialog.TYPE_DEFAULT,
                            title: 'Validating Selected File',
                            message: '<div id="myProgress"><div id="myBar"></div></div><div id="myInformation"><i class="fa fa-spin fa-spinner"></i> Validating Selected File...Please Wait...</div><br/><div id="fileInformation">' + output + '</div>',
                            animate: true,
                            closable: true,
                            closeByBackdrop: false,
                            closeByKeyboard: false,
                            onshow: function (dialogItself) {
                                setTimeout(function () {
                                    var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                    $footerButton.disable();
                                    // read the file content
                                    reader.onerror = function (evt) {
                                        switch (evt.target.error.code) {
                                            case evt.target.error.NOT_FOUND_ERR:
                                                alert('File Not Found!');
                                                break;
                                            case evt.target.error.NOT_READABLE_ERR:
                                                alert('File is not readable');
                                                break;
                                            case evt.target.error.ABORT_ERR:
                                                break; // noop
                                            default:
                                                alert('An error occurred reading this file.');
                                        }
                                        ;
                                    };
                                    reader.onprogress = function (evt) {
                                        // evt is an ProgressEvent.
                                        if (evt.lengthComputable) {
                                            var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
                                            // Increase the progress bar length.
                                            var elem = document.getElementById('myBar');
                                            elem.style.width = percentLoaded + '%';
                                            if (percentLoaded < 100) {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>' + percentLoaded + '% Validating Selected File...Please Wait...</span>');
                                            } else {
                                                $("#myInformation").html('<span style="color:green;"><i class="fa fa-check"></i>' + percentLoaded + '% Validating Selected File Completed!</span>');
                                                var $footerButton = dialogItself.getButton('btn-srvr-prcs');
                                                if (isFileValid == true) {
                                                    $footerButton.enable();
                                                } else {
                                                    $footerButton.disable();
                                                }
                                            }
                                        }
                                    };
                                    reader.onabort = function (e) {
                                        alert('File read cancelled');
                                    };
                                    reader.onloadstart = function (e) {
                                        var elem = document.getElementById('myBar');
                                        elem.style.width = '1%';
                                        $("#myInformation").html('<span style="color:green;"><i class="fa fa-spin fa-spinner"></i>1% Started Importing Loan Disbursement Dates...Please Wait...</span>');
                                    };
                                    reader.onload = function (event) {
                                        try {
                                            var csv = event.target.result;
                                            var data = $.csv.toArrays(csv);
                                            var rwCntr = 0;
                                            var colCntr = 0;
                                            var vldRwCntr = 0;
                                            var loanNo = "";
                                            var applctnDate = "";
                                            for (var row in data) {
                                                for (var item in data[row]) {
                                                    colCntr++;
                                                    switch (colCntr) {
                                                        case 1:
                                                            loanNo = data[row][item];
                                                            break;
                                                        case 2:
                                                            applctnDate = data[row][item];
                                                            break;
                                                        default:
                                                            var dialog = bootbox.alert({
                                                                title: 'Error-Validating Selected File',
                                                                size: 'small',
                                                                message: '<span style="color:red;font-weight:bold:">An error occurred reading this file.Invalid Column in File!</span>',
                                                                callback: function () {
                                                                    isFileValid = false;
                                                                    reader.abort();
                                                                }
                                                            });
                                                    }
                                                }
                                                if (rwCntr === 0) {
                                                    //alert(loanPrdtNo.toUpperCase() + "|" + applctnDate.toUpperCase() + "|" + faxNo.toUpperCase());
                                                    if (loanNo.toUpperCase() === "LOANNO" && applctnDate.toUpperCase() === "DISBURSEDDATE")
                                                    {

                                                    } else {
                                                        var dialog = bootbox.alert({
                                                            title: 'Error-Import Loan Disbursement Date',
                                                            size: 'small',
                                                            message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                            callback: function () {
                                                                isFileValid = false;
                                                                reader.abort();
                                                            }
                                                        });
                                                    }
                                                }
                                                if (1 == 1)
                                                {
                                                    //if valid data
                                                    /*.replace(/(~)+/g, "{-;-;}") .replace(/(\|)+/g, "{:;:;}")*/
                                                    dataToSend = dataToSend + loanNo.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                                            + applctnDate.replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                                                    vldRwCntr++;
                                                }
                                                colCntr = 0;
                                                rwCntr++;
                                            }
                                            output += '<br/><span style="color:blue;font-weight:bold;">No. of Valid Rows:' + vldRwCntr;
                                            output += '<br/>Total No. of Rows:' + rwCntr + '</span>';
                                            $("#fileInformation").html(output);
                                        } catch (err) {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import Loan Disbursement Dates',
                                                size: 'small',
                                                message: 'Error:' + err.message,
                                                callback: function () {
                                                    isFileValid = false;
                                                    reader.abort();
                                                }
                                            });
                                        }
                                    };
                                    reader.readAsText(file);
                                }, 500);
                            },
                            buttons: [{
                                    label: 'Cancel',
                                    icon: 'glyphicon glyphicon-menu-left',
                                    cssClass: 'btn-default',
                                    action: function (dialogItself) {
                                        isFileValid = false;
                                        reader.abort();
                                        dialogItself.close();
                                    }
                                }, {
                                    id: 'btn-srvr-prcs',
                                    label: 'Start Server Processing',
                                    icon: 'glyphicon glyphicon-menu-right',
                                    cssClass: 'btn-primary',
                                    action: function (dialogItself) {
                                        if (isFileValid == true) {
                                            dialogItself.close();
                                            saveLoanDsbsmntDates(dataToSend);
                                        } else {
                                            var dialog = bootbox.alert({
                                                title: 'Error-Import Loan Disbursement Dates',
                                                size: 'small',
                                                message: '<span style="color:red;font-weight:bold:">Invalid File Selected!</span>',
                                                callback: function () {
                                                }
                                            });
                                        }
                                    }
                                }]
                        });
                    });
                    performFileClick('allOtherFileInput6');
                }
            }
        }
    });
}

function saveLoanDsbsmntDates(dataToSend)
{
    if (dataToSend.trim() === '')
    {
        bootbox.alert({
            title: 'System Alert!',
            size: 'small',
            message: '<p><span style="font-family: georgia, times;font-size: 12px;font-style:italic;' +
                    'font-weight:bold;">No Data to Send!</span></p>'
        });
        return false;
    }
    var dialog = bootbox.alert({
        title: 'Importing Loan Disbursement Dates/Processes',
        size: 'small',
        message: '<div id="myProgress1"><div id="myBar1"></div></div><div id="myInformation1"><i class="fa fa-spin fa-spinner"></i> Importing Loan Disbursement Dates/Processes...Please Wait...</div>',
        callback: function () {
            clearInterval(prgstimerid2);
            getCustData('clear', '#allmodules', 'grp=17&typ=1&pg=4&subPgNo=4.1');
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 15,
                    subPgNo: 4.1,
                    q: 'UPDATE',
                    actyp: 6,
                    dataToSend: dataToSend
                }
            });
            prgstimerid2 = window.setInterval(rfrshSaveLoanDsbsmntDates, 1000);
        });
    });
}

function rfrshSaveLoanDsbsmntDates() {
    $.ajax({
        method: "POST",
        url: "index.php",
        data: {
            grp: 17,
            typ: 1,
            pg: 11,
            subPgNo: 1.1,
            q: 'UPDATE',
            actyp: 6
        },
        success: function (data) {
            var elem = document.getElementById('myBar1');
            elem.style.width = data.percent + '%';
            $("#myInformation1").html(data.message);
            if (data.percent >= 100) {
                window.clearInterval(prgstimerid2);
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus + " " + errorThrown);
            console.warn(jqXHR.responseText);
        }
    });
}

function displayCrdtCharts(){
    var ctxPiD = document.getElementById("pieChart");//.getContext('2d');
    var ctxBiD = document.getElementById("barChart");//.getContext('2d');
    var ctxLiD = document.getElementById("lineChart");//.getContext('2d');
    
    box = bootbox.dialog({size: "small",
		message: '<div class="text-center"><i class="fa fa-spin fa-spinner"></i> Loading Charts. Please Wait...</div>'});
    box.find('.modal-content').css({
            'margin-top': function () {
                    var w = $(window).height();
                    var b = $(".modal-dialog").height();
                    // should not be (w-h)/2
                    var h = (w - b) / 2;
                    return h + "px";
            }
    });
    var xmlhttp;
    if (window.XMLHttpRequest)
    {
            /*code for IE7+, Firefox, Chrome, Opera, Safari*/
            xmlhttp = new XMLHttpRequest();
    } else
    {
            /*code for IE6, IE5*/
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function ()
    {
            if (xmlhttp.readyState === 4 && xmlhttp.status === 200)
            {

                    var data = xmlhttp.responseText;
                    var msg = "";
                    box.modal('hide');
                    if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                            obj = $.parseJSON(data);
                            var currentLn = obj.agingAnalsys.currentLn;
                            var upTo30Days = obj.agingAnalsys.upTo30Days;
                            var to60Days= obj.agingAnalsys.to60Days;
                            var to90Days = obj.agingAnalsys.to90Days;
                            var to120Days = obj.agingAnalsys.to120Days;
                            var to150Days = obj.agingAnalsys.to150Days;
                            var from151Days = obj.agingAnalsys.from151Days;
                            
                            var Jan001 = obj.dsbmntAnalysis001.January;
                            var Feb001 = obj.dsbmntAnalysis001.February;
                            var Mar001= obj.dsbmntAnalysis001.March;
                            var Apr001 = obj.dsbmntAnalysis001.April;
                            var May001 = obj.dsbmntAnalysis001.May;
                            var Jun001 = obj.dsbmntAnalysis001.June;
                            
                            var Jan002 = obj.dsbmntAnalysis002.January;
                            var Feb002 = obj.dsbmntAnalysis002.February;
                            var Mar002= obj.dsbmntAnalysis002.March;
                            var Apr002 = obj.dsbmntAnalysis002.April;
                            var May002 = obj.dsbmntAnalysis002.May;
                            var Jun002 = obj.dsbmntAnalysis002.June;                            
                            
                            //LOAN SECTOR CLASSIFICATION
                            if (ctxPiD) {
                                var ctxP = ctxPiD.getContext('2d');
                                var myPieChart = new Chart(ctxP, {
                                    type: 'pie',
                                    data: {
                                        labels: ["Current Loans", "Up to 30 days", "31 -> 60 days", "61 -> 90 days",
                                            "91 -> 120 days", "121 -> 150 days", "151 days and above"],
                                        datasets: [
                                            {
                                                data: [currentLn, upTo30Days, to60Days, to90Days, to120Days, to150Days, from151Days],
                                                backgroundColor: ["#F7464A", "#46BFBD", "#FDB45C", "#949FB1", "#4D5360", "#00FF00", "#800080"],
                                                hoverBackgroundColor: ["#FF5A5E", "#5AD3D1", "#FFC870", "#A8B3C5", "#616774", "#00FF00", "#800080"]
                                            }
                                        ]
                                    },
                                    options: {
                                        responsive: true
                                    }
                                });
                            }
                            
                            if (ctxBiD) {
                                var ctxB = ctxBiD.getContext('2d');
                                var myBarChart = new Chart(ctxB, {
                                    type: 'bar',
                                    data: {
                                        labels: ["Current Loans", "Up to 30 days", "31 -> 60 days", "61 -> 90 days",
                                            "91 -> 120 days", "121 -> 150 days", "151 days and above"],
                                        datasets: [{
                                                label: 'Loan Aging Analysis',
                                                data: [currentLn, upTo30Days, to60Days, to90Days, to120Days, to150Days, from151Days],
                                                backgroundColor: [
                                                    'rgba(255, 99, 132, 0.2)',
                                                    'rgba(54, 162, 235, 0.2)',
                                                    'rgba(255, 206, 86, 0.2)',
                                                    'rgba(75, 192, 192, 0.2)',
                                                    'rgba(153, 102, 255, 0.2)',
                                                    'rgba(255, 159, 64, 0.2)',
                                                    'rgba(255, 255, 0, 0.3)'
                                                ],
                                                borderColor: [
                                                    'rgba(255,99,132,1)',
                                                    'rgba(54, 162, 235, 1)',
                                                    'rgba(255, 206, 86, 1)',
                                                    'rgba(75, 192, 192, 1)',
                                                    'rgba(153, 102, 255, 1)',
                                                    'rgba(255, 159, 64, 1)',
                                                    'rgba(255, 255, 0, 1)'
                                                ],
                                                borderWidth: 1
                                            }]
                                    },
                                    optionss: {
                                        scales: {
                                            yAxes: [{
                                                    ticks: {
                                                        beginAtZero: true
                                                    }
                                                }]
                                        }
                                    }
                                });
                            }                              

                            if (ctxLiD) {
                                var ctxL = ctxLiD.getContext('2d');
                                var myLineChart = new Chart(ctxL, {
                                    type: 'line',
                                    data: {
                                        labels: ["January", "February", "March", "April", "May", "June"],
                                        datasets: [
                                            {
                                                label: "Somanya",
                                                fillColor: "rgba(255, 99, 132, 0.2)",
                                                strokeColor: "rgba(255, 99, 132, 1)",
                                                pointColor: "rgba(255, 99, 132, 1)",
                                                pointStrokeColor: "#F7464A",
                                                pointHighlightFill: "#F7464A",
                                                pointHighlightStroke: "rgba(255, 99, 132, 1)",
                                                data: [Jan001, Feb001, Mar001, Apr001, May001, Jun001]
                                            },
                                            {
                                                label: "Nkrukan",
                                                fillColor: "rgba(151,187,205,0.2)",
                                                strokeColor: "rgba(151,187,205,1)",
                                                pointColor: "rgba(151,187,205,1)",
                                                pointStrokeColor: "#fff",
                                                pointHighlightFill: "#fff",
                                                pointHighlightStroke: "rgba(151,187,205,1)",
                                                data: [Jan002, Feb002, Mar002, Apr002, May002, Jun002]
                                            }
                                        ]
                                    },
                                    options: {
                                        responsive: true
                                    }
                                });
                            }                          
                            
                            //SET PRODUCT ID
                            
                            
                    } else {

                            msg = data;
                            box2 = bootbox.alert({
                                    size: "small",
                                    title: "Rhomicom Message",
                                    message: "No Data Found!",
                                    callback: function () {
                                    }
                            });
                    }
            }
    };
    xmlhttp.open("POST", "index.php", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("grp=17&typ=1&pg=4&subPgNo=4.11&vtyp=1");    
 
}

/** END OF LATEST FUNCTIONS **/

//SUPPLEMENATARY ACCOUNTS
function getOneSuplmntryRpymntAccntsForm(pKeyID, vwtype, vwtypActn, actionTxt, trnsStatus)
{
    if (typeof actionTxt === 'undefined' || actionTxt === null)
    {
        actionTxt = 'ShowDialog';
    }

    var lnkArgs = 'grp=17&typ=1&pg=15&subPgNo=4.112&vtyp=' + vwtype + '&vtypActn='+vwtypActn+'&sbmtdLoanRqstID=' + pKeyID +'&trnsStatus=' + trnsStatus;
    doAjaxWthCallBck(lnkArgs, 'myFormsModaly', actionTxt, 'Supplemtary Repayment Accounts', 'myFormsModalyTitle', 'myFormsModalyBody', function () {
        $('#allOtherInputData99').val('0');
        $('#allSuplmntryRpymntAccntsForm').submit(function (e) {
            e.preventDefault();
            return false;
        });
        $('#myFormsModaly').off('hidden.bs.modal');
        $('#myFormsModaly').one('hidden.bs.modal', function (e) {
            $(e.currentTarget).unbind();
        });
        if (!$.fn.DataTable.isDataTable('#allSuplmntryRpymntAccntsTable')) {
            var table1 = $('#allSuplmntryRpymntAccntsTable').DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "bFilter": false,
                "scrollX": false
            });
            $('#allSuplmntryRpymntAccntsTable').wrap('<div class="dataTables_scroll"/>');
        }
        $('[data-toggle="tooltip"]').tooltip();



    });
}

function saveSuplmntryRpymntAccnts(vwtypActn, trnsStatus)
{
    var sbmtdLoanRqstID = $('#sbmtdLoanRqstID').val();
    var dsplyMsg = "";
    var slctdSuplmntryRpymntAccnts = "";

    var errCount = 0;
    var rcdCount = 0;
    var lineCnta = 1;

    $('#allSuplmntryRpymntAccntsTable').find('tr').each(function (i, el) {
        if (i > 0)
        {
            if (typeof $(el).attr('id') === 'undefined')
            {
                /*Do Nothing*/
            } else {
                var rndmNum = $(el).attr('id').split("_")[1];
                if (typeof $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_AccountID').val() === 'undefined')
                {
                    /*Do Nothing*/
                } else {

                    if ($('#allSuplmntryRpymntAccntsRow' + rndmNum + '_AccountID').val() == "" || $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_AccountID').val() == "-1") {
                        $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_AccountDesc').css('border-color', 'red');
                        $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_AccountDesc').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_AccountDesc').css('border-color', '#ccc');
                        $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_AccountDesc').css('border-width', '1px');
                    }
                    if ($('#allSuplmntryRpymntAccntsRow' + rndmNum + '_IsEnabled').val() == "" || $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_IsEnabled').val() == "") {
                        $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_IsEnabled').css('border-color', 'red');
                        $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_IsEnabled').css('border-width', '2px');
                        errCount = errCount + 1;
                    } else {
                        $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_IsEnabled').css('border-color', '#ccc');
                        $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_IsEnabled').css('border-width', '1px');
                    }
                    if (errCount <= 0) {
                        slctdSuplmntryRpymntAccnts = slctdSuplmntryRpymntAccnts
                                + $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_SuplmntryRpymntAccntsID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#sbmtdLoanRqstID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_AccountID').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "~"
                                + $('#allSuplmntryRpymntAccntsRow' + rndmNum + '_IsEnabled').val().replace(/(~)/g, "{-;-;}").replace(/(\|)/g, "{:;:;}") + "|";
                        rcdCount = rcdCount + 1;
                    }
                    lineCnta = lineCnta + 1;
                }
            }
        }
    });

    if (errCount > 0) {
        box2 = bootbox.alert({
            size: "small",
            title: "Rhomicom Message",
            message: "<span style='color:red;'><b><i>Please enter data in all highlighted Payment Plan Setup record(s)</i></b></span>",
            callback: function () { /* your callback code */
            }
        });
        return false;
    }

    var dsplyMsg = "Saving Supplementary Repayment Accounts(s)...Please Wait...";
    var dsplyMsgTtle = "Save Supplementary Repayment Accounts(s)?";
    var dsplyMsgRtrn = "Account(s) Saved";

    var dialog = bootbox.alert({
        title: dsplyMsgTtle,
        size: 'small',
        message: '<p><i class="fa fa-spin fa-spinner"></i> ' + dsplyMsg + '</p>',
        callback: function () {
            var recCnt = typeof $("#recCnt").val() === 'undefined' ? 0 : $("#recCnt").val();

            if (parseInt(recCnt) > 0) {
                getOneSuplmntryRpymntAccntsForm(sbmtdLoanRqstID, 4.112, vwtypActn,  'ReloadDialog', trnsStatus);
            }
        }
    });
    dialog.init(function () {
        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
            $body = $("body");
            $body.removeClass("mdlloading");
            $.ajax({
                method: "POST",
                url: "index.php",
                data: {
                    grp: 17,
                    typ: 1,
                    pg: 15,
		    vtyp: 6,
                    subPgNo: 4.1,
                    q: 'UPDATE',
                    actyp: 3,
                    slctdSuplmntryRpymntAccnts: slctdSuplmntryRpymntAccnts
                },
                success: function (result) {
                    var data = result;
                    setTimeout(function () {
                        if (/^[\],:{}\s]*$/.test(data.replace(/\\["\\\/bfnrtu]/g, '@').
                                replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                                replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                            var obj = $.parseJSON(data);
                            $("#recCnt").val(parseInt(obj.recCntInst) + parseInt(obj.recCntUpdt));
                            var msg = "<span style='color:green;font-weight:bold !important;'>" + dsplyMsgRtrn + "</br><i>" + obj.recCntInst + " record(s) inserted</br>"
                                    + obj.recCntUpdt + " Setup record(s) updated</i></span>"
                            dialog.find('.bootbox-body').html(msg);
                        } else {
                            dialog.find('.bootbox-body').html(data);
                        }

                    }, 500);
                },
                error: function (jqXHR, textStatus, errorThrown)
                {
                    /*dialog.find('.bootbox-body').html(errorThrown);*/
                    console.warn(jqXHR.responseText);
                }
            });
        });
    });
}

function deleteSuplmntryRpymntAccnts(rowIDAttrb)
{
    var rndmNum = rowIDAttrb.split("_")[1];
    var rowPrfxNm = rowIDAttrb.split("_")[0];
    var pKeyID = -1;
    var ItemID = "";
    if (typeof $('#' + rowPrfxNm + rndmNum + '_SuplmntryRpymntAccntsID').val() === 'undefined')
    {
        /*Do Nothing*/
    } else {
        pKeyID = $('#' + rowPrfxNm + rndmNum + '_SuplmntryRpymntAccntsID').val();
        var $tds = $('#' + rowIDAttrb).find('td');
        ItemID = $.trim($tds.eq(2).text());
    }
    var dialog = bootbox.confirm({
        title: 'Delete Row?',
        size: 'small',
        message: '<p style="text-align:center;">Are you sure you want to <span style="color:red;font-weight:bold;font-style:italic;">DELETE</span> this Row?<br/>Action cannot be Undone!</p>',
        buttons: {
            confirm: {
                label: '<i class="fa fa-check"></i> Yes',
                className: 'btn-success'
            },
            cancel: {
                label: '<i class="fa fa-times"></i> No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result === true)
            {
                var dialog1 = bootbox.alert({
                    title: 'Delete Row?',
                    size: 'small',
                    message: '<p><i class="fa fa-spin fa-spinner"></i> Deleting Row...Please Wait...</p>',
                    callback: function () {
                        $("body").css("padding-right", "0px");
                    }
                });
                dialog1.init(function () {
                    if (pKeyID > 0) {
                        getMsgAsyncSilent('grp=1&typ=11&q=Check Session', function () {
                            $body = $("body");
                            $body.removeClass("mdlloading");
                            $.ajax({
                                method: "POST",
                                url: "index.php",
                                data: {
                                    grp: 17,
                                    typ: 1,
                                    pg: 15,
                                    subPgNo: 4.1,
                                    q: 'DELETE',
                                    actyp: 6,
                                    PKeyID: pKeyID
                                },
                                success: function (result1) {
                                    setTimeout(function () {
                                        dialog1.find('.bootbox-body').html(result1);
                                        if (result1.indexOf("Success") !== -1) {
                                            $("#" + rowIDAttrb).remove();
                                        }
                                    }, 500);
                                },
                                error: function (jqXHR1, textStatus1, errorThrown1)
                                {
                                    dialog1.find('.bootbox-body').html(errorThrown1);
                                }
                            });
                        });
                    } else
                    {
                        setTimeout(function () {
                            $("#" + rowIDAttrb).remove();
                            dialog1.find('.bootbox-body').html('Row Removed Successfully!');
                        }, 500);
                    }
                });
            }
        }
    });
}
//END OF SUPPLEMENATARY ACCOUNTS

function onClickOfRpymntAccountLov() {
    var crdtType = typeof $("#crdtType").val() === 'undefined' ? '' : $("#crdtType").val();

    var lovNm = "Invalid Credit Type";
    if (crdtType == "Overdraft") {
        var lovNm = "All Bank Accounts (For Loan Repayment)";
    } else if (crdtType == "Loan") {
        var lovNm = "Loan Repayment Accounts";
    }
    
    getLovsPage('myLovModal', 'myLovModalTitle', 'myLovModalBody', lovNm, 'gnrlOrgID', 'bnkCustomerID', '', 'radio', true, '', 'rpmntSrcAcctID', 'rpmntSrcAcct', 'clear', 1, '');
    
}